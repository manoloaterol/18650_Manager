
18650_DC-DC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001870  08008890  08008890  00018890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a100  0800a100  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  0800a100  0800a100  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a100  0800a100  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a100  0800a100  0001a100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a104  0800a104  0001a104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a108  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200001ec  0800a2f4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  0800a2f4  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec45  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021b1  00000000  00000000  0002ee59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d20  00000000  00000000  00031010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c08  00000000  00000000  00031d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001712e  00000000  00000000  00032938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b762  00000000  00000000  00049a66  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008fc2a  00000000  00000000  000551c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e4df2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a4  00000000  00000000  000e4e70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001ec 	.word	0x200001ec
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008874 	.word	0x08008874

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001f0 	.word	0x200001f0
 8000100:	08008874 	.word	0x08008874

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <__aeabi_cdrcmple>:
 8000414:	4684      	mov	ip, r0
 8000416:	1c10      	adds	r0, r2, #0
 8000418:	4662      	mov	r2, ip
 800041a:	468c      	mov	ip, r1
 800041c:	1c19      	adds	r1, r3, #0
 800041e:	4663      	mov	r3, ip
 8000420:	e000      	b.n	8000424 <__aeabi_cdcmpeq>
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdcmpeq>:
 8000424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000426:	f000 ff4f 	bl	80012c8 <__ledf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	d401      	bmi.n	8000432 <__aeabi_cdcmpeq+0xe>
 800042e:	2100      	movs	r1, #0
 8000430:	42c8      	cmn	r0, r1
 8000432:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000434 <__aeabi_dcmpeq>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 fea7 	bl	8001188 <__eqdf2>
 800043a:	4240      	negs	r0, r0
 800043c:	3001      	adds	r0, #1
 800043e:	bd10      	pop	{r4, pc}

08000440 <__aeabi_dcmplt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 ff41 	bl	80012c8 <__ledf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	db01      	blt.n	800044e <__aeabi_dcmplt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmple>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ff37 	bl	80012c8 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dd01      	ble.n	8000462 <__aeabi_dcmple+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmpgt>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fec9 	bl	8001200 <__gedf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dc01      	bgt.n	8000476 <__aeabi_dcmpgt+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpge>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 febf 	bl	8001200 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	da01      	bge.n	800048a <__aeabi_dcmpge+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_d2uiz>:
 8000490:	b570      	push	{r4, r5, r6, lr}
 8000492:	2200      	movs	r2, #0
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <__aeabi_d2uiz+0x38>)
 8000496:	0004      	movs	r4, r0
 8000498:	000d      	movs	r5, r1
 800049a:	f7ff ffef 	bl	800047c <__aeabi_dcmpge>
 800049e:	2800      	cmp	r0, #0
 80004a0:	d104      	bne.n	80004ac <__aeabi_d2uiz+0x1c>
 80004a2:	0020      	movs	r0, r4
 80004a4:	0029      	movs	r1, r5
 80004a6:	f001 fd4d 	bl	8001f44 <__aeabi_d2iz>
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <__aeabi_d2uiz+0x38>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	0020      	movs	r0, r4
 80004b2:	0029      	movs	r1, r5
 80004b4:	f001 f9e2 	bl	800187c <__aeabi_dsub>
 80004b8:	f001 fd44 	bl	8001f44 <__aeabi_d2iz>
 80004bc:	2380      	movs	r3, #128	; 0x80
 80004be:	061b      	lsls	r3, r3, #24
 80004c0:	469c      	mov	ip, r3
 80004c2:	4460      	add	r0, ip
 80004c4:	e7f1      	b.n	80004aa <__aeabi_d2uiz+0x1a>
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	41e00000 	.word	0x41e00000

080004cc <__aeabi_ui2f>:
 80004cc:	b570      	push	{r4, r5, r6, lr}
 80004ce:	1e04      	subs	r4, r0, #0
 80004d0:	d034      	beq.n	800053c <__aeabi_ui2f+0x70>
 80004d2:	f001 feaf 	bl	8002234 <__clzsi2>
 80004d6:	229e      	movs	r2, #158	; 0x9e
 80004d8:	1a12      	subs	r2, r2, r0
 80004da:	2a96      	cmp	r2, #150	; 0x96
 80004dc:	dc07      	bgt.n	80004ee <__aeabi_ui2f+0x22>
 80004de:	b2d2      	uxtb	r2, r2
 80004e0:	2808      	cmp	r0, #8
 80004e2:	dd2e      	ble.n	8000542 <__aeabi_ui2f+0x76>
 80004e4:	3808      	subs	r0, #8
 80004e6:	4084      	lsls	r4, r0
 80004e8:	0260      	lsls	r0, r4, #9
 80004ea:	0a40      	lsrs	r0, r0, #9
 80004ec:	e021      	b.n	8000532 <__aeabi_ui2f+0x66>
 80004ee:	2a99      	cmp	r2, #153	; 0x99
 80004f0:	dd09      	ble.n	8000506 <__aeabi_ui2f+0x3a>
 80004f2:	0003      	movs	r3, r0
 80004f4:	0021      	movs	r1, r4
 80004f6:	331b      	adds	r3, #27
 80004f8:	4099      	lsls	r1, r3
 80004fa:	1e4b      	subs	r3, r1, #1
 80004fc:	4199      	sbcs	r1, r3
 80004fe:	2305      	movs	r3, #5
 8000500:	1a1b      	subs	r3, r3, r0
 8000502:	40dc      	lsrs	r4, r3
 8000504:	430c      	orrs	r4, r1
 8000506:	2805      	cmp	r0, #5
 8000508:	dd01      	ble.n	800050e <__aeabi_ui2f+0x42>
 800050a:	1f43      	subs	r3, r0, #5
 800050c:	409c      	lsls	r4, r3
 800050e:	0023      	movs	r3, r4
 8000510:	490d      	ldr	r1, [pc, #52]	; (8000548 <__aeabi_ui2f+0x7c>)
 8000512:	400b      	ands	r3, r1
 8000514:	0765      	lsls	r5, r4, #29
 8000516:	d009      	beq.n	800052c <__aeabi_ui2f+0x60>
 8000518:	250f      	movs	r5, #15
 800051a:	402c      	ands	r4, r5
 800051c:	2c04      	cmp	r4, #4
 800051e:	d005      	beq.n	800052c <__aeabi_ui2f+0x60>
 8000520:	3304      	adds	r3, #4
 8000522:	015c      	lsls	r4, r3, #5
 8000524:	d502      	bpl.n	800052c <__aeabi_ui2f+0x60>
 8000526:	229f      	movs	r2, #159	; 0x9f
 8000528:	400b      	ands	r3, r1
 800052a:	1a12      	subs	r2, r2, r0
 800052c:	019b      	lsls	r3, r3, #6
 800052e:	0a58      	lsrs	r0, r3, #9
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	0240      	lsls	r0, r0, #9
 8000534:	05d2      	lsls	r2, r2, #23
 8000536:	0a40      	lsrs	r0, r0, #9
 8000538:	4310      	orrs	r0, r2
 800053a:	bd70      	pop	{r4, r5, r6, pc}
 800053c:	2200      	movs	r2, #0
 800053e:	2000      	movs	r0, #0
 8000540:	e7f7      	b.n	8000532 <__aeabi_ui2f+0x66>
 8000542:	0260      	lsls	r0, r4, #9
 8000544:	0a40      	lsrs	r0, r0, #9
 8000546:	e7f4      	b.n	8000532 <__aeabi_ui2f+0x66>
 8000548:	fbffffff 	.word	0xfbffffff

0800054c <__aeabi_dadd>:
 800054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054e:	464f      	mov	r7, r9
 8000550:	4646      	mov	r6, r8
 8000552:	46d6      	mov	lr, sl
 8000554:	000c      	movs	r4, r1
 8000556:	0309      	lsls	r1, r1, #12
 8000558:	b5c0      	push	{r6, r7, lr}
 800055a:	0a49      	lsrs	r1, r1, #9
 800055c:	0f47      	lsrs	r7, r0, #29
 800055e:	005e      	lsls	r6, r3, #1
 8000560:	4339      	orrs	r1, r7
 8000562:	031f      	lsls	r7, r3, #12
 8000564:	0fdb      	lsrs	r3, r3, #31
 8000566:	469c      	mov	ip, r3
 8000568:	0065      	lsls	r5, r4, #1
 800056a:	0a7b      	lsrs	r3, r7, #9
 800056c:	0f57      	lsrs	r7, r2, #29
 800056e:	431f      	orrs	r7, r3
 8000570:	0d6d      	lsrs	r5, r5, #21
 8000572:	0fe4      	lsrs	r4, r4, #31
 8000574:	0d76      	lsrs	r6, r6, #21
 8000576:	46a1      	mov	r9, r4
 8000578:	00c0      	lsls	r0, r0, #3
 800057a:	46b8      	mov	r8, r7
 800057c:	00d2      	lsls	r2, r2, #3
 800057e:	1bab      	subs	r3, r5, r6
 8000580:	4564      	cmp	r4, ip
 8000582:	d07b      	beq.n	800067c <__aeabi_dadd+0x130>
 8000584:	2b00      	cmp	r3, #0
 8000586:	dd5f      	ble.n	8000648 <__aeabi_dadd+0xfc>
 8000588:	2e00      	cmp	r6, #0
 800058a:	d000      	beq.n	800058e <__aeabi_dadd+0x42>
 800058c:	e0a4      	b.n	80006d8 <__aeabi_dadd+0x18c>
 800058e:	003e      	movs	r6, r7
 8000590:	4316      	orrs	r6, r2
 8000592:	d100      	bne.n	8000596 <__aeabi_dadd+0x4a>
 8000594:	e112      	b.n	80007bc <__aeabi_dadd+0x270>
 8000596:	1e5e      	subs	r6, r3, #1
 8000598:	2e00      	cmp	r6, #0
 800059a:	d000      	beq.n	800059e <__aeabi_dadd+0x52>
 800059c:	e19e      	b.n	80008dc <__aeabi_dadd+0x390>
 800059e:	1a87      	subs	r7, r0, r2
 80005a0:	4643      	mov	r3, r8
 80005a2:	42b8      	cmp	r0, r7
 80005a4:	4180      	sbcs	r0, r0
 80005a6:	2501      	movs	r5, #1
 80005a8:	1ac9      	subs	r1, r1, r3
 80005aa:	4240      	negs	r0, r0
 80005ac:	1a09      	subs	r1, r1, r0
 80005ae:	020b      	lsls	r3, r1, #8
 80005b0:	d400      	bmi.n	80005b4 <__aeabi_dadd+0x68>
 80005b2:	e131      	b.n	8000818 <__aeabi_dadd+0x2cc>
 80005b4:	0249      	lsls	r1, r1, #9
 80005b6:	0a4e      	lsrs	r6, r1, #9
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d100      	bne.n	80005be <__aeabi_dadd+0x72>
 80005bc:	e16e      	b.n	800089c <__aeabi_dadd+0x350>
 80005be:	0030      	movs	r0, r6
 80005c0:	f001 fe38 	bl	8002234 <__clzsi2>
 80005c4:	0003      	movs	r3, r0
 80005c6:	3b08      	subs	r3, #8
 80005c8:	2b1f      	cmp	r3, #31
 80005ca:	dd00      	ble.n	80005ce <__aeabi_dadd+0x82>
 80005cc:	e161      	b.n	8000892 <__aeabi_dadd+0x346>
 80005ce:	2220      	movs	r2, #32
 80005d0:	0039      	movs	r1, r7
 80005d2:	1ad2      	subs	r2, r2, r3
 80005d4:	409e      	lsls	r6, r3
 80005d6:	40d1      	lsrs	r1, r2
 80005d8:	409f      	lsls	r7, r3
 80005da:	430e      	orrs	r6, r1
 80005dc:	429d      	cmp	r5, r3
 80005de:	dd00      	ble.n	80005e2 <__aeabi_dadd+0x96>
 80005e0:	e151      	b.n	8000886 <__aeabi_dadd+0x33a>
 80005e2:	1b5d      	subs	r5, r3, r5
 80005e4:	1c6b      	adds	r3, r5, #1
 80005e6:	2b1f      	cmp	r3, #31
 80005e8:	dd00      	ble.n	80005ec <__aeabi_dadd+0xa0>
 80005ea:	e17c      	b.n	80008e6 <__aeabi_dadd+0x39a>
 80005ec:	2120      	movs	r1, #32
 80005ee:	1ac9      	subs	r1, r1, r3
 80005f0:	003d      	movs	r5, r7
 80005f2:	0030      	movs	r0, r6
 80005f4:	408f      	lsls	r7, r1
 80005f6:	4088      	lsls	r0, r1
 80005f8:	40dd      	lsrs	r5, r3
 80005fa:	1e79      	subs	r1, r7, #1
 80005fc:	418f      	sbcs	r7, r1
 80005fe:	0031      	movs	r1, r6
 8000600:	2207      	movs	r2, #7
 8000602:	4328      	orrs	r0, r5
 8000604:	40d9      	lsrs	r1, r3
 8000606:	2500      	movs	r5, #0
 8000608:	4307      	orrs	r7, r0
 800060a:	403a      	ands	r2, r7
 800060c:	2a00      	cmp	r2, #0
 800060e:	d009      	beq.n	8000624 <__aeabi_dadd+0xd8>
 8000610:	230f      	movs	r3, #15
 8000612:	403b      	ands	r3, r7
 8000614:	2b04      	cmp	r3, #4
 8000616:	d005      	beq.n	8000624 <__aeabi_dadd+0xd8>
 8000618:	1d3b      	adds	r3, r7, #4
 800061a:	42bb      	cmp	r3, r7
 800061c:	41bf      	sbcs	r7, r7
 800061e:	427f      	negs	r7, r7
 8000620:	19c9      	adds	r1, r1, r7
 8000622:	001f      	movs	r7, r3
 8000624:	020b      	lsls	r3, r1, #8
 8000626:	d400      	bmi.n	800062a <__aeabi_dadd+0xde>
 8000628:	e226      	b.n	8000a78 <__aeabi_dadd+0x52c>
 800062a:	1c6a      	adds	r2, r5, #1
 800062c:	4bc6      	ldr	r3, [pc, #792]	; (8000948 <__aeabi_dadd+0x3fc>)
 800062e:	0555      	lsls	r5, r2, #21
 8000630:	0d6d      	lsrs	r5, r5, #21
 8000632:	429a      	cmp	r2, r3
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0xec>
 8000636:	e106      	b.n	8000846 <__aeabi_dadd+0x2fa>
 8000638:	4ac4      	ldr	r2, [pc, #784]	; (800094c <__aeabi_dadd+0x400>)
 800063a:	08ff      	lsrs	r7, r7, #3
 800063c:	400a      	ands	r2, r1
 800063e:	0753      	lsls	r3, r2, #29
 8000640:	0252      	lsls	r2, r2, #9
 8000642:	433b      	orrs	r3, r7
 8000644:	0b12      	lsrs	r2, r2, #12
 8000646:	e08e      	b.n	8000766 <__aeabi_dadd+0x21a>
 8000648:	2b00      	cmp	r3, #0
 800064a:	d000      	beq.n	800064e <__aeabi_dadd+0x102>
 800064c:	e0b8      	b.n	80007c0 <__aeabi_dadd+0x274>
 800064e:	1c6b      	adds	r3, r5, #1
 8000650:	055b      	lsls	r3, r3, #21
 8000652:	0d5b      	lsrs	r3, r3, #21
 8000654:	2b01      	cmp	r3, #1
 8000656:	dc00      	bgt.n	800065a <__aeabi_dadd+0x10e>
 8000658:	e130      	b.n	80008bc <__aeabi_dadd+0x370>
 800065a:	1a87      	subs	r7, r0, r2
 800065c:	4643      	mov	r3, r8
 800065e:	42b8      	cmp	r0, r7
 8000660:	41b6      	sbcs	r6, r6
 8000662:	1acb      	subs	r3, r1, r3
 8000664:	4276      	negs	r6, r6
 8000666:	1b9e      	subs	r6, r3, r6
 8000668:	0233      	lsls	r3, r6, #8
 800066a:	d500      	bpl.n	800066e <__aeabi_dadd+0x122>
 800066c:	e14c      	b.n	8000908 <__aeabi_dadd+0x3bc>
 800066e:	003b      	movs	r3, r7
 8000670:	4333      	orrs	r3, r6
 8000672:	d1a1      	bne.n	80005b8 <__aeabi_dadd+0x6c>
 8000674:	2200      	movs	r2, #0
 8000676:	2400      	movs	r4, #0
 8000678:	2500      	movs	r5, #0
 800067a:	e070      	b.n	800075e <__aeabi_dadd+0x212>
 800067c:	2b00      	cmp	r3, #0
 800067e:	dc00      	bgt.n	8000682 <__aeabi_dadd+0x136>
 8000680:	e0e5      	b.n	800084e <__aeabi_dadd+0x302>
 8000682:	2e00      	cmp	r6, #0
 8000684:	d100      	bne.n	8000688 <__aeabi_dadd+0x13c>
 8000686:	e083      	b.n	8000790 <__aeabi_dadd+0x244>
 8000688:	4eaf      	ldr	r6, [pc, #700]	; (8000948 <__aeabi_dadd+0x3fc>)
 800068a:	42b5      	cmp	r5, r6
 800068c:	d060      	beq.n	8000750 <__aeabi_dadd+0x204>
 800068e:	2680      	movs	r6, #128	; 0x80
 8000690:	0436      	lsls	r6, r6, #16
 8000692:	4337      	orrs	r7, r6
 8000694:	46b8      	mov	r8, r7
 8000696:	2b38      	cmp	r3, #56	; 0x38
 8000698:	dc00      	bgt.n	800069c <__aeabi_dadd+0x150>
 800069a:	e13e      	b.n	800091a <__aeabi_dadd+0x3ce>
 800069c:	4643      	mov	r3, r8
 800069e:	4313      	orrs	r3, r2
 80006a0:	001f      	movs	r7, r3
 80006a2:	1e7a      	subs	r2, r7, #1
 80006a4:	4197      	sbcs	r7, r2
 80006a6:	183f      	adds	r7, r7, r0
 80006a8:	4287      	cmp	r7, r0
 80006aa:	4180      	sbcs	r0, r0
 80006ac:	4240      	negs	r0, r0
 80006ae:	1809      	adds	r1, r1, r0
 80006b0:	020b      	lsls	r3, r1, #8
 80006b2:	d400      	bmi.n	80006b6 <__aeabi_dadd+0x16a>
 80006b4:	e0b0      	b.n	8000818 <__aeabi_dadd+0x2cc>
 80006b6:	4ba4      	ldr	r3, [pc, #656]	; (8000948 <__aeabi_dadd+0x3fc>)
 80006b8:	3501      	adds	r5, #1
 80006ba:	429d      	cmp	r5, r3
 80006bc:	d100      	bne.n	80006c0 <__aeabi_dadd+0x174>
 80006be:	e0c3      	b.n	8000848 <__aeabi_dadd+0x2fc>
 80006c0:	4aa2      	ldr	r2, [pc, #648]	; (800094c <__aeabi_dadd+0x400>)
 80006c2:	087b      	lsrs	r3, r7, #1
 80006c4:	400a      	ands	r2, r1
 80006c6:	2101      	movs	r1, #1
 80006c8:	400f      	ands	r7, r1
 80006ca:	431f      	orrs	r7, r3
 80006cc:	0851      	lsrs	r1, r2, #1
 80006ce:	07d3      	lsls	r3, r2, #31
 80006d0:	2207      	movs	r2, #7
 80006d2:	431f      	orrs	r7, r3
 80006d4:	403a      	ands	r2, r7
 80006d6:	e799      	b.n	800060c <__aeabi_dadd+0xc0>
 80006d8:	4e9b      	ldr	r6, [pc, #620]	; (8000948 <__aeabi_dadd+0x3fc>)
 80006da:	42b5      	cmp	r5, r6
 80006dc:	d038      	beq.n	8000750 <__aeabi_dadd+0x204>
 80006de:	2680      	movs	r6, #128	; 0x80
 80006e0:	0436      	lsls	r6, r6, #16
 80006e2:	4337      	orrs	r7, r6
 80006e4:	46b8      	mov	r8, r7
 80006e6:	2b38      	cmp	r3, #56	; 0x38
 80006e8:	dd00      	ble.n	80006ec <__aeabi_dadd+0x1a0>
 80006ea:	e0dc      	b.n	80008a6 <__aeabi_dadd+0x35a>
 80006ec:	2b1f      	cmp	r3, #31
 80006ee:	dc00      	bgt.n	80006f2 <__aeabi_dadd+0x1a6>
 80006f0:	e130      	b.n	8000954 <__aeabi_dadd+0x408>
 80006f2:	001e      	movs	r6, r3
 80006f4:	4647      	mov	r7, r8
 80006f6:	3e20      	subs	r6, #32
 80006f8:	40f7      	lsrs	r7, r6
 80006fa:	46bc      	mov	ip, r7
 80006fc:	2b20      	cmp	r3, #32
 80006fe:	d004      	beq.n	800070a <__aeabi_dadd+0x1be>
 8000700:	2640      	movs	r6, #64	; 0x40
 8000702:	1af3      	subs	r3, r6, r3
 8000704:	4646      	mov	r6, r8
 8000706:	409e      	lsls	r6, r3
 8000708:	4332      	orrs	r2, r6
 800070a:	0017      	movs	r7, r2
 800070c:	4663      	mov	r3, ip
 800070e:	1e7a      	subs	r2, r7, #1
 8000710:	4197      	sbcs	r7, r2
 8000712:	431f      	orrs	r7, r3
 8000714:	e0cc      	b.n	80008b0 <__aeabi_dadd+0x364>
 8000716:	2b00      	cmp	r3, #0
 8000718:	d100      	bne.n	800071c <__aeabi_dadd+0x1d0>
 800071a:	e204      	b.n	8000b26 <__aeabi_dadd+0x5da>
 800071c:	4643      	mov	r3, r8
 800071e:	4313      	orrs	r3, r2
 8000720:	d100      	bne.n	8000724 <__aeabi_dadd+0x1d8>
 8000722:	e159      	b.n	80009d8 <__aeabi_dadd+0x48c>
 8000724:	074b      	lsls	r3, r1, #29
 8000726:	08c0      	lsrs	r0, r0, #3
 8000728:	4318      	orrs	r0, r3
 800072a:	2380      	movs	r3, #128	; 0x80
 800072c:	08c9      	lsrs	r1, r1, #3
 800072e:	031b      	lsls	r3, r3, #12
 8000730:	4219      	tst	r1, r3
 8000732:	d008      	beq.n	8000746 <__aeabi_dadd+0x1fa>
 8000734:	4645      	mov	r5, r8
 8000736:	08ed      	lsrs	r5, r5, #3
 8000738:	421d      	tst	r5, r3
 800073a:	d104      	bne.n	8000746 <__aeabi_dadd+0x1fa>
 800073c:	4643      	mov	r3, r8
 800073e:	08d0      	lsrs	r0, r2, #3
 8000740:	0759      	lsls	r1, r3, #29
 8000742:	4308      	orrs	r0, r1
 8000744:	0029      	movs	r1, r5
 8000746:	0f42      	lsrs	r2, r0, #29
 8000748:	00c9      	lsls	r1, r1, #3
 800074a:	4d7f      	ldr	r5, [pc, #508]	; (8000948 <__aeabi_dadd+0x3fc>)
 800074c:	4311      	orrs	r1, r2
 800074e:	00c0      	lsls	r0, r0, #3
 8000750:	074b      	lsls	r3, r1, #29
 8000752:	08ca      	lsrs	r2, r1, #3
 8000754:	497c      	ldr	r1, [pc, #496]	; (8000948 <__aeabi_dadd+0x3fc>)
 8000756:	08c0      	lsrs	r0, r0, #3
 8000758:	4303      	orrs	r3, r0
 800075a:	428d      	cmp	r5, r1
 800075c:	d068      	beq.n	8000830 <__aeabi_dadd+0x2e4>
 800075e:	0312      	lsls	r2, r2, #12
 8000760:	056d      	lsls	r5, r5, #21
 8000762:	0b12      	lsrs	r2, r2, #12
 8000764:	0d6d      	lsrs	r5, r5, #21
 8000766:	2100      	movs	r1, #0
 8000768:	0312      	lsls	r2, r2, #12
 800076a:	0018      	movs	r0, r3
 800076c:	0b13      	lsrs	r3, r2, #12
 800076e:	0d0a      	lsrs	r2, r1, #20
 8000770:	0512      	lsls	r2, r2, #20
 8000772:	431a      	orrs	r2, r3
 8000774:	4b76      	ldr	r3, [pc, #472]	; (8000950 <__aeabi_dadd+0x404>)
 8000776:	052d      	lsls	r5, r5, #20
 8000778:	4013      	ands	r3, r2
 800077a:	432b      	orrs	r3, r5
 800077c:	005b      	lsls	r3, r3, #1
 800077e:	07e4      	lsls	r4, r4, #31
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	4323      	orrs	r3, r4
 8000784:	0019      	movs	r1, r3
 8000786:	bc1c      	pop	{r2, r3, r4}
 8000788:	4690      	mov	r8, r2
 800078a:	4699      	mov	r9, r3
 800078c:	46a2      	mov	sl, r4
 800078e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000790:	003e      	movs	r6, r7
 8000792:	4316      	orrs	r6, r2
 8000794:	d012      	beq.n	80007bc <__aeabi_dadd+0x270>
 8000796:	1e5e      	subs	r6, r3, #1
 8000798:	2e00      	cmp	r6, #0
 800079a:	d000      	beq.n	800079e <__aeabi_dadd+0x252>
 800079c:	e100      	b.n	80009a0 <__aeabi_dadd+0x454>
 800079e:	1887      	adds	r7, r0, r2
 80007a0:	4287      	cmp	r7, r0
 80007a2:	4180      	sbcs	r0, r0
 80007a4:	4441      	add	r1, r8
 80007a6:	4240      	negs	r0, r0
 80007a8:	1809      	adds	r1, r1, r0
 80007aa:	2501      	movs	r5, #1
 80007ac:	020b      	lsls	r3, r1, #8
 80007ae:	d533      	bpl.n	8000818 <__aeabi_dadd+0x2cc>
 80007b0:	2502      	movs	r5, #2
 80007b2:	e785      	b.n	80006c0 <__aeabi_dadd+0x174>
 80007b4:	4664      	mov	r4, ip
 80007b6:	0033      	movs	r3, r6
 80007b8:	4641      	mov	r1, r8
 80007ba:	0010      	movs	r0, r2
 80007bc:	001d      	movs	r5, r3
 80007be:	e7c7      	b.n	8000750 <__aeabi_dadd+0x204>
 80007c0:	2d00      	cmp	r5, #0
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x27a>
 80007c4:	e0da      	b.n	800097c <__aeabi_dadd+0x430>
 80007c6:	000c      	movs	r4, r1
 80007c8:	4304      	orrs	r4, r0
 80007ca:	d0f3      	beq.n	80007b4 <__aeabi_dadd+0x268>
 80007cc:	1c5c      	adds	r4, r3, #1
 80007ce:	d100      	bne.n	80007d2 <__aeabi_dadd+0x286>
 80007d0:	e19f      	b.n	8000b12 <__aeabi_dadd+0x5c6>
 80007d2:	4c5d      	ldr	r4, [pc, #372]	; (8000948 <__aeabi_dadd+0x3fc>)
 80007d4:	42a6      	cmp	r6, r4
 80007d6:	d100      	bne.n	80007da <__aeabi_dadd+0x28e>
 80007d8:	e12f      	b.n	8000a3a <__aeabi_dadd+0x4ee>
 80007da:	43db      	mvns	r3, r3
 80007dc:	2b38      	cmp	r3, #56	; 0x38
 80007de:	dd00      	ble.n	80007e2 <__aeabi_dadd+0x296>
 80007e0:	e166      	b.n	8000ab0 <__aeabi_dadd+0x564>
 80007e2:	2b1f      	cmp	r3, #31
 80007e4:	dd00      	ble.n	80007e8 <__aeabi_dadd+0x29c>
 80007e6:	e183      	b.n	8000af0 <__aeabi_dadd+0x5a4>
 80007e8:	2420      	movs	r4, #32
 80007ea:	0005      	movs	r5, r0
 80007ec:	1ae4      	subs	r4, r4, r3
 80007ee:	000f      	movs	r7, r1
 80007f0:	40dd      	lsrs	r5, r3
 80007f2:	40d9      	lsrs	r1, r3
 80007f4:	40a0      	lsls	r0, r4
 80007f6:	4643      	mov	r3, r8
 80007f8:	40a7      	lsls	r7, r4
 80007fa:	1a5b      	subs	r3, r3, r1
 80007fc:	1e44      	subs	r4, r0, #1
 80007fe:	41a0      	sbcs	r0, r4
 8000800:	4698      	mov	r8, r3
 8000802:	432f      	orrs	r7, r5
 8000804:	4338      	orrs	r0, r7
 8000806:	1a17      	subs	r7, r2, r0
 8000808:	42ba      	cmp	r2, r7
 800080a:	4192      	sbcs	r2, r2
 800080c:	4643      	mov	r3, r8
 800080e:	4252      	negs	r2, r2
 8000810:	1a99      	subs	r1, r3, r2
 8000812:	4664      	mov	r4, ip
 8000814:	0035      	movs	r5, r6
 8000816:	e6ca      	b.n	80005ae <__aeabi_dadd+0x62>
 8000818:	2207      	movs	r2, #7
 800081a:	403a      	ands	r2, r7
 800081c:	2a00      	cmp	r2, #0
 800081e:	d000      	beq.n	8000822 <__aeabi_dadd+0x2d6>
 8000820:	e6f6      	b.n	8000610 <__aeabi_dadd+0xc4>
 8000822:	074b      	lsls	r3, r1, #29
 8000824:	08ca      	lsrs	r2, r1, #3
 8000826:	4948      	ldr	r1, [pc, #288]	; (8000948 <__aeabi_dadd+0x3fc>)
 8000828:	08ff      	lsrs	r7, r7, #3
 800082a:	433b      	orrs	r3, r7
 800082c:	428d      	cmp	r5, r1
 800082e:	d196      	bne.n	800075e <__aeabi_dadd+0x212>
 8000830:	0019      	movs	r1, r3
 8000832:	4311      	orrs	r1, r2
 8000834:	d100      	bne.n	8000838 <__aeabi_dadd+0x2ec>
 8000836:	e19e      	b.n	8000b76 <__aeabi_dadd+0x62a>
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	0309      	lsls	r1, r1, #12
 800083c:	430a      	orrs	r2, r1
 800083e:	0312      	lsls	r2, r2, #12
 8000840:	0b12      	lsrs	r2, r2, #12
 8000842:	4d41      	ldr	r5, [pc, #260]	; (8000948 <__aeabi_dadd+0x3fc>)
 8000844:	e78f      	b.n	8000766 <__aeabi_dadd+0x21a>
 8000846:	0015      	movs	r5, r2
 8000848:	2200      	movs	r2, #0
 800084a:	2300      	movs	r3, #0
 800084c:	e78b      	b.n	8000766 <__aeabi_dadd+0x21a>
 800084e:	2b00      	cmp	r3, #0
 8000850:	d000      	beq.n	8000854 <__aeabi_dadd+0x308>
 8000852:	e0c7      	b.n	80009e4 <__aeabi_dadd+0x498>
 8000854:	1c6b      	adds	r3, r5, #1
 8000856:	055f      	lsls	r7, r3, #21
 8000858:	0d7f      	lsrs	r7, r7, #21
 800085a:	2f01      	cmp	r7, #1
 800085c:	dc00      	bgt.n	8000860 <__aeabi_dadd+0x314>
 800085e:	e0f1      	b.n	8000a44 <__aeabi_dadd+0x4f8>
 8000860:	4d39      	ldr	r5, [pc, #228]	; (8000948 <__aeabi_dadd+0x3fc>)
 8000862:	42ab      	cmp	r3, r5
 8000864:	d100      	bne.n	8000868 <__aeabi_dadd+0x31c>
 8000866:	e0b9      	b.n	80009dc <__aeabi_dadd+0x490>
 8000868:	1885      	adds	r5, r0, r2
 800086a:	000a      	movs	r2, r1
 800086c:	4285      	cmp	r5, r0
 800086e:	4189      	sbcs	r1, r1
 8000870:	4442      	add	r2, r8
 8000872:	4249      	negs	r1, r1
 8000874:	1851      	adds	r1, r2, r1
 8000876:	2207      	movs	r2, #7
 8000878:	07cf      	lsls	r7, r1, #31
 800087a:	086d      	lsrs	r5, r5, #1
 800087c:	432f      	orrs	r7, r5
 800087e:	0849      	lsrs	r1, r1, #1
 8000880:	403a      	ands	r2, r7
 8000882:	001d      	movs	r5, r3
 8000884:	e6c2      	b.n	800060c <__aeabi_dadd+0xc0>
 8000886:	2207      	movs	r2, #7
 8000888:	4930      	ldr	r1, [pc, #192]	; (800094c <__aeabi_dadd+0x400>)
 800088a:	1aed      	subs	r5, r5, r3
 800088c:	4031      	ands	r1, r6
 800088e:	403a      	ands	r2, r7
 8000890:	e6bc      	b.n	800060c <__aeabi_dadd+0xc0>
 8000892:	003e      	movs	r6, r7
 8000894:	3828      	subs	r0, #40	; 0x28
 8000896:	4086      	lsls	r6, r0
 8000898:	2700      	movs	r7, #0
 800089a:	e69f      	b.n	80005dc <__aeabi_dadd+0x90>
 800089c:	0038      	movs	r0, r7
 800089e:	f001 fcc9 	bl	8002234 <__clzsi2>
 80008a2:	3020      	adds	r0, #32
 80008a4:	e68e      	b.n	80005c4 <__aeabi_dadd+0x78>
 80008a6:	4643      	mov	r3, r8
 80008a8:	4313      	orrs	r3, r2
 80008aa:	001f      	movs	r7, r3
 80008ac:	1e7a      	subs	r2, r7, #1
 80008ae:	4197      	sbcs	r7, r2
 80008b0:	1bc7      	subs	r7, r0, r7
 80008b2:	42b8      	cmp	r0, r7
 80008b4:	4180      	sbcs	r0, r0
 80008b6:	4240      	negs	r0, r0
 80008b8:	1a09      	subs	r1, r1, r0
 80008ba:	e678      	b.n	80005ae <__aeabi_dadd+0x62>
 80008bc:	000e      	movs	r6, r1
 80008be:	003b      	movs	r3, r7
 80008c0:	4306      	orrs	r6, r0
 80008c2:	4313      	orrs	r3, r2
 80008c4:	2d00      	cmp	r5, #0
 80008c6:	d161      	bne.n	800098c <__aeabi_dadd+0x440>
 80008c8:	2e00      	cmp	r6, #0
 80008ca:	d000      	beq.n	80008ce <__aeabi_dadd+0x382>
 80008cc:	e0f4      	b.n	8000ab8 <__aeabi_dadd+0x56c>
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d100      	bne.n	80008d4 <__aeabi_dadd+0x388>
 80008d2:	e11b      	b.n	8000b0c <__aeabi_dadd+0x5c0>
 80008d4:	4664      	mov	r4, ip
 80008d6:	0039      	movs	r1, r7
 80008d8:	0010      	movs	r0, r2
 80008da:	e739      	b.n	8000750 <__aeabi_dadd+0x204>
 80008dc:	4f1a      	ldr	r7, [pc, #104]	; (8000948 <__aeabi_dadd+0x3fc>)
 80008de:	42bb      	cmp	r3, r7
 80008e0:	d07a      	beq.n	80009d8 <__aeabi_dadd+0x48c>
 80008e2:	0033      	movs	r3, r6
 80008e4:	e6ff      	b.n	80006e6 <__aeabi_dadd+0x19a>
 80008e6:	0030      	movs	r0, r6
 80008e8:	3d1f      	subs	r5, #31
 80008ea:	40e8      	lsrs	r0, r5
 80008ec:	2b20      	cmp	r3, #32
 80008ee:	d003      	beq.n	80008f8 <__aeabi_dadd+0x3ac>
 80008f0:	2140      	movs	r1, #64	; 0x40
 80008f2:	1acb      	subs	r3, r1, r3
 80008f4:	409e      	lsls	r6, r3
 80008f6:	4337      	orrs	r7, r6
 80008f8:	1e7b      	subs	r3, r7, #1
 80008fa:	419f      	sbcs	r7, r3
 80008fc:	2207      	movs	r2, #7
 80008fe:	4307      	orrs	r7, r0
 8000900:	403a      	ands	r2, r7
 8000902:	2100      	movs	r1, #0
 8000904:	2500      	movs	r5, #0
 8000906:	e789      	b.n	800081c <__aeabi_dadd+0x2d0>
 8000908:	1a17      	subs	r7, r2, r0
 800090a:	4643      	mov	r3, r8
 800090c:	42ba      	cmp	r2, r7
 800090e:	41b6      	sbcs	r6, r6
 8000910:	1a59      	subs	r1, r3, r1
 8000912:	4276      	negs	r6, r6
 8000914:	1b8e      	subs	r6, r1, r6
 8000916:	4664      	mov	r4, ip
 8000918:	e64e      	b.n	80005b8 <__aeabi_dadd+0x6c>
 800091a:	2b1f      	cmp	r3, #31
 800091c:	dd00      	ble.n	8000920 <__aeabi_dadd+0x3d4>
 800091e:	e0ad      	b.n	8000a7c <__aeabi_dadd+0x530>
 8000920:	2620      	movs	r6, #32
 8000922:	4647      	mov	r7, r8
 8000924:	1af6      	subs	r6, r6, r3
 8000926:	40b7      	lsls	r7, r6
 8000928:	46b9      	mov	r9, r7
 800092a:	0017      	movs	r7, r2
 800092c:	46b2      	mov	sl, r6
 800092e:	40df      	lsrs	r7, r3
 8000930:	464e      	mov	r6, r9
 8000932:	433e      	orrs	r6, r7
 8000934:	0037      	movs	r7, r6
 8000936:	4656      	mov	r6, sl
 8000938:	40b2      	lsls	r2, r6
 800093a:	1e56      	subs	r6, r2, #1
 800093c:	41b2      	sbcs	r2, r6
 800093e:	4317      	orrs	r7, r2
 8000940:	4642      	mov	r2, r8
 8000942:	40da      	lsrs	r2, r3
 8000944:	1889      	adds	r1, r1, r2
 8000946:	e6ae      	b.n	80006a6 <__aeabi_dadd+0x15a>
 8000948:	000007ff 	.word	0x000007ff
 800094c:	ff7fffff 	.word	0xff7fffff
 8000950:	800fffff 	.word	0x800fffff
 8000954:	2620      	movs	r6, #32
 8000956:	4647      	mov	r7, r8
 8000958:	1af6      	subs	r6, r6, r3
 800095a:	40b7      	lsls	r7, r6
 800095c:	46b9      	mov	r9, r7
 800095e:	0017      	movs	r7, r2
 8000960:	46b2      	mov	sl, r6
 8000962:	40df      	lsrs	r7, r3
 8000964:	464e      	mov	r6, r9
 8000966:	433e      	orrs	r6, r7
 8000968:	0037      	movs	r7, r6
 800096a:	4656      	mov	r6, sl
 800096c:	40b2      	lsls	r2, r6
 800096e:	1e56      	subs	r6, r2, #1
 8000970:	41b2      	sbcs	r2, r6
 8000972:	4317      	orrs	r7, r2
 8000974:	4642      	mov	r2, r8
 8000976:	40da      	lsrs	r2, r3
 8000978:	1a89      	subs	r1, r1, r2
 800097a:	e799      	b.n	80008b0 <__aeabi_dadd+0x364>
 800097c:	4c7f      	ldr	r4, [pc, #508]	; (8000b7c <__aeabi_dadd+0x630>)
 800097e:	42a6      	cmp	r6, r4
 8000980:	d05b      	beq.n	8000a3a <__aeabi_dadd+0x4ee>
 8000982:	2480      	movs	r4, #128	; 0x80
 8000984:	0424      	lsls	r4, r4, #16
 8000986:	425b      	negs	r3, r3
 8000988:	4321      	orrs	r1, r4
 800098a:	e727      	b.n	80007dc <__aeabi_dadd+0x290>
 800098c:	2e00      	cmp	r6, #0
 800098e:	d10c      	bne.n	80009aa <__aeabi_dadd+0x45e>
 8000990:	2b00      	cmp	r3, #0
 8000992:	d100      	bne.n	8000996 <__aeabi_dadd+0x44a>
 8000994:	e0cb      	b.n	8000b2e <__aeabi_dadd+0x5e2>
 8000996:	4664      	mov	r4, ip
 8000998:	0039      	movs	r1, r7
 800099a:	0010      	movs	r0, r2
 800099c:	4d77      	ldr	r5, [pc, #476]	; (8000b7c <__aeabi_dadd+0x630>)
 800099e:	e6d7      	b.n	8000750 <__aeabi_dadd+0x204>
 80009a0:	4f76      	ldr	r7, [pc, #472]	; (8000b7c <__aeabi_dadd+0x630>)
 80009a2:	42bb      	cmp	r3, r7
 80009a4:	d018      	beq.n	80009d8 <__aeabi_dadd+0x48c>
 80009a6:	0033      	movs	r3, r6
 80009a8:	e675      	b.n	8000696 <__aeabi_dadd+0x14a>
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d014      	beq.n	80009d8 <__aeabi_dadd+0x48c>
 80009ae:	074b      	lsls	r3, r1, #29
 80009b0:	08c0      	lsrs	r0, r0, #3
 80009b2:	4318      	orrs	r0, r3
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	08c9      	lsrs	r1, r1, #3
 80009b8:	031b      	lsls	r3, r3, #12
 80009ba:	4219      	tst	r1, r3
 80009bc:	d007      	beq.n	80009ce <__aeabi_dadd+0x482>
 80009be:	08fc      	lsrs	r4, r7, #3
 80009c0:	421c      	tst	r4, r3
 80009c2:	d104      	bne.n	80009ce <__aeabi_dadd+0x482>
 80009c4:	0779      	lsls	r1, r7, #29
 80009c6:	08d0      	lsrs	r0, r2, #3
 80009c8:	4308      	orrs	r0, r1
 80009ca:	46e1      	mov	r9, ip
 80009cc:	0021      	movs	r1, r4
 80009ce:	464c      	mov	r4, r9
 80009d0:	0f42      	lsrs	r2, r0, #29
 80009d2:	00c9      	lsls	r1, r1, #3
 80009d4:	4311      	orrs	r1, r2
 80009d6:	00c0      	lsls	r0, r0, #3
 80009d8:	4d68      	ldr	r5, [pc, #416]	; (8000b7c <__aeabi_dadd+0x630>)
 80009da:	e6b9      	b.n	8000750 <__aeabi_dadd+0x204>
 80009dc:	001d      	movs	r5, r3
 80009de:	2200      	movs	r2, #0
 80009e0:	2300      	movs	r3, #0
 80009e2:	e6c0      	b.n	8000766 <__aeabi_dadd+0x21a>
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	d15b      	bne.n	8000aa0 <__aeabi_dadd+0x554>
 80009e8:	000d      	movs	r5, r1
 80009ea:	4305      	orrs	r5, r0
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dadd+0x4a4>
 80009ee:	e6e2      	b.n	80007b6 <__aeabi_dadd+0x26a>
 80009f0:	1c5d      	adds	r5, r3, #1
 80009f2:	d100      	bne.n	80009f6 <__aeabi_dadd+0x4aa>
 80009f4:	e0b0      	b.n	8000b58 <__aeabi_dadd+0x60c>
 80009f6:	4d61      	ldr	r5, [pc, #388]	; (8000b7c <__aeabi_dadd+0x630>)
 80009f8:	42ae      	cmp	r6, r5
 80009fa:	d01f      	beq.n	8000a3c <__aeabi_dadd+0x4f0>
 80009fc:	43db      	mvns	r3, r3
 80009fe:	2b38      	cmp	r3, #56	; 0x38
 8000a00:	dc71      	bgt.n	8000ae6 <__aeabi_dadd+0x59a>
 8000a02:	2b1f      	cmp	r3, #31
 8000a04:	dd00      	ble.n	8000a08 <__aeabi_dadd+0x4bc>
 8000a06:	e096      	b.n	8000b36 <__aeabi_dadd+0x5ea>
 8000a08:	2520      	movs	r5, #32
 8000a0a:	000f      	movs	r7, r1
 8000a0c:	1aed      	subs	r5, r5, r3
 8000a0e:	40af      	lsls	r7, r5
 8000a10:	46b9      	mov	r9, r7
 8000a12:	0007      	movs	r7, r0
 8000a14:	46aa      	mov	sl, r5
 8000a16:	40df      	lsrs	r7, r3
 8000a18:	464d      	mov	r5, r9
 8000a1a:	433d      	orrs	r5, r7
 8000a1c:	002f      	movs	r7, r5
 8000a1e:	4655      	mov	r5, sl
 8000a20:	40a8      	lsls	r0, r5
 8000a22:	40d9      	lsrs	r1, r3
 8000a24:	1e45      	subs	r5, r0, #1
 8000a26:	41a8      	sbcs	r0, r5
 8000a28:	4488      	add	r8, r1
 8000a2a:	4307      	orrs	r7, r0
 8000a2c:	18bf      	adds	r7, r7, r2
 8000a2e:	4297      	cmp	r7, r2
 8000a30:	4192      	sbcs	r2, r2
 8000a32:	4251      	negs	r1, r2
 8000a34:	4441      	add	r1, r8
 8000a36:	0035      	movs	r5, r6
 8000a38:	e63a      	b.n	80006b0 <__aeabi_dadd+0x164>
 8000a3a:	4664      	mov	r4, ip
 8000a3c:	0035      	movs	r5, r6
 8000a3e:	4641      	mov	r1, r8
 8000a40:	0010      	movs	r0, r2
 8000a42:	e685      	b.n	8000750 <__aeabi_dadd+0x204>
 8000a44:	000b      	movs	r3, r1
 8000a46:	4303      	orrs	r3, r0
 8000a48:	2d00      	cmp	r5, #0
 8000a4a:	d000      	beq.n	8000a4e <__aeabi_dadd+0x502>
 8000a4c:	e663      	b.n	8000716 <__aeabi_dadd+0x1ca>
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d0f5      	beq.n	8000a3e <__aeabi_dadd+0x4f2>
 8000a52:	4643      	mov	r3, r8
 8000a54:	4313      	orrs	r3, r2
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dadd+0x50e>
 8000a58:	e67a      	b.n	8000750 <__aeabi_dadd+0x204>
 8000a5a:	1887      	adds	r7, r0, r2
 8000a5c:	4287      	cmp	r7, r0
 8000a5e:	4180      	sbcs	r0, r0
 8000a60:	2207      	movs	r2, #7
 8000a62:	4441      	add	r1, r8
 8000a64:	4240      	negs	r0, r0
 8000a66:	1809      	adds	r1, r1, r0
 8000a68:	403a      	ands	r2, r7
 8000a6a:	020b      	lsls	r3, r1, #8
 8000a6c:	d400      	bmi.n	8000a70 <__aeabi_dadd+0x524>
 8000a6e:	e6d5      	b.n	800081c <__aeabi_dadd+0x2d0>
 8000a70:	4b43      	ldr	r3, [pc, #268]	; (8000b80 <__aeabi_dadd+0x634>)
 8000a72:	3501      	adds	r5, #1
 8000a74:	4019      	ands	r1, r3
 8000a76:	e5c9      	b.n	800060c <__aeabi_dadd+0xc0>
 8000a78:	0038      	movs	r0, r7
 8000a7a:	e669      	b.n	8000750 <__aeabi_dadd+0x204>
 8000a7c:	001e      	movs	r6, r3
 8000a7e:	4647      	mov	r7, r8
 8000a80:	3e20      	subs	r6, #32
 8000a82:	40f7      	lsrs	r7, r6
 8000a84:	46bc      	mov	ip, r7
 8000a86:	2b20      	cmp	r3, #32
 8000a88:	d004      	beq.n	8000a94 <__aeabi_dadd+0x548>
 8000a8a:	2640      	movs	r6, #64	; 0x40
 8000a8c:	1af3      	subs	r3, r6, r3
 8000a8e:	4646      	mov	r6, r8
 8000a90:	409e      	lsls	r6, r3
 8000a92:	4332      	orrs	r2, r6
 8000a94:	0017      	movs	r7, r2
 8000a96:	4663      	mov	r3, ip
 8000a98:	1e7a      	subs	r2, r7, #1
 8000a9a:	4197      	sbcs	r7, r2
 8000a9c:	431f      	orrs	r7, r3
 8000a9e:	e602      	b.n	80006a6 <__aeabi_dadd+0x15a>
 8000aa0:	4d36      	ldr	r5, [pc, #216]	; (8000b7c <__aeabi_dadd+0x630>)
 8000aa2:	42ae      	cmp	r6, r5
 8000aa4:	d0ca      	beq.n	8000a3c <__aeabi_dadd+0x4f0>
 8000aa6:	2580      	movs	r5, #128	; 0x80
 8000aa8:	042d      	lsls	r5, r5, #16
 8000aaa:	425b      	negs	r3, r3
 8000aac:	4329      	orrs	r1, r5
 8000aae:	e7a6      	b.n	80009fe <__aeabi_dadd+0x4b2>
 8000ab0:	4308      	orrs	r0, r1
 8000ab2:	1e41      	subs	r1, r0, #1
 8000ab4:	4188      	sbcs	r0, r1
 8000ab6:	e6a6      	b.n	8000806 <__aeabi_dadd+0x2ba>
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dadd+0x572>
 8000abc:	e648      	b.n	8000750 <__aeabi_dadd+0x204>
 8000abe:	1a87      	subs	r7, r0, r2
 8000ac0:	4643      	mov	r3, r8
 8000ac2:	42b8      	cmp	r0, r7
 8000ac4:	41b6      	sbcs	r6, r6
 8000ac6:	1acb      	subs	r3, r1, r3
 8000ac8:	4276      	negs	r6, r6
 8000aca:	1b9e      	subs	r6, r3, r6
 8000acc:	0233      	lsls	r3, r6, #8
 8000ace:	d54b      	bpl.n	8000b68 <__aeabi_dadd+0x61c>
 8000ad0:	1a17      	subs	r7, r2, r0
 8000ad2:	4643      	mov	r3, r8
 8000ad4:	42ba      	cmp	r2, r7
 8000ad6:	4192      	sbcs	r2, r2
 8000ad8:	1a59      	subs	r1, r3, r1
 8000ada:	4252      	negs	r2, r2
 8000adc:	1a89      	subs	r1, r1, r2
 8000ade:	2207      	movs	r2, #7
 8000ae0:	4664      	mov	r4, ip
 8000ae2:	403a      	ands	r2, r7
 8000ae4:	e592      	b.n	800060c <__aeabi_dadd+0xc0>
 8000ae6:	4301      	orrs	r1, r0
 8000ae8:	000f      	movs	r7, r1
 8000aea:	1e79      	subs	r1, r7, #1
 8000aec:	418f      	sbcs	r7, r1
 8000aee:	e79d      	b.n	8000a2c <__aeabi_dadd+0x4e0>
 8000af0:	001c      	movs	r4, r3
 8000af2:	000f      	movs	r7, r1
 8000af4:	3c20      	subs	r4, #32
 8000af6:	40e7      	lsrs	r7, r4
 8000af8:	2b20      	cmp	r3, #32
 8000afa:	d003      	beq.n	8000b04 <__aeabi_dadd+0x5b8>
 8000afc:	2440      	movs	r4, #64	; 0x40
 8000afe:	1ae3      	subs	r3, r4, r3
 8000b00:	4099      	lsls	r1, r3
 8000b02:	4308      	orrs	r0, r1
 8000b04:	1e41      	subs	r1, r0, #1
 8000b06:	4188      	sbcs	r0, r1
 8000b08:	4338      	orrs	r0, r7
 8000b0a:	e67c      	b.n	8000806 <__aeabi_dadd+0x2ba>
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	2400      	movs	r4, #0
 8000b10:	e625      	b.n	800075e <__aeabi_dadd+0x212>
 8000b12:	1a17      	subs	r7, r2, r0
 8000b14:	4643      	mov	r3, r8
 8000b16:	42ba      	cmp	r2, r7
 8000b18:	4192      	sbcs	r2, r2
 8000b1a:	1a59      	subs	r1, r3, r1
 8000b1c:	4252      	negs	r2, r2
 8000b1e:	1a89      	subs	r1, r1, r2
 8000b20:	4664      	mov	r4, ip
 8000b22:	0035      	movs	r5, r6
 8000b24:	e543      	b.n	80005ae <__aeabi_dadd+0x62>
 8000b26:	4641      	mov	r1, r8
 8000b28:	0010      	movs	r0, r2
 8000b2a:	4d14      	ldr	r5, [pc, #80]	; (8000b7c <__aeabi_dadd+0x630>)
 8000b2c:	e610      	b.n	8000750 <__aeabi_dadd+0x204>
 8000b2e:	2280      	movs	r2, #128	; 0x80
 8000b30:	2400      	movs	r4, #0
 8000b32:	0312      	lsls	r2, r2, #12
 8000b34:	e680      	b.n	8000838 <__aeabi_dadd+0x2ec>
 8000b36:	001d      	movs	r5, r3
 8000b38:	000f      	movs	r7, r1
 8000b3a:	3d20      	subs	r5, #32
 8000b3c:	40ef      	lsrs	r7, r5
 8000b3e:	46bc      	mov	ip, r7
 8000b40:	2b20      	cmp	r3, #32
 8000b42:	d003      	beq.n	8000b4c <__aeabi_dadd+0x600>
 8000b44:	2540      	movs	r5, #64	; 0x40
 8000b46:	1aeb      	subs	r3, r5, r3
 8000b48:	4099      	lsls	r1, r3
 8000b4a:	4308      	orrs	r0, r1
 8000b4c:	0007      	movs	r7, r0
 8000b4e:	4663      	mov	r3, ip
 8000b50:	1e78      	subs	r0, r7, #1
 8000b52:	4187      	sbcs	r7, r0
 8000b54:	431f      	orrs	r7, r3
 8000b56:	e769      	b.n	8000a2c <__aeabi_dadd+0x4e0>
 8000b58:	1887      	adds	r7, r0, r2
 8000b5a:	4297      	cmp	r7, r2
 8000b5c:	419b      	sbcs	r3, r3
 8000b5e:	4441      	add	r1, r8
 8000b60:	425b      	negs	r3, r3
 8000b62:	18c9      	adds	r1, r1, r3
 8000b64:	0035      	movs	r5, r6
 8000b66:	e5a3      	b.n	80006b0 <__aeabi_dadd+0x164>
 8000b68:	003b      	movs	r3, r7
 8000b6a:	4333      	orrs	r3, r6
 8000b6c:	d0ce      	beq.n	8000b0c <__aeabi_dadd+0x5c0>
 8000b6e:	2207      	movs	r2, #7
 8000b70:	0031      	movs	r1, r6
 8000b72:	403a      	ands	r2, r7
 8000b74:	e652      	b.n	800081c <__aeabi_dadd+0x2d0>
 8000b76:	2300      	movs	r3, #0
 8000b78:	001a      	movs	r2, r3
 8000b7a:	e5f4      	b.n	8000766 <__aeabi_dadd+0x21a>
 8000b7c:	000007ff 	.word	0x000007ff
 8000b80:	ff7fffff 	.word	0xff7fffff

08000b84 <__aeabi_ddiv>:
 8000b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b86:	4657      	mov	r7, sl
 8000b88:	46de      	mov	lr, fp
 8000b8a:	464e      	mov	r6, r9
 8000b8c:	4645      	mov	r5, r8
 8000b8e:	b5e0      	push	{r5, r6, r7, lr}
 8000b90:	4683      	mov	fp, r0
 8000b92:	0007      	movs	r7, r0
 8000b94:	030e      	lsls	r6, r1, #12
 8000b96:	0048      	lsls	r0, r1, #1
 8000b98:	b085      	sub	sp, #20
 8000b9a:	4692      	mov	sl, r2
 8000b9c:	001c      	movs	r4, r3
 8000b9e:	0b36      	lsrs	r6, r6, #12
 8000ba0:	0d40      	lsrs	r0, r0, #21
 8000ba2:	0fcd      	lsrs	r5, r1, #31
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d100      	bne.n	8000baa <__aeabi_ddiv+0x26>
 8000ba8:	e09d      	b.n	8000ce6 <__aeabi_ddiv+0x162>
 8000baa:	4b95      	ldr	r3, [pc, #596]	; (8000e00 <__aeabi_ddiv+0x27c>)
 8000bac:	4298      	cmp	r0, r3
 8000bae:	d039      	beq.n	8000c24 <__aeabi_ddiv+0xa0>
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	00f6      	lsls	r6, r6, #3
 8000bb4:	041b      	lsls	r3, r3, #16
 8000bb6:	431e      	orrs	r6, r3
 8000bb8:	4a92      	ldr	r2, [pc, #584]	; (8000e04 <__aeabi_ddiv+0x280>)
 8000bba:	0f7b      	lsrs	r3, r7, #29
 8000bbc:	4333      	orrs	r3, r6
 8000bbe:	4699      	mov	r9, r3
 8000bc0:	4694      	mov	ip, r2
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	4463      	add	r3, ip
 8000bc6:	9300      	str	r3, [sp, #0]
 8000bc8:	2300      	movs	r3, #0
 8000bca:	2600      	movs	r6, #0
 8000bcc:	00ff      	lsls	r7, r7, #3
 8000bce:	9302      	str	r3, [sp, #8]
 8000bd0:	0323      	lsls	r3, r4, #12
 8000bd2:	0b1b      	lsrs	r3, r3, #12
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	0063      	lsls	r3, r4, #1
 8000bd8:	0fe4      	lsrs	r4, r4, #31
 8000bda:	4652      	mov	r2, sl
 8000bdc:	0d5b      	lsrs	r3, r3, #21
 8000bde:	9401      	str	r4, [sp, #4]
 8000be0:	d100      	bne.n	8000be4 <__aeabi_ddiv+0x60>
 8000be2:	e0b3      	b.n	8000d4c <__aeabi_ddiv+0x1c8>
 8000be4:	4986      	ldr	r1, [pc, #536]	; (8000e00 <__aeabi_ddiv+0x27c>)
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d100      	bne.n	8000bec <__aeabi_ddiv+0x68>
 8000bea:	e09e      	b.n	8000d2a <__aeabi_ddiv+0x1a6>
 8000bec:	4642      	mov	r2, r8
 8000bee:	00d1      	lsls	r1, r2, #3
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	0412      	lsls	r2, r2, #16
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	4651      	mov	r1, sl
 8000bf8:	0f49      	lsrs	r1, r1, #29
 8000bfa:	4311      	orrs	r1, r2
 8000bfc:	468b      	mov	fp, r1
 8000bfe:	4981      	ldr	r1, [pc, #516]	; (8000e04 <__aeabi_ddiv+0x280>)
 8000c00:	4652      	mov	r2, sl
 8000c02:	468c      	mov	ip, r1
 8000c04:	9900      	ldr	r1, [sp, #0]
 8000c06:	4463      	add	r3, ip
 8000c08:	1acb      	subs	r3, r1, r3
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	00d2      	lsls	r2, r2, #3
 8000c0e:	9300      	str	r3, [sp, #0]
 8000c10:	002b      	movs	r3, r5
 8000c12:	4063      	eors	r3, r4
 8000c14:	469a      	mov	sl, r3
 8000c16:	2e0f      	cmp	r6, #15
 8000c18:	d900      	bls.n	8000c1c <__aeabi_ddiv+0x98>
 8000c1a:	e105      	b.n	8000e28 <__aeabi_ddiv+0x2a4>
 8000c1c:	4b7a      	ldr	r3, [pc, #488]	; (8000e08 <__aeabi_ddiv+0x284>)
 8000c1e:	00b6      	lsls	r6, r6, #2
 8000c20:	599b      	ldr	r3, [r3, r6]
 8000c22:	469f      	mov	pc, r3
 8000c24:	465b      	mov	r3, fp
 8000c26:	4333      	orrs	r3, r6
 8000c28:	4699      	mov	r9, r3
 8000c2a:	d000      	beq.n	8000c2e <__aeabi_ddiv+0xaa>
 8000c2c:	e0b8      	b.n	8000da0 <__aeabi_ddiv+0x21c>
 8000c2e:	2302      	movs	r3, #2
 8000c30:	2608      	movs	r6, #8
 8000c32:	2700      	movs	r7, #0
 8000c34:	9000      	str	r0, [sp, #0]
 8000c36:	9302      	str	r3, [sp, #8]
 8000c38:	e7ca      	b.n	8000bd0 <__aeabi_ddiv+0x4c>
 8000c3a:	46cb      	mov	fp, r9
 8000c3c:	003a      	movs	r2, r7
 8000c3e:	9902      	ldr	r1, [sp, #8]
 8000c40:	9501      	str	r5, [sp, #4]
 8000c42:	9b01      	ldr	r3, [sp, #4]
 8000c44:	469a      	mov	sl, r3
 8000c46:	2902      	cmp	r1, #2
 8000c48:	d027      	beq.n	8000c9a <__aeabi_ddiv+0x116>
 8000c4a:	2903      	cmp	r1, #3
 8000c4c:	d100      	bne.n	8000c50 <__aeabi_ddiv+0xcc>
 8000c4e:	e280      	b.n	8001152 <__aeabi_ddiv+0x5ce>
 8000c50:	2901      	cmp	r1, #1
 8000c52:	d044      	beq.n	8000cde <__aeabi_ddiv+0x15a>
 8000c54:	496d      	ldr	r1, [pc, #436]	; (8000e0c <__aeabi_ddiv+0x288>)
 8000c56:	9b00      	ldr	r3, [sp, #0]
 8000c58:	468c      	mov	ip, r1
 8000c5a:	4463      	add	r3, ip
 8000c5c:	001c      	movs	r4, r3
 8000c5e:	2c00      	cmp	r4, #0
 8000c60:	dd38      	ble.n	8000cd4 <__aeabi_ddiv+0x150>
 8000c62:	0753      	lsls	r3, r2, #29
 8000c64:	d000      	beq.n	8000c68 <__aeabi_ddiv+0xe4>
 8000c66:	e213      	b.n	8001090 <__aeabi_ddiv+0x50c>
 8000c68:	08d2      	lsrs	r2, r2, #3
 8000c6a:	465b      	mov	r3, fp
 8000c6c:	01db      	lsls	r3, r3, #7
 8000c6e:	d509      	bpl.n	8000c84 <__aeabi_ddiv+0x100>
 8000c70:	4659      	mov	r1, fp
 8000c72:	4b67      	ldr	r3, [pc, #412]	; (8000e10 <__aeabi_ddiv+0x28c>)
 8000c74:	4019      	ands	r1, r3
 8000c76:	468b      	mov	fp, r1
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	00c9      	lsls	r1, r1, #3
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	9b00      	ldr	r3, [sp, #0]
 8000c80:	4463      	add	r3, ip
 8000c82:	001c      	movs	r4, r3
 8000c84:	4b63      	ldr	r3, [pc, #396]	; (8000e14 <__aeabi_ddiv+0x290>)
 8000c86:	429c      	cmp	r4, r3
 8000c88:	dc07      	bgt.n	8000c9a <__aeabi_ddiv+0x116>
 8000c8a:	465b      	mov	r3, fp
 8000c8c:	0564      	lsls	r4, r4, #21
 8000c8e:	075f      	lsls	r7, r3, #29
 8000c90:	025b      	lsls	r3, r3, #9
 8000c92:	4317      	orrs	r7, r2
 8000c94:	0b1b      	lsrs	r3, r3, #12
 8000c96:	0d62      	lsrs	r2, r4, #21
 8000c98:	e002      	b.n	8000ca0 <__aeabi_ddiv+0x11c>
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	2700      	movs	r7, #0
 8000c9e:	4a58      	ldr	r2, [pc, #352]	; (8000e00 <__aeabi_ddiv+0x27c>)
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	031b      	lsls	r3, r3, #12
 8000ca4:	0b1c      	lsrs	r4, r3, #12
 8000ca6:	0d0b      	lsrs	r3, r1, #20
 8000ca8:	051b      	lsls	r3, r3, #20
 8000caa:	4323      	orrs	r3, r4
 8000cac:	0514      	lsls	r4, r2, #20
 8000cae:	4a5a      	ldr	r2, [pc, #360]	; (8000e18 <__aeabi_ddiv+0x294>)
 8000cb0:	0038      	movs	r0, r7
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	4653      	mov	r3, sl
 8000cb8:	0064      	lsls	r4, r4, #1
 8000cba:	07db      	lsls	r3, r3, #31
 8000cbc:	0864      	lsrs	r4, r4, #1
 8000cbe:	431c      	orrs	r4, r3
 8000cc0:	0021      	movs	r1, r4
 8000cc2:	b005      	add	sp, #20
 8000cc4:	bc3c      	pop	{r2, r3, r4, r5}
 8000cc6:	4690      	mov	r8, r2
 8000cc8:	4699      	mov	r9, r3
 8000cca:	46a2      	mov	sl, r4
 8000ccc:	46ab      	mov	fp, r5
 8000cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4252      	negs	r2, r2
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	1b1b      	subs	r3, r3, r4
 8000cd8:	2b38      	cmp	r3, #56	; 0x38
 8000cda:	dc00      	bgt.n	8000cde <__aeabi_ddiv+0x15a>
 8000cdc:	e1ad      	b.n	800103a <__aeabi_ddiv+0x4b6>
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	2700      	movs	r7, #0
 8000ce4:	e7dc      	b.n	8000ca0 <__aeabi_ddiv+0x11c>
 8000ce6:	465b      	mov	r3, fp
 8000ce8:	4333      	orrs	r3, r6
 8000cea:	4699      	mov	r9, r3
 8000cec:	d05e      	beq.n	8000dac <__aeabi_ddiv+0x228>
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_ddiv+0x170>
 8000cf2:	e18a      	b.n	800100a <__aeabi_ddiv+0x486>
 8000cf4:	0030      	movs	r0, r6
 8000cf6:	f001 fa9d 	bl	8002234 <__clzsi2>
 8000cfa:	0003      	movs	r3, r0
 8000cfc:	3b0b      	subs	r3, #11
 8000cfe:	2b1c      	cmp	r3, #28
 8000d00:	dd00      	ble.n	8000d04 <__aeabi_ddiv+0x180>
 8000d02:	e17b      	b.n	8000ffc <__aeabi_ddiv+0x478>
 8000d04:	221d      	movs	r2, #29
 8000d06:	1ad3      	subs	r3, r2, r3
 8000d08:	465a      	mov	r2, fp
 8000d0a:	0001      	movs	r1, r0
 8000d0c:	40da      	lsrs	r2, r3
 8000d0e:	3908      	subs	r1, #8
 8000d10:	408e      	lsls	r6, r1
 8000d12:	0013      	movs	r3, r2
 8000d14:	465f      	mov	r7, fp
 8000d16:	4333      	orrs	r3, r6
 8000d18:	4699      	mov	r9, r3
 8000d1a:	408f      	lsls	r7, r1
 8000d1c:	4b3f      	ldr	r3, [pc, #252]	; (8000e1c <__aeabi_ddiv+0x298>)
 8000d1e:	2600      	movs	r6, #0
 8000d20:	1a1b      	subs	r3, r3, r0
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2300      	movs	r3, #0
 8000d26:	9302      	str	r3, [sp, #8]
 8000d28:	e752      	b.n	8000bd0 <__aeabi_ddiv+0x4c>
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	4653      	mov	r3, sl
 8000d2e:	430b      	orrs	r3, r1
 8000d30:	493b      	ldr	r1, [pc, #236]	; (8000e20 <__aeabi_ddiv+0x29c>)
 8000d32:	469b      	mov	fp, r3
 8000d34:	468c      	mov	ip, r1
 8000d36:	9b00      	ldr	r3, [sp, #0]
 8000d38:	4463      	add	r3, ip
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	465b      	mov	r3, fp
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d13b      	bne.n	8000dba <__aeabi_ddiv+0x236>
 8000d42:	2302      	movs	r3, #2
 8000d44:	2200      	movs	r2, #0
 8000d46:	431e      	orrs	r6, r3
 8000d48:	2102      	movs	r1, #2
 8000d4a:	e761      	b.n	8000c10 <__aeabi_ddiv+0x8c>
 8000d4c:	4643      	mov	r3, r8
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	469b      	mov	fp, r3
 8000d52:	d037      	beq.n	8000dc4 <__aeabi_ddiv+0x240>
 8000d54:	4643      	mov	r3, r8
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d100      	bne.n	8000d5c <__aeabi_ddiv+0x1d8>
 8000d5a:	e162      	b.n	8001022 <__aeabi_ddiv+0x49e>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	f001 fa69 	bl	8002234 <__clzsi2>
 8000d62:	0003      	movs	r3, r0
 8000d64:	3b0b      	subs	r3, #11
 8000d66:	2b1c      	cmp	r3, #28
 8000d68:	dd00      	ble.n	8000d6c <__aeabi_ddiv+0x1e8>
 8000d6a:	e153      	b.n	8001014 <__aeabi_ddiv+0x490>
 8000d6c:	0002      	movs	r2, r0
 8000d6e:	4641      	mov	r1, r8
 8000d70:	3a08      	subs	r2, #8
 8000d72:	4091      	lsls	r1, r2
 8000d74:	4688      	mov	r8, r1
 8000d76:	211d      	movs	r1, #29
 8000d78:	1acb      	subs	r3, r1, r3
 8000d7a:	4651      	mov	r1, sl
 8000d7c:	40d9      	lsrs	r1, r3
 8000d7e:	000b      	movs	r3, r1
 8000d80:	4641      	mov	r1, r8
 8000d82:	430b      	orrs	r3, r1
 8000d84:	469b      	mov	fp, r3
 8000d86:	4653      	mov	r3, sl
 8000d88:	4093      	lsls	r3, r2
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	9b00      	ldr	r3, [sp, #0]
 8000d8e:	4925      	ldr	r1, [pc, #148]	; (8000e24 <__aeabi_ddiv+0x2a0>)
 8000d90:	469c      	mov	ip, r3
 8000d92:	4460      	add	r0, ip
 8000d94:	0003      	movs	r3, r0
 8000d96:	468c      	mov	ip, r1
 8000d98:	4463      	add	r3, ip
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e737      	b.n	8000c10 <__aeabi_ddiv+0x8c>
 8000da0:	2303      	movs	r3, #3
 8000da2:	46b1      	mov	r9, r6
 8000da4:	9000      	str	r0, [sp, #0]
 8000da6:	260c      	movs	r6, #12
 8000da8:	9302      	str	r3, [sp, #8]
 8000daa:	e711      	b.n	8000bd0 <__aeabi_ddiv+0x4c>
 8000dac:	2300      	movs	r3, #0
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	3301      	adds	r3, #1
 8000db2:	2604      	movs	r6, #4
 8000db4:	2700      	movs	r7, #0
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	e70a      	b.n	8000bd0 <__aeabi_ddiv+0x4c>
 8000dba:	2303      	movs	r3, #3
 8000dbc:	46c3      	mov	fp, r8
 8000dbe:	431e      	orrs	r6, r3
 8000dc0:	2103      	movs	r1, #3
 8000dc2:	e725      	b.n	8000c10 <__aeabi_ddiv+0x8c>
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	431e      	orrs	r6, r3
 8000dc8:	2200      	movs	r2, #0
 8000dca:	2101      	movs	r1, #1
 8000dcc:	e720      	b.n	8000c10 <__aeabi_ddiv+0x8c>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	469a      	mov	sl, r3
 8000dd2:	2380      	movs	r3, #128	; 0x80
 8000dd4:	2700      	movs	r7, #0
 8000dd6:	031b      	lsls	r3, r3, #12
 8000dd8:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <__aeabi_ddiv+0x27c>)
 8000dda:	e761      	b.n	8000ca0 <__aeabi_ddiv+0x11c>
 8000ddc:	2380      	movs	r3, #128	; 0x80
 8000dde:	4649      	mov	r1, r9
 8000de0:	031b      	lsls	r3, r3, #12
 8000de2:	4219      	tst	r1, r3
 8000de4:	d100      	bne.n	8000de8 <__aeabi_ddiv+0x264>
 8000de6:	e0e2      	b.n	8000fae <__aeabi_ddiv+0x42a>
 8000de8:	4659      	mov	r1, fp
 8000dea:	4219      	tst	r1, r3
 8000dec:	d000      	beq.n	8000df0 <__aeabi_ddiv+0x26c>
 8000dee:	e0de      	b.n	8000fae <__aeabi_ddiv+0x42a>
 8000df0:	430b      	orrs	r3, r1
 8000df2:	031b      	lsls	r3, r3, #12
 8000df4:	0017      	movs	r7, r2
 8000df6:	0b1b      	lsrs	r3, r3, #12
 8000df8:	46a2      	mov	sl, r4
 8000dfa:	4a01      	ldr	r2, [pc, #4]	; (8000e00 <__aeabi_ddiv+0x27c>)
 8000dfc:	e750      	b.n	8000ca0 <__aeabi_ddiv+0x11c>
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	000007ff 	.word	0x000007ff
 8000e04:	fffffc01 	.word	0xfffffc01
 8000e08:	080088fc 	.word	0x080088fc
 8000e0c:	000003ff 	.word	0x000003ff
 8000e10:	feffffff 	.word	0xfeffffff
 8000e14:	000007fe 	.word	0x000007fe
 8000e18:	800fffff 	.word	0x800fffff
 8000e1c:	fffffc0d 	.word	0xfffffc0d
 8000e20:	fffff801 	.word	0xfffff801
 8000e24:	000003f3 	.word	0x000003f3
 8000e28:	45d9      	cmp	r9, fp
 8000e2a:	d900      	bls.n	8000e2e <__aeabi_ddiv+0x2aa>
 8000e2c:	e0cb      	b.n	8000fc6 <__aeabi_ddiv+0x442>
 8000e2e:	d100      	bne.n	8000e32 <__aeabi_ddiv+0x2ae>
 8000e30:	e0c6      	b.n	8000fc0 <__aeabi_ddiv+0x43c>
 8000e32:	003c      	movs	r4, r7
 8000e34:	4648      	mov	r0, r9
 8000e36:	2700      	movs	r7, #0
 8000e38:	9b00      	ldr	r3, [sp, #0]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	465b      	mov	r3, fp
 8000e40:	0e16      	lsrs	r6, r2, #24
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	431e      	orrs	r6, r3
 8000e46:	0213      	lsls	r3, r2, #8
 8000e48:	4698      	mov	r8, r3
 8000e4a:	0433      	lsls	r3, r6, #16
 8000e4c:	0c1b      	lsrs	r3, r3, #16
 8000e4e:	4699      	mov	r9, r3
 8000e50:	0c31      	lsrs	r1, r6, #16
 8000e52:	9101      	str	r1, [sp, #4]
 8000e54:	f7ff f9ee 	bl	8000234 <__aeabi_uidivmod>
 8000e58:	464a      	mov	r2, r9
 8000e5a:	4342      	muls	r2, r0
 8000e5c:	040b      	lsls	r3, r1, #16
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	0005      	movs	r5, r0
 8000e62:	4319      	orrs	r1, r3
 8000e64:	428a      	cmp	r2, r1
 8000e66:	d907      	bls.n	8000e78 <__aeabi_ddiv+0x2f4>
 8000e68:	1989      	adds	r1, r1, r6
 8000e6a:	3d01      	subs	r5, #1
 8000e6c:	428e      	cmp	r6, r1
 8000e6e:	d803      	bhi.n	8000e78 <__aeabi_ddiv+0x2f4>
 8000e70:	428a      	cmp	r2, r1
 8000e72:	d901      	bls.n	8000e78 <__aeabi_ddiv+0x2f4>
 8000e74:	1e85      	subs	r5, r0, #2
 8000e76:	1989      	adds	r1, r1, r6
 8000e78:	1a88      	subs	r0, r1, r2
 8000e7a:	9901      	ldr	r1, [sp, #4]
 8000e7c:	f7ff f9da 	bl	8000234 <__aeabi_uidivmod>
 8000e80:	0409      	lsls	r1, r1, #16
 8000e82:	468c      	mov	ip, r1
 8000e84:	464a      	mov	r2, r9
 8000e86:	0421      	lsls	r1, r4, #16
 8000e88:	4664      	mov	r4, ip
 8000e8a:	4342      	muls	r2, r0
 8000e8c:	0c09      	lsrs	r1, r1, #16
 8000e8e:	0003      	movs	r3, r0
 8000e90:	4321      	orrs	r1, r4
 8000e92:	428a      	cmp	r2, r1
 8000e94:	d904      	bls.n	8000ea0 <__aeabi_ddiv+0x31c>
 8000e96:	1989      	adds	r1, r1, r6
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	428e      	cmp	r6, r1
 8000e9c:	d800      	bhi.n	8000ea0 <__aeabi_ddiv+0x31c>
 8000e9e:	e0f1      	b.n	8001084 <__aeabi_ddiv+0x500>
 8000ea0:	042d      	lsls	r5, r5, #16
 8000ea2:	431d      	orrs	r5, r3
 8000ea4:	46ab      	mov	fp, r5
 8000ea6:	4643      	mov	r3, r8
 8000ea8:	1a89      	subs	r1, r1, r2
 8000eaa:	4642      	mov	r2, r8
 8000eac:	0c28      	lsrs	r0, r5, #16
 8000eae:	0412      	lsls	r2, r2, #16
 8000eb0:	0c1d      	lsrs	r5, r3, #16
 8000eb2:	465b      	mov	r3, fp
 8000eb4:	0c14      	lsrs	r4, r2, #16
 8000eb6:	0022      	movs	r2, r4
 8000eb8:	041b      	lsls	r3, r3, #16
 8000eba:	0c1b      	lsrs	r3, r3, #16
 8000ebc:	435a      	muls	r2, r3
 8000ebe:	9403      	str	r4, [sp, #12]
 8000ec0:	436b      	muls	r3, r5
 8000ec2:	4344      	muls	r4, r0
 8000ec4:	9502      	str	r5, [sp, #8]
 8000ec6:	4368      	muls	r0, r5
 8000ec8:	191b      	adds	r3, r3, r4
 8000eca:	0c15      	lsrs	r5, r2, #16
 8000ecc:	18eb      	adds	r3, r5, r3
 8000ece:	429c      	cmp	r4, r3
 8000ed0:	d903      	bls.n	8000eda <__aeabi_ddiv+0x356>
 8000ed2:	2480      	movs	r4, #128	; 0x80
 8000ed4:	0264      	lsls	r4, r4, #9
 8000ed6:	46a4      	mov	ip, r4
 8000ed8:	4460      	add	r0, ip
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	0415      	lsls	r5, r2, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	0c2d      	lsrs	r5, r5, #16
 8000ee2:	1820      	adds	r0, r4, r0
 8000ee4:	195d      	adds	r5, r3, r5
 8000ee6:	4281      	cmp	r1, r0
 8000ee8:	d377      	bcc.n	8000fda <__aeabi_ddiv+0x456>
 8000eea:	d073      	beq.n	8000fd4 <__aeabi_ddiv+0x450>
 8000eec:	1a0c      	subs	r4, r1, r0
 8000eee:	4aa2      	ldr	r2, [pc, #648]	; (8001178 <__aeabi_ddiv+0x5f4>)
 8000ef0:	1b7d      	subs	r5, r7, r5
 8000ef2:	42af      	cmp	r7, r5
 8000ef4:	41bf      	sbcs	r7, r7
 8000ef6:	4694      	mov	ip, r2
 8000ef8:	9b00      	ldr	r3, [sp, #0]
 8000efa:	427f      	negs	r7, r7
 8000efc:	4463      	add	r3, ip
 8000efe:	1be0      	subs	r0, r4, r7
 8000f00:	001c      	movs	r4, r3
 8000f02:	4286      	cmp	r6, r0
 8000f04:	d100      	bne.n	8000f08 <__aeabi_ddiv+0x384>
 8000f06:	e0db      	b.n	80010c0 <__aeabi_ddiv+0x53c>
 8000f08:	9901      	ldr	r1, [sp, #4]
 8000f0a:	f7ff f993 	bl	8000234 <__aeabi_uidivmod>
 8000f0e:	464a      	mov	r2, r9
 8000f10:	4342      	muls	r2, r0
 8000f12:	040b      	lsls	r3, r1, #16
 8000f14:	0c29      	lsrs	r1, r5, #16
 8000f16:	0007      	movs	r7, r0
 8000f18:	4319      	orrs	r1, r3
 8000f1a:	428a      	cmp	r2, r1
 8000f1c:	d907      	bls.n	8000f2e <__aeabi_ddiv+0x3aa>
 8000f1e:	1989      	adds	r1, r1, r6
 8000f20:	3f01      	subs	r7, #1
 8000f22:	428e      	cmp	r6, r1
 8000f24:	d803      	bhi.n	8000f2e <__aeabi_ddiv+0x3aa>
 8000f26:	428a      	cmp	r2, r1
 8000f28:	d901      	bls.n	8000f2e <__aeabi_ddiv+0x3aa>
 8000f2a:	1e87      	subs	r7, r0, #2
 8000f2c:	1989      	adds	r1, r1, r6
 8000f2e:	1a88      	subs	r0, r1, r2
 8000f30:	9901      	ldr	r1, [sp, #4]
 8000f32:	f7ff f97f 	bl	8000234 <__aeabi_uidivmod>
 8000f36:	0409      	lsls	r1, r1, #16
 8000f38:	464a      	mov	r2, r9
 8000f3a:	4689      	mov	r9, r1
 8000f3c:	0429      	lsls	r1, r5, #16
 8000f3e:	464d      	mov	r5, r9
 8000f40:	4342      	muls	r2, r0
 8000f42:	0c09      	lsrs	r1, r1, #16
 8000f44:	0003      	movs	r3, r0
 8000f46:	4329      	orrs	r1, r5
 8000f48:	428a      	cmp	r2, r1
 8000f4a:	d907      	bls.n	8000f5c <__aeabi_ddiv+0x3d8>
 8000f4c:	1989      	adds	r1, r1, r6
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	428e      	cmp	r6, r1
 8000f52:	d803      	bhi.n	8000f5c <__aeabi_ddiv+0x3d8>
 8000f54:	428a      	cmp	r2, r1
 8000f56:	d901      	bls.n	8000f5c <__aeabi_ddiv+0x3d8>
 8000f58:	1e83      	subs	r3, r0, #2
 8000f5a:	1989      	adds	r1, r1, r6
 8000f5c:	043f      	lsls	r7, r7, #16
 8000f5e:	1a89      	subs	r1, r1, r2
 8000f60:	003a      	movs	r2, r7
 8000f62:	9f03      	ldr	r7, [sp, #12]
 8000f64:	431a      	orrs	r2, r3
 8000f66:	0038      	movs	r0, r7
 8000f68:	0413      	lsls	r3, r2, #16
 8000f6a:	0c1b      	lsrs	r3, r3, #16
 8000f6c:	4358      	muls	r0, r3
 8000f6e:	4681      	mov	r9, r0
 8000f70:	9802      	ldr	r0, [sp, #8]
 8000f72:	0c15      	lsrs	r5, r2, #16
 8000f74:	436f      	muls	r7, r5
 8000f76:	4343      	muls	r3, r0
 8000f78:	4345      	muls	r5, r0
 8000f7a:	4648      	mov	r0, r9
 8000f7c:	0c00      	lsrs	r0, r0, #16
 8000f7e:	4684      	mov	ip, r0
 8000f80:	19db      	adds	r3, r3, r7
 8000f82:	4463      	add	r3, ip
 8000f84:	429f      	cmp	r7, r3
 8000f86:	d903      	bls.n	8000f90 <__aeabi_ddiv+0x40c>
 8000f88:	2080      	movs	r0, #128	; 0x80
 8000f8a:	0240      	lsls	r0, r0, #9
 8000f8c:	4684      	mov	ip, r0
 8000f8e:	4465      	add	r5, ip
 8000f90:	4648      	mov	r0, r9
 8000f92:	0c1f      	lsrs	r7, r3, #16
 8000f94:	0400      	lsls	r0, r0, #16
 8000f96:	041b      	lsls	r3, r3, #16
 8000f98:	0c00      	lsrs	r0, r0, #16
 8000f9a:	197d      	adds	r5, r7, r5
 8000f9c:	1818      	adds	r0, r3, r0
 8000f9e:	42a9      	cmp	r1, r5
 8000fa0:	d200      	bcs.n	8000fa4 <__aeabi_ddiv+0x420>
 8000fa2:	e084      	b.n	80010ae <__aeabi_ddiv+0x52a>
 8000fa4:	d100      	bne.n	8000fa8 <__aeabi_ddiv+0x424>
 8000fa6:	e07f      	b.n	80010a8 <__aeabi_ddiv+0x524>
 8000fa8:	2301      	movs	r3, #1
 8000faa:	431a      	orrs	r2, r3
 8000fac:	e657      	b.n	8000c5e <__aeabi_ddiv+0xda>
 8000fae:	2380      	movs	r3, #128	; 0x80
 8000fb0:	464a      	mov	r2, r9
 8000fb2:	031b      	lsls	r3, r3, #12
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	031b      	lsls	r3, r3, #12
 8000fb8:	0b1b      	lsrs	r3, r3, #12
 8000fba:	46aa      	mov	sl, r5
 8000fbc:	4a6f      	ldr	r2, [pc, #444]	; (800117c <__aeabi_ddiv+0x5f8>)
 8000fbe:	e66f      	b.n	8000ca0 <__aeabi_ddiv+0x11c>
 8000fc0:	42ba      	cmp	r2, r7
 8000fc2:	d900      	bls.n	8000fc6 <__aeabi_ddiv+0x442>
 8000fc4:	e735      	b.n	8000e32 <__aeabi_ddiv+0x2ae>
 8000fc6:	464b      	mov	r3, r9
 8000fc8:	07dc      	lsls	r4, r3, #31
 8000fca:	0858      	lsrs	r0, r3, #1
 8000fcc:	087b      	lsrs	r3, r7, #1
 8000fce:	431c      	orrs	r4, r3
 8000fd0:	07ff      	lsls	r7, r7, #31
 8000fd2:	e734      	b.n	8000e3e <__aeabi_ddiv+0x2ba>
 8000fd4:	2400      	movs	r4, #0
 8000fd6:	42af      	cmp	r7, r5
 8000fd8:	d289      	bcs.n	8000eee <__aeabi_ddiv+0x36a>
 8000fda:	4447      	add	r7, r8
 8000fdc:	4547      	cmp	r7, r8
 8000fde:	41a4      	sbcs	r4, r4
 8000fe0:	465b      	mov	r3, fp
 8000fe2:	4264      	negs	r4, r4
 8000fe4:	19a4      	adds	r4, r4, r6
 8000fe6:	1864      	adds	r4, r4, r1
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	42a6      	cmp	r6, r4
 8000fec:	d21e      	bcs.n	800102c <__aeabi_ddiv+0x4a8>
 8000fee:	42a0      	cmp	r0, r4
 8000ff0:	d86d      	bhi.n	80010ce <__aeabi_ddiv+0x54a>
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_ddiv+0x472>
 8000ff4:	e0b6      	b.n	8001164 <__aeabi_ddiv+0x5e0>
 8000ff6:	1a24      	subs	r4, r4, r0
 8000ff8:	469b      	mov	fp, r3
 8000ffa:	e778      	b.n	8000eee <__aeabi_ddiv+0x36a>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	465a      	mov	r2, fp
 8001000:	3b28      	subs	r3, #40	; 0x28
 8001002:	409a      	lsls	r2, r3
 8001004:	2700      	movs	r7, #0
 8001006:	4691      	mov	r9, r2
 8001008:	e688      	b.n	8000d1c <__aeabi_ddiv+0x198>
 800100a:	4658      	mov	r0, fp
 800100c:	f001 f912 	bl	8002234 <__clzsi2>
 8001010:	3020      	adds	r0, #32
 8001012:	e672      	b.n	8000cfa <__aeabi_ddiv+0x176>
 8001014:	0003      	movs	r3, r0
 8001016:	4652      	mov	r2, sl
 8001018:	3b28      	subs	r3, #40	; 0x28
 800101a:	409a      	lsls	r2, r3
 800101c:	4693      	mov	fp, r2
 800101e:	2200      	movs	r2, #0
 8001020:	e6b4      	b.n	8000d8c <__aeabi_ddiv+0x208>
 8001022:	4650      	mov	r0, sl
 8001024:	f001 f906 	bl	8002234 <__clzsi2>
 8001028:	3020      	adds	r0, #32
 800102a:	e69a      	b.n	8000d62 <__aeabi_ddiv+0x1de>
 800102c:	42a6      	cmp	r6, r4
 800102e:	d1e2      	bne.n	8000ff6 <__aeabi_ddiv+0x472>
 8001030:	45b8      	cmp	r8, r7
 8001032:	d9dc      	bls.n	8000fee <__aeabi_ddiv+0x46a>
 8001034:	1a34      	subs	r4, r6, r0
 8001036:	469b      	mov	fp, r3
 8001038:	e759      	b.n	8000eee <__aeabi_ddiv+0x36a>
 800103a:	2b1f      	cmp	r3, #31
 800103c:	dc65      	bgt.n	800110a <__aeabi_ddiv+0x586>
 800103e:	4c50      	ldr	r4, [pc, #320]	; (8001180 <__aeabi_ddiv+0x5fc>)
 8001040:	9900      	ldr	r1, [sp, #0]
 8001042:	46a4      	mov	ip, r4
 8001044:	465c      	mov	r4, fp
 8001046:	4461      	add	r1, ip
 8001048:	0008      	movs	r0, r1
 800104a:	408c      	lsls	r4, r1
 800104c:	0011      	movs	r1, r2
 800104e:	4082      	lsls	r2, r0
 8001050:	40d9      	lsrs	r1, r3
 8001052:	1e50      	subs	r0, r2, #1
 8001054:	4182      	sbcs	r2, r0
 8001056:	430c      	orrs	r4, r1
 8001058:	4314      	orrs	r4, r2
 800105a:	465a      	mov	r2, fp
 800105c:	40da      	lsrs	r2, r3
 800105e:	0013      	movs	r3, r2
 8001060:	0762      	lsls	r2, r4, #29
 8001062:	d009      	beq.n	8001078 <__aeabi_ddiv+0x4f4>
 8001064:	220f      	movs	r2, #15
 8001066:	4022      	ands	r2, r4
 8001068:	2a04      	cmp	r2, #4
 800106a:	d005      	beq.n	8001078 <__aeabi_ddiv+0x4f4>
 800106c:	0022      	movs	r2, r4
 800106e:	1d14      	adds	r4, r2, #4
 8001070:	4294      	cmp	r4, r2
 8001072:	4189      	sbcs	r1, r1
 8001074:	4249      	negs	r1, r1
 8001076:	185b      	adds	r3, r3, r1
 8001078:	021a      	lsls	r2, r3, #8
 800107a:	d562      	bpl.n	8001142 <__aeabi_ddiv+0x5be>
 800107c:	2201      	movs	r2, #1
 800107e:	2300      	movs	r3, #0
 8001080:	2700      	movs	r7, #0
 8001082:	e60d      	b.n	8000ca0 <__aeabi_ddiv+0x11c>
 8001084:	428a      	cmp	r2, r1
 8001086:	d800      	bhi.n	800108a <__aeabi_ddiv+0x506>
 8001088:	e70a      	b.n	8000ea0 <__aeabi_ddiv+0x31c>
 800108a:	1e83      	subs	r3, r0, #2
 800108c:	1989      	adds	r1, r1, r6
 800108e:	e707      	b.n	8000ea0 <__aeabi_ddiv+0x31c>
 8001090:	230f      	movs	r3, #15
 8001092:	4013      	ands	r3, r2
 8001094:	2b04      	cmp	r3, #4
 8001096:	d100      	bne.n	800109a <__aeabi_ddiv+0x516>
 8001098:	e5e6      	b.n	8000c68 <__aeabi_ddiv+0xe4>
 800109a:	1d17      	adds	r7, r2, #4
 800109c:	4297      	cmp	r7, r2
 800109e:	4192      	sbcs	r2, r2
 80010a0:	4253      	negs	r3, r2
 80010a2:	449b      	add	fp, r3
 80010a4:	08fa      	lsrs	r2, r7, #3
 80010a6:	e5e0      	b.n	8000c6a <__aeabi_ddiv+0xe6>
 80010a8:	2800      	cmp	r0, #0
 80010aa:	d100      	bne.n	80010ae <__aeabi_ddiv+0x52a>
 80010ac:	e5d7      	b.n	8000c5e <__aeabi_ddiv+0xda>
 80010ae:	1871      	adds	r1, r6, r1
 80010b0:	1e53      	subs	r3, r2, #1
 80010b2:	42b1      	cmp	r1, r6
 80010b4:	d327      	bcc.n	8001106 <__aeabi_ddiv+0x582>
 80010b6:	42a9      	cmp	r1, r5
 80010b8:	d315      	bcc.n	80010e6 <__aeabi_ddiv+0x562>
 80010ba:	d058      	beq.n	800116e <__aeabi_ddiv+0x5ea>
 80010bc:	001a      	movs	r2, r3
 80010be:	e773      	b.n	8000fa8 <__aeabi_ddiv+0x424>
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	dc00      	bgt.n	80010c6 <__aeabi_ddiv+0x542>
 80010c4:	e604      	b.n	8000cd0 <__aeabi_ddiv+0x14c>
 80010c6:	2301      	movs	r3, #1
 80010c8:	2200      	movs	r2, #0
 80010ca:	449b      	add	fp, r3
 80010cc:	e5cd      	b.n	8000c6a <__aeabi_ddiv+0xe6>
 80010ce:	2302      	movs	r3, #2
 80010d0:	4447      	add	r7, r8
 80010d2:	4547      	cmp	r7, r8
 80010d4:	4189      	sbcs	r1, r1
 80010d6:	425b      	negs	r3, r3
 80010d8:	469c      	mov	ip, r3
 80010da:	4249      	negs	r1, r1
 80010dc:	1989      	adds	r1, r1, r6
 80010de:	190c      	adds	r4, r1, r4
 80010e0:	44e3      	add	fp, ip
 80010e2:	1a24      	subs	r4, r4, r0
 80010e4:	e703      	b.n	8000eee <__aeabi_ddiv+0x36a>
 80010e6:	4643      	mov	r3, r8
 80010e8:	005f      	lsls	r7, r3, #1
 80010ea:	4547      	cmp	r7, r8
 80010ec:	419b      	sbcs	r3, r3
 80010ee:	46b8      	mov	r8, r7
 80010f0:	425b      	negs	r3, r3
 80010f2:	199e      	adds	r6, r3, r6
 80010f4:	3a02      	subs	r2, #2
 80010f6:	1989      	adds	r1, r1, r6
 80010f8:	42a9      	cmp	r1, r5
 80010fa:	d000      	beq.n	80010fe <__aeabi_ddiv+0x57a>
 80010fc:	e754      	b.n	8000fa8 <__aeabi_ddiv+0x424>
 80010fe:	4540      	cmp	r0, r8
 8001100:	d000      	beq.n	8001104 <__aeabi_ddiv+0x580>
 8001102:	e751      	b.n	8000fa8 <__aeabi_ddiv+0x424>
 8001104:	e5ab      	b.n	8000c5e <__aeabi_ddiv+0xda>
 8001106:	001a      	movs	r2, r3
 8001108:	e7f6      	b.n	80010f8 <__aeabi_ddiv+0x574>
 800110a:	211f      	movs	r1, #31
 800110c:	465f      	mov	r7, fp
 800110e:	4249      	negs	r1, r1
 8001110:	1b0c      	subs	r4, r1, r4
 8001112:	40e7      	lsrs	r7, r4
 8001114:	2b20      	cmp	r3, #32
 8001116:	d007      	beq.n	8001128 <__aeabi_ddiv+0x5a4>
 8001118:	491a      	ldr	r1, [pc, #104]	; (8001184 <__aeabi_ddiv+0x600>)
 800111a:	9b00      	ldr	r3, [sp, #0]
 800111c:	468c      	mov	ip, r1
 800111e:	4463      	add	r3, ip
 8001120:	0018      	movs	r0, r3
 8001122:	465b      	mov	r3, fp
 8001124:	4083      	lsls	r3, r0
 8001126:	431a      	orrs	r2, r3
 8001128:	1e50      	subs	r0, r2, #1
 800112a:	4182      	sbcs	r2, r0
 800112c:	433a      	orrs	r2, r7
 800112e:	2707      	movs	r7, #7
 8001130:	2300      	movs	r3, #0
 8001132:	4017      	ands	r7, r2
 8001134:	d009      	beq.n	800114a <__aeabi_ddiv+0x5c6>
 8001136:	210f      	movs	r1, #15
 8001138:	2300      	movs	r3, #0
 800113a:	4011      	ands	r1, r2
 800113c:	0014      	movs	r4, r2
 800113e:	2904      	cmp	r1, #4
 8001140:	d195      	bne.n	800106e <__aeabi_ddiv+0x4ea>
 8001142:	0022      	movs	r2, r4
 8001144:	075f      	lsls	r7, r3, #29
 8001146:	025b      	lsls	r3, r3, #9
 8001148:	0b1b      	lsrs	r3, r3, #12
 800114a:	08d2      	lsrs	r2, r2, #3
 800114c:	4317      	orrs	r7, r2
 800114e:	2200      	movs	r2, #0
 8001150:	e5a6      	b.n	8000ca0 <__aeabi_ddiv+0x11c>
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	4659      	mov	r1, fp
 8001156:	031b      	lsls	r3, r3, #12
 8001158:	430b      	orrs	r3, r1
 800115a:	031b      	lsls	r3, r3, #12
 800115c:	0017      	movs	r7, r2
 800115e:	0b1b      	lsrs	r3, r3, #12
 8001160:	4a06      	ldr	r2, [pc, #24]	; (800117c <__aeabi_ddiv+0x5f8>)
 8001162:	e59d      	b.n	8000ca0 <__aeabi_ddiv+0x11c>
 8001164:	42bd      	cmp	r5, r7
 8001166:	d8b2      	bhi.n	80010ce <__aeabi_ddiv+0x54a>
 8001168:	469b      	mov	fp, r3
 800116a:	2400      	movs	r4, #0
 800116c:	e6bf      	b.n	8000eee <__aeabi_ddiv+0x36a>
 800116e:	4580      	cmp	r8, r0
 8001170:	d3b9      	bcc.n	80010e6 <__aeabi_ddiv+0x562>
 8001172:	001a      	movs	r2, r3
 8001174:	e7c3      	b.n	80010fe <__aeabi_ddiv+0x57a>
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	000003ff 	.word	0x000003ff
 800117c:	000007ff 	.word	0x000007ff
 8001180:	0000041e 	.word	0x0000041e
 8001184:	0000043e 	.word	0x0000043e

08001188 <__eqdf2>:
 8001188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118a:	464f      	mov	r7, r9
 800118c:	4646      	mov	r6, r8
 800118e:	46d6      	mov	lr, sl
 8001190:	4684      	mov	ip, r0
 8001192:	b5c0      	push	{r6, r7, lr}
 8001194:	4680      	mov	r8, r0
 8001196:	4e19      	ldr	r6, [pc, #100]	; (80011fc <__eqdf2+0x74>)
 8001198:	0318      	lsls	r0, r3, #12
 800119a:	030f      	lsls	r7, r1, #12
 800119c:	004d      	lsls	r5, r1, #1
 800119e:	0b00      	lsrs	r0, r0, #12
 80011a0:	005c      	lsls	r4, r3, #1
 80011a2:	4682      	mov	sl, r0
 80011a4:	0b3f      	lsrs	r7, r7, #12
 80011a6:	0d6d      	lsrs	r5, r5, #21
 80011a8:	0fc9      	lsrs	r1, r1, #31
 80011aa:	4691      	mov	r9, r2
 80011ac:	0d64      	lsrs	r4, r4, #21
 80011ae:	0fdb      	lsrs	r3, r3, #31
 80011b0:	2001      	movs	r0, #1
 80011b2:	42b5      	cmp	r5, r6
 80011b4:	d00a      	beq.n	80011cc <__eqdf2+0x44>
 80011b6:	42b4      	cmp	r4, r6
 80011b8:	d003      	beq.n	80011c2 <__eqdf2+0x3a>
 80011ba:	42a5      	cmp	r5, r4
 80011bc:	d101      	bne.n	80011c2 <__eqdf2+0x3a>
 80011be:	4557      	cmp	r7, sl
 80011c0:	d00c      	beq.n	80011dc <__eqdf2+0x54>
 80011c2:	bc1c      	pop	{r2, r3, r4}
 80011c4:	4690      	mov	r8, r2
 80011c6:	4699      	mov	r9, r3
 80011c8:	46a2      	mov	sl, r4
 80011ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011cc:	4666      	mov	r6, ip
 80011ce:	433e      	orrs	r6, r7
 80011d0:	d1f7      	bne.n	80011c2 <__eqdf2+0x3a>
 80011d2:	42ac      	cmp	r4, r5
 80011d4:	d1f5      	bne.n	80011c2 <__eqdf2+0x3a>
 80011d6:	4654      	mov	r4, sl
 80011d8:	4314      	orrs	r4, r2
 80011da:	d1f2      	bne.n	80011c2 <__eqdf2+0x3a>
 80011dc:	2001      	movs	r0, #1
 80011de:	45c8      	cmp	r8, r9
 80011e0:	d1ef      	bne.n	80011c2 <__eqdf2+0x3a>
 80011e2:	4299      	cmp	r1, r3
 80011e4:	d007      	beq.n	80011f6 <__eqdf2+0x6e>
 80011e6:	2d00      	cmp	r5, #0
 80011e8:	d1eb      	bne.n	80011c2 <__eqdf2+0x3a>
 80011ea:	4663      	mov	r3, ip
 80011ec:	431f      	orrs	r7, r3
 80011ee:	0038      	movs	r0, r7
 80011f0:	1e47      	subs	r7, r0, #1
 80011f2:	41b8      	sbcs	r0, r7
 80011f4:	e7e5      	b.n	80011c2 <__eqdf2+0x3a>
 80011f6:	2000      	movs	r0, #0
 80011f8:	e7e3      	b.n	80011c2 <__eqdf2+0x3a>
 80011fa:	46c0      	nop			; (mov r8, r8)
 80011fc:	000007ff 	.word	0x000007ff

08001200 <__gedf2>:
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	464f      	mov	r7, r9
 8001204:	4646      	mov	r6, r8
 8001206:	46d6      	mov	lr, sl
 8001208:	004d      	lsls	r5, r1, #1
 800120a:	b5c0      	push	{r6, r7, lr}
 800120c:	030e      	lsls	r6, r1, #12
 800120e:	0fc9      	lsrs	r1, r1, #31
 8001210:	468a      	mov	sl, r1
 8001212:	492c      	ldr	r1, [pc, #176]	; (80012c4 <__gedf2+0xc4>)
 8001214:	031f      	lsls	r7, r3, #12
 8001216:	005c      	lsls	r4, r3, #1
 8001218:	4680      	mov	r8, r0
 800121a:	0b36      	lsrs	r6, r6, #12
 800121c:	0d6d      	lsrs	r5, r5, #21
 800121e:	4691      	mov	r9, r2
 8001220:	0b3f      	lsrs	r7, r7, #12
 8001222:	0d64      	lsrs	r4, r4, #21
 8001224:	0fdb      	lsrs	r3, r3, #31
 8001226:	428d      	cmp	r5, r1
 8001228:	d01e      	beq.n	8001268 <__gedf2+0x68>
 800122a:	428c      	cmp	r4, r1
 800122c:	d016      	beq.n	800125c <__gedf2+0x5c>
 800122e:	2d00      	cmp	r5, #0
 8001230:	d11e      	bne.n	8001270 <__gedf2+0x70>
 8001232:	4330      	orrs	r0, r6
 8001234:	4684      	mov	ip, r0
 8001236:	2c00      	cmp	r4, #0
 8001238:	d101      	bne.n	800123e <__gedf2+0x3e>
 800123a:	433a      	orrs	r2, r7
 800123c:	d023      	beq.n	8001286 <__gedf2+0x86>
 800123e:	4662      	mov	r2, ip
 8001240:	2a00      	cmp	r2, #0
 8001242:	d01a      	beq.n	800127a <__gedf2+0x7a>
 8001244:	459a      	cmp	sl, r3
 8001246:	d029      	beq.n	800129c <__gedf2+0x9c>
 8001248:	4651      	mov	r1, sl
 800124a:	2002      	movs	r0, #2
 800124c:	3901      	subs	r1, #1
 800124e:	4008      	ands	r0, r1
 8001250:	3801      	subs	r0, #1
 8001252:	bc1c      	pop	{r2, r3, r4}
 8001254:	4690      	mov	r8, r2
 8001256:	4699      	mov	r9, r3
 8001258:	46a2      	mov	sl, r4
 800125a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125c:	0039      	movs	r1, r7
 800125e:	4311      	orrs	r1, r2
 8001260:	d0e5      	beq.n	800122e <__gedf2+0x2e>
 8001262:	2002      	movs	r0, #2
 8001264:	4240      	negs	r0, r0
 8001266:	e7f4      	b.n	8001252 <__gedf2+0x52>
 8001268:	4330      	orrs	r0, r6
 800126a:	d1fa      	bne.n	8001262 <__gedf2+0x62>
 800126c:	42ac      	cmp	r4, r5
 800126e:	d00f      	beq.n	8001290 <__gedf2+0x90>
 8001270:	2c00      	cmp	r4, #0
 8001272:	d10f      	bne.n	8001294 <__gedf2+0x94>
 8001274:	433a      	orrs	r2, r7
 8001276:	d0e7      	beq.n	8001248 <__gedf2+0x48>
 8001278:	e00c      	b.n	8001294 <__gedf2+0x94>
 800127a:	2201      	movs	r2, #1
 800127c:	3b01      	subs	r3, #1
 800127e:	4393      	bics	r3, r2
 8001280:	0018      	movs	r0, r3
 8001282:	3001      	adds	r0, #1
 8001284:	e7e5      	b.n	8001252 <__gedf2+0x52>
 8001286:	4663      	mov	r3, ip
 8001288:	2000      	movs	r0, #0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0e1      	beq.n	8001252 <__gedf2+0x52>
 800128e:	e7db      	b.n	8001248 <__gedf2+0x48>
 8001290:	433a      	orrs	r2, r7
 8001292:	d1e6      	bne.n	8001262 <__gedf2+0x62>
 8001294:	459a      	cmp	sl, r3
 8001296:	d1d7      	bne.n	8001248 <__gedf2+0x48>
 8001298:	42a5      	cmp	r5, r4
 800129a:	dcd5      	bgt.n	8001248 <__gedf2+0x48>
 800129c:	42a5      	cmp	r5, r4
 800129e:	db05      	blt.n	80012ac <__gedf2+0xac>
 80012a0:	42be      	cmp	r6, r7
 80012a2:	d8d1      	bhi.n	8001248 <__gedf2+0x48>
 80012a4:	d008      	beq.n	80012b8 <__gedf2+0xb8>
 80012a6:	2000      	movs	r0, #0
 80012a8:	42be      	cmp	r6, r7
 80012aa:	d2d2      	bcs.n	8001252 <__gedf2+0x52>
 80012ac:	4650      	mov	r0, sl
 80012ae:	2301      	movs	r3, #1
 80012b0:	3801      	subs	r0, #1
 80012b2:	4398      	bics	r0, r3
 80012b4:	3001      	adds	r0, #1
 80012b6:	e7cc      	b.n	8001252 <__gedf2+0x52>
 80012b8:	45c8      	cmp	r8, r9
 80012ba:	d8c5      	bhi.n	8001248 <__gedf2+0x48>
 80012bc:	2000      	movs	r0, #0
 80012be:	45c8      	cmp	r8, r9
 80012c0:	d3f4      	bcc.n	80012ac <__gedf2+0xac>
 80012c2:	e7c6      	b.n	8001252 <__gedf2+0x52>
 80012c4:	000007ff 	.word	0x000007ff

080012c8 <__ledf2>:
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	464f      	mov	r7, r9
 80012cc:	4646      	mov	r6, r8
 80012ce:	46d6      	mov	lr, sl
 80012d0:	004d      	lsls	r5, r1, #1
 80012d2:	b5c0      	push	{r6, r7, lr}
 80012d4:	030e      	lsls	r6, r1, #12
 80012d6:	0fc9      	lsrs	r1, r1, #31
 80012d8:	468a      	mov	sl, r1
 80012da:	492e      	ldr	r1, [pc, #184]	; (8001394 <__ledf2+0xcc>)
 80012dc:	031f      	lsls	r7, r3, #12
 80012de:	005c      	lsls	r4, r3, #1
 80012e0:	4680      	mov	r8, r0
 80012e2:	0b36      	lsrs	r6, r6, #12
 80012e4:	0d6d      	lsrs	r5, r5, #21
 80012e6:	4691      	mov	r9, r2
 80012e8:	0b3f      	lsrs	r7, r7, #12
 80012ea:	0d64      	lsrs	r4, r4, #21
 80012ec:	0fdb      	lsrs	r3, r3, #31
 80012ee:	428d      	cmp	r5, r1
 80012f0:	d018      	beq.n	8001324 <__ledf2+0x5c>
 80012f2:	428c      	cmp	r4, r1
 80012f4:	d011      	beq.n	800131a <__ledf2+0x52>
 80012f6:	2d00      	cmp	r5, #0
 80012f8:	d118      	bne.n	800132c <__ledf2+0x64>
 80012fa:	4330      	orrs	r0, r6
 80012fc:	4684      	mov	ip, r0
 80012fe:	2c00      	cmp	r4, #0
 8001300:	d11e      	bne.n	8001340 <__ledf2+0x78>
 8001302:	433a      	orrs	r2, r7
 8001304:	d11c      	bne.n	8001340 <__ledf2+0x78>
 8001306:	4663      	mov	r3, ip
 8001308:	2000      	movs	r0, #0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d030      	beq.n	8001370 <__ledf2+0xa8>
 800130e:	4651      	mov	r1, sl
 8001310:	2002      	movs	r0, #2
 8001312:	3901      	subs	r1, #1
 8001314:	4008      	ands	r0, r1
 8001316:	3801      	subs	r0, #1
 8001318:	e02a      	b.n	8001370 <__ledf2+0xa8>
 800131a:	0039      	movs	r1, r7
 800131c:	4311      	orrs	r1, r2
 800131e:	d0ea      	beq.n	80012f6 <__ledf2+0x2e>
 8001320:	2002      	movs	r0, #2
 8001322:	e025      	b.n	8001370 <__ledf2+0xa8>
 8001324:	4330      	orrs	r0, r6
 8001326:	d1fb      	bne.n	8001320 <__ledf2+0x58>
 8001328:	42ac      	cmp	r4, r5
 800132a:	d026      	beq.n	800137a <__ledf2+0xb2>
 800132c:	2c00      	cmp	r4, #0
 800132e:	d126      	bne.n	800137e <__ledf2+0xb6>
 8001330:	433a      	orrs	r2, r7
 8001332:	d124      	bne.n	800137e <__ledf2+0xb6>
 8001334:	4651      	mov	r1, sl
 8001336:	2002      	movs	r0, #2
 8001338:	3901      	subs	r1, #1
 800133a:	4008      	ands	r0, r1
 800133c:	3801      	subs	r0, #1
 800133e:	e017      	b.n	8001370 <__ledf2+0xa8>
 8001340:	4662      	mov	r2, ip
 8001342:	2a00      	cmp	r2, #0
 8001344:	d00f      	beq.n	8001366 <__ledf2+0x9e>
 8001346:	459a      	cmp	sl, r3
 8001348:	d1e1      	bne.n	800130e <__ledf2+0x46>
 800134a:	42a5      	cmp	r5, r4
 800134c:	db05      	blt.n	800135a <__ledf2+0x92>
 800134e:	42be      	cmp	r6, r7
 8001350:	d8dd      	bhi.n	800130e <__ledf2+0x46>
 8001352:	d019      	beq.n	8001388 <__ledf2+0xc0>
 8001354:	2000      	movs	r0, #0
 8001356:	42be      	cmp	r6, r7
 8001358:	d20a      	bcs.n	8001370 <__ledf2+0xa8>
 800135a:	4650      	mov	r0, sl
 800135c:	2301      	movs	r3, #1
 800135e:	3801      	subs	r0, #1
 8001360:	4398      	bics	r0, r3
 8001362:	3001      	adds	r0, #1
 8001364:	e004      	b.n	8001370 <__ledf2+0xa8>
 8001366:	2201      	movs	r2, #1
 8001368:	3b01      	subs	r3, #1
 800136a:	4393      	bics	r3, r2
 800136c:	0018      	movs	r0, r3
 800136e:	3001      	adds	r0, #1
 8001370:	bc1c      	pop	{r2, r3, r4}
 8001372:	4690      	mov	r8, r2
 8001374:	4699      	mov	r9, r3
 8001376:	46a2      	mov	sl, r4
 8001378:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800137a:	433a      	orrs	r2, r7
 800137c:	d1d0      	bne.n	8001320 <__ledf2+0x58>
 800137e:	459a      	cmp	sl, r3
 8001380:	d1c5      	bne.n	800130e <__ledf2+0x46>
 8001382:	42a5      	cmp	r5, r4
 8001384:	dcc3      	bgt.n	800130e <__ledf2+0x46>
 8001386:	e7e0      	b.n	800134a <__ledf2+0x82>
 8001388:	45c8      	cmp	r8, r9
 800138a:	d8c0      	bhi.n	800130e <__ledf2+0x46>
 800138c:	2000      	movs	r0, #0
 800138e:	45c8      	cmp	r8, r9
 8001390:	d3e3      	bcc.n	800135a <__ledf2+0x92>
 8001392:	e7ed      	b.n	8001370 <__ledf2+0xa8>
 8001394:	000007ff 	.word	0x000007ff

08001398 <__aeabi_dmul>:
 8001398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800139a:	4657      	mov	r7, sl
 800139c:	46de      	mov	lr, fp
 800139e:	464e      	mov	r6, r9
 80013a0:	4645      	mov	r5, r8
 80013a2:	b5e0      	push	{r5, r6, r7, lr}
 80013a4:	4683      	mov	fp, r0
 80013a6:	0006      	movs	r6, r0
 80013a8:	030f      	lsls	r7, r1, #12
 80013aa:	0048      	lsls	r0, r1, #1
 80013ac:	b087      	sub	sp, #28
 80013ae:	4692      	mov	sl, r2
 80013b0:	001d      	movs	r5, r3
 80013b2:	0b3f      	lsrs	r7, r7, #12
 80013b4:	0d40      	lsrs	r0, r0, #21
 80013b6:	0fcc      	lsrs	r4, r1, #31
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d100      	bne.n	80013be <__aeabi_dmul+0x26>
 80013bc:	e06f      	b.n	800149e <__aeabi_dmul+0x106>
 80013be:	4bde      	ldr	r3, [pc, #888]	; (8001738 <__aeabi_dmul+0x3a0>)
 80013c0:	4298      	cmp	r0, r3
 80013c2:	d038      	beq.n	8001436 <__aeabi_dmul+0x9e>
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	00ff      	lsls	r7, r7, #3
 80013c8:	041b      	lsls	r3, r3, #16
 80013ca:	431f      	orrs	r7, r3
 80013cc:	0f73      	lsrs	r3, r6, #29
 80013ce:	433b      	orrs	r3, r7
 80013d0:	9301      	str	r3, [sp, #4]
 80013d2:	4bda      	ldr	r3, [pc, #872]	; (800173c <__aeabi_dmul+0x3a4>)
 80013d4:	2700      	movs	r7, #0
 80013d6:	4699      	mov	r9, r3
 80013d8:	2300      	movs	r3, #0
 80013da:	469b      	mov	fp, r3
 80013dc:	00f6      	lsls	r6, r6, #3
 80013de:	4481      	add	r9, r0
 80013e0:	032b      	lsls	r3, r5, #12
 80013e2:	0069      	lsls	r1, r5, #1
 80013e4:	0b1b      	lsrs	r3, r3, #12
 80013e6:	4652      	mov	r2, sl
 80013e8:	4698      	mov	r8, r3
 80013ea:	0d49      	lsrs	r1, r1, #21
 80013ec:	0fed      	lsrs	r5, r5, #31
 80013ee:	2900      	cmp	r1, #0
 80013f0:	d100      	bne.n	80013f4 <__aeabi_dmul+0x5c>
 80013f2:	e085      	b.n	8001500 <__aeabi_dmul+0x168>
 80013f4:	4bd0      	ldr	r3, [pc, #832]	; (8001738 <__aeabi_dmul+0x3a0>)
 80013f6:	4299      	cmp	r1, r3
 80013f8:	d100      	bne.n	80013fc <__aeabi_dmul+0x64>
 80013fa:	e073      	b.n	80014e4 <__aeabi_dmul+0x14c>
 80013fc:	4643      	mov	r3, r8
 80013fe:	00da      	lsls	r2, r3, #3
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	041b      	lsls	r3, r3, #16
 8001404:	4313      	orrs	r3, r2
 8001406:	4652      	mov	r2, sl
 8001408:	48cc      	ldr	r0, [pc, #816]	; (800173c <__aeabi_dmul+0x3a4>)
 800140a:	0f52      	lsrs	r2, r2, #29
 800140c:	4684      	mov	ip, r0
 800140e:	4313      	orrs	r3, r2
 8001410:	4652      	mov	r2, sl
 8001412:	2000      	movs	r0, #0
 8001414:	4461      	add	r1, ip
 8001416:	00d2      	lsls	r2, r2, #3
 8001418:	4489      	add	r9, r1
 800141a:	0021      	movs	r1, r4
 800141c:	4069      	eors	r1, r5
 800141e:	9100      	str	r1, [sp, #0]
 8001420:	468c      	mov	ip, r1
 8001422:	2101      	movs	r1, #1
 8001424:	4449      	add	r1, r9
 8001426:	468a      	mov	sl, r1
 8001428:	2f0f      	cmp	r7, #15
 800142a:	d900      	bls.n	800142e <__aeabi_dmul+0x96>
 800142c:	e090      	b.n	8001550 <__aeabi_dmul+0x1b8>
 800142e:	49c4      	ldr	r1, [pc, #784]	; (8001740 <__aeabi_dmul+0x3a8>)
 8001430:	00bf      	lsls	r7, r7, #2
 8001432:	59cf      	ldr	r7, [r1, r7]
 8001434:	46bf      	mov	pc, r7
 8001436:	465b      	mov	r3, fp
 8001438:	433b      	orrs	r3, r7
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	d000      	beq.n	8001440 <__aeabi_dmul+0xa8>
 800143e:	e16a      	b.n	8001716 <__aeabi_dmul+0x37e>
 8001440:	2302      	movs	r3, #2
 8001442:	2708      	movs	r7, #8
 8001444:	2600      	movs	r6, #0
 8001446:	4681      	mov	r9, r0
 8001448:	469b      	mov	fp, r3
 800144a:	e7c9      	b.n	80013e0 <__aeabi_dmul+0x48>
 800144c:	0032      	movs	r2, r6
 800144e:	4658      	mov	r0, fp
 8001450:	9b01      	ldr	r3, [sp, #4]
 8001452:	4661      	mov	r1, ip
 8001454:	9100      	str	r1, [sp, #0]
 8001456:	2802      	cmp	r0, #2
 8001458:	d100      	bne.n	800145c <__aeabi_dmul+0xc4>
 800145a:	e075      	b.n	8001548 <__aeabi_dmul+0x1b0>
 800145c:	2803      	cmp	r0, #3
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0xca>
 8001460:	e1fe      	b.n	8001860 <__aeabi_dmul+0x4c8>
 8001462:	2801      	cmp	r0, #1
 8001464:	d000      	beq.n	8001468 <__aeabi_dmul+0xd0>
 8001466:	e12c      	b.n	80016c2 <__aeabi_dmul+0x32a>
 8001468:	2300      	movs	r3, #0
 800146a:	2700      	movs	r7, #0
 800146c:	2600      	movs	r6, #0
 800146e:	2500      	movs	r5, #0
 8001470:	033f      	lsls	r7, r7, #12
 8001472:	0d2a      	lsrs	r2, r5, #20
 8001474:	0b3f      	lsrs	r7, r7, #12
 8001476:	48b3      	ldr	r0, [pc, #716]	; (8001744 <__aeabi_dmul+0x3ac>)
 8001478:	0512      	lsls	r2, r2, #20
 800147a:	433a      	orrs	r2, r7
 800147c:	4002      	ands	r2, r0
 800147e:	051b      	lsls	r3, r3, #20
 8001480:	4313      	orrs	r3, r2
 8001482:	9a00      	ldr	r2, [sp, #0]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	07d1      	lsls	r1, r2, #31
 8001488:	085b      	lsrs	r3, r3, #1
 800148a:	430b      	orrs	r3, r1
 800148c:	0030      	movs	r0, r6
 800148e:	0019      	movs	r1, r3
 8001490:	b007      	add	sp, #28
 8001492:	bc3c      	pop	{r2, r3, r4, r5}
 8001494:	4690      	mov	r8, r2
 8001496:	4699      	mov	r9, r3
 8001498:	46a2      	mov	sl, r4
 800149a:	46ab      	mov	fp, r5
 800149c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800149e:	465b      	mov	r3, fp
 80014a0:	433b      	orrs	r3, r7
 80014a2:	9301      	str	r3, [sp, #4]
 80014a4:	d100      	bne.n	80014a8 <__aeabi_dmul+0x110>
 80014a6:	e12f      	b.n	8001708 <__aeabi_dmul+0x370>
 80014a8:	2f00      	cmp	r7, #0
 80014aa:	d100      	bne.n	80014ae <__aeabi_dmul+0x116>
 80014ac:	e1a5      	b.n	80017fa <__aeabi_dmul+0x462>
 80014ae:	0038      	movs	r0, r7
 80014b0:	f000 fec0 	bl	8002234 <__clzsi2>
 80014b4:	0003      	movs	r3, r0
 80014b6:	3b0b      	subs	r3, #11
 80014b8:	2b1c      	cmp	r3, #28
 80014ba:	dd00      	ble.n	80014be <__aeabi_dmul+0x126>
 80014bc:	e196      	b.n	80017ec <__aeabi_dmul+0x454>
 80014be:	221d      	movs	r2, #29
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	465a      	mov	r2, fp
 80014c4:	0001      	movs	r1, r0
 80014c6:	40da      	lsrs	r2, r3
 80014c8:	465e      	mov	r6, fp
 80014ca:	3908      	subs	r1, #8
 80014cc:	408f      	lsls	r7, r1
 80014ce:	0013      	movs	r3, r2
 80014d0:	408e      	lsls	r6, r1
 80014d2:	433b      	orrs	r3, r7
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	4b9c      	ldr	r3, [pc, #624]	; (8001748 <__aeabi_dmul+0x3b0>)
 80014d8:	2700      	movs	r7, #0
 80014da:	1a1b      	subs	r3, r3, r0
 80014dc:	4699      	mov	r9, r3
 80014de:	2300      	movs	r3, #0
 80014e0:	469b      	mov	fp, r3
 80014e2:	e77d      	b.n	80013e0 <__aeabi_dmul+0x48>
 80014e4:	4641      	mov	r1, r8
 80014e6:	4653      	mov	r3, sl
 80014e8:	430b      	orrs	r3, r1
 80014ea:	4993      	ldr	r1, [pc, #588]	; (8001738 <__aeabi_dmul+0x3a0>)
 80014ec:	468c      	mov	ip, r1
 80014ee:	44e1      	add	r9, ip
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d000      	beq.n	80014f6 <__aeabi_dmul+0x15e>
 80014f4:	e11a      	b.n	800172c <__aeabi_dmul+0x394>
 80014f6:	2202      	movs	r2, #2
 80014f8:	2002      	movs	r0, #2
 80014fa:	4317      	orrs	r7, r2
 80014fc:	2200      	movs	r2, #0
 80014fe:	e78c      	b.n	800141a <__aeabi_dmul+0x82>
 8001500:	4313      	orrs	r3, r2
 8001502:	d100      	bne.n	8001506 <__aeabi_dmul+0x16e>
 8001504:	e10d      	b.n	8001722 <__aeabi_dmul+0x38a>
 8001506:	4643      	mov	r3, r8
 8001508:	2b00      	cmp	r3, #0
 800150a:	d100      	bne.n	800150e <__aeabi_dmul+0x176>
 800150c:	e181      	b.n	8001812 <__aeabi_dmul+0x47a>
 800150e:	4640      	mov	r0, r8
 8001510:	f000 fe90 	bl	8002234 <__clzsi2>
 8001514:	0002      	movs	r2, r0
 8001516:	3a0b      	subs	r2, #11
 8001518:	2a1c      	cmp	r2, #28
 800151a:	dd00      	ble.n	800151e <__aeabi_dmul+0x186>
 800151c:	e172      	b.n	8001804 <__aeabi_dmul+0x46c>
 800151e:	0001      	movs	r1, r0
 8001520:	4643      	mov	r3, r8
 8001522:	3908      	subs	r1, #8
 8001524:	408b      	lsls	r3, r1
 8001526:	4698      	mov	r8, r3
 8001528:	231d      	movs	r3, #29
 800152a:	1a9a      	subs	r2, r3, r2
 800152c:	4653      	mov	r3, sl
 800152e:	40d3      	lsrs	r3, r2
 8001530:	001a      	movs	r2, r3
 8001532:	4643      	mov	r3, r8
 8001534:	4313      	orrs	r3, r2
 8001536:	4652      	mov	r2, sl
 8001538:	408a      	lsls	r2, r1
 800153a:	4649      	mov	r1, r9
 800153c:	1a08      	subs	r0, r1, r0
 800153e:	4982      	ldr	r1, [pc, #520]	; (8001748 <__aeabi_dmul+0x3b0>)
 8001540:	4689      	mov	r9, r1
 8001542:	4481      	add	r9, r0
 8001544:	2000      	movs	r0, #0
 8001546:	e768      	b.n	800141a <__aeabi_dmul+0x82>
 8001548:	4b7b      	ldr	r3, [pc, #492]	; (8001738 <__aeabi_dmul+0x3a0>)
 800154a:	2700      	movs	r7, #0
 800154c:	2600      	movs	r6, #0
 800154e:	e78e      	b.n	800146e <__aeabi_dmul+0xd6>
 8001550:	0c14      	lsrs	r4, r2, #16
 8001552:	0412      	lsls	r2, r2, #16
 8001554:	0c12      	lsrs	r2, r2, #16
 8001556:	0011      	movs	r1, r2
 8001558:	0c37      	lsrs	r7, r6, #16
 800155a:	0436      	lsls	r6, r6, #16
 800155c:	0c35      	lsrs	r5, r6, #16
 800155e:	4379      	muls	r1, r7
 8001560:	0028      	movs	r0, r5
 8001562:	468c      	mov	ip, r1
 8001564:	002e      	movs	r6, r5
 8001566:	4360      	muls	r0, r4
 8001568:	4460      	add	r0, ip
 800156a:	4683      	mov	fp, r0
 800156c:	4356      	muls	r6, r2
 800156e:	0021      	movs	r1, r4
 8001570:	0c30      	lsrs	r0, r6, #16
 8001572:	4680      	mov	r8, r0
 8001574:	4658      	mov	r0, fp
 8001576:	4379      	muls	r1, r7
 8001578:	4440      	add	r0, r8
 800157a:	9102      	str	r1, [sp, #8]
 800157c:	4584      	cmp	ip, r0
 800157e:	d906      	bls.n	800158e <__aeabi_dmul+0x1f6>
 8001580:	4688      	mov	r8, r1
 8001582:	2180      	movs	r1, #128	; 0x80
 8001584:	0249      	lsls	r1, r1, #9
 8001586:	468c      	mov	ip, r1
 8001588:	44e0      	add	r8, ip
 800158a:	4641      	mov	r1, r8
 800158c:	9102      	str	r1, [sp, #8]
 800158e:	0436      	lsls	r6, r6, #16
 8001590:	0c01      	lsrs	r1, r0, #16
 8001592:	0c36      	lsrs	r6, r6, #16
 8001594:	0400      	lsls	r0, r0, #16
 8001596:	468b      	mov	fp, r1
 8001598:	1981      	adds	r1, r0, r6
 800159a:	0c1e      	lsrs	r6, r3, #16
 800159c:	041b      	lsls	r3, r3, #16
 800159e:	0c1b      	lsrs	r3, r3, #16
 80015a0:	9103      	str	r1, [sp, #12]
 80015a2:	0019      	movs	r1, r3
 80015a4:	4379      	muls	r1, r7
 80015a6:	468c      	mov	ip, r1
 80015a8:	0028      	movs	r0, r5
 80015aa:	4375      	muls	r5, r6
 80015ac:	4465      	add	r5, ip
 80015ae:	46a8      	mov	r8, r5
 80015b0:	4358      	muls	r0, r3
 80015b2:	0c05      	lsrs	r5, r0, #16
 80015b4:	4445      	add	r5, r8
 80015b6:	4377      	muls	r7, r6
 80015b8:	42a9      	cmp	r1, r5
 80015ba:	d903      	bls.n	80015c4 <__aeabi_dmul+0x22c>
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	0249      	lsls	r1, r1, #9
 80015c0:	468c      	mov	ip, r1
 80015c2:	4467      	add	r7, ip
 80015c4:	0c29      	lsrs	r1, r5, #16
 80015c6:	468c      	mov	ip, r1
 80015c8:	0039      	movs	r1, r7
 80015ca:	0400      	lsls	r0, r0, #16
 80015cc:	0c00      	lsrs	r0, r0, #16
 80015ce:	042d      	lsls	r5, r5, #16
 80015d0:	182d      	adds	r5, r5, r0
 80015d2:	4461      	add	r1, ip
 80015d4:	44ab      	add	fp, r5
 80015d6:	9105      	str	r1, [sp, #20]
 80015d8:	4659      	mov	r1, fp
 80015da:	9104      	str	r1, [sp, #16]
 80015dc:	9901      	ldr	r1, [sp, #4]
 80015de:	040f      	lsls	r7, r1, #16
 80015e0:	0c3f      	lsrs	r7, r7, #16
 80015e2:	0c08      	lsrs	r0, r1, #16
 80015e4:	0039      	movs	r1, r7
 80015e6:	4351      	muls	r1, r2
 80015e8:	4342      	muls	r2, r0
 80015ea:	4690      	mov	r8, r2
 80015ec:	0002      	movs	r2, r0
 80015ee:	468c      	mov	ip, r1
 80015f0:	0c09      	lsrs	r1, r1, #16
 80015f2:	468b      	mov	fp, r1
 80015f4:	4362      	muls	r2, r4
 80015f6:	437c      	muls	r4, r7
 80015f8:	4444      	add	r4, r8
 80015fa:	445c      	add	r4, fp
 80015fc:	45a0      	cmp	r8, r4
 80015fe:	d903      	bls.n	8001608 <__aeabi_dmul+0x270>
 8001600:	2180      	movs	r1, #128	; 0x80
 8001602:	0249      	lsls	r1, r1, #9
 8001604:	4688      	mov	r8, r1
 8001606:	4442      	add	r2, r8
 8001608:	0c21      	lsrs	r1, r4, #16
 800160a:	4688      	mov	r8, r1
 800160c:	4661      	mov	r1, ip
 800160e:	0409      	lsls	r1, r1, #16
 8001610:	0c09      	lsrs	r1, r1, #16
 8001612:	468c      	mov	ip, r1
 8001614:	0039      	movs	r1, r7
 8001616:	4359      	muls	r1, r3
 8001618:	4343      	muls	r3, r0
 800161a:	4370      	muls	r0, r6
 800161c:	437e      	muls	r6, r7
 800161e:	0c0f      	lsrs	r7, r1, #16
 8001620:	18f6      	adds	r6, r6, r3
 8001622:	0424      	lsls	r4, r4, #16
 8001624:	19be      	adds	r6, r7, r6
 8001626:	4464      	add	r4, ip
 8001628:	4442      	add	r2, r8
 800162a:	468c      	mov	ip, r1
 800162c:	42b3      	cmp	r3, r6
 800162e:	d903      	bls.n	8001638 <__aeabi_dmul+0x2a0>
 8001630:	2380      	movs	r3, #128	; 0x80
 8001632:	025b      	lsls	r3, r3, #9
 8001634:	4698      	mov	r8, r3
 8001636:	4440      	add	r0, r8
 8001638:	9b02      	ldr	r3, [sp, #8]
 800163a:	4661      	mov	r1, ip
 800163c:	4698      	mov	r8, r3
 800163e:	9b04      	ldr	r3, [sp, #16]
 8001640:	0437      	lsls	r7, r6, #16
 8001642:	4443      	add	r3, r8
 8001644:	469b      	mov	fp, r3
 8001646:	45ab      	cmp	fp, r5
 8001648:	41ad      	sbcs	r5, r5
 800164a:	426b      	negs	r3, r5
 800164c:	040d      	lsls	r5, r1, #16
 800164e:	9905      	ldr	r1, [sp, #20]
 8001650:	0c2d      	lsrs	r5, r5, #16
 8001652:	468c      	mov	ip, r1
 8001654:	197f      	adds	r7, r7, r5
 8001656:	4467      	add	r7, ip
 8001658:	18fd      	adds	r5, r7, r3
 800165a:	46a8      	mov	r8, r5
 800165c:	465d      	mov	r5, fp
 800165e:	192d      	adds	r5, r5, r4
 8001660:	42a5      	cmp	r5, r4
 8001662:	41a4      	sbcs	r4, r4
 8001664:	4693      	mov	fp, r2
 8001666:	4264      	negs	r4, r4
 8001668:	46a4      	mov	ip, r4
 800166a:	44c3      	add	fp, r8
 800166c:	44dc      	add	ip, fp
 800166e:	428f      	cmp	r7, r1
 8001670:	41bf      	sbcs	r7, r7
 8001672:	4598      	cmp	r8, r3
 8001674:	419b      	sbcs	r3, r3
 8001676:	4593      	cmp	fp, r2
 8001678:	4192      	sbcs	r2, r2
 800167a:	45a4      	cmp	ip, r4
 800167c:	41a4      	sbcs	r4, r4
 800167e:	425b      	negs	r3, r3
 8001680:	427f      	negs	r7, r7
 8001682:	431f      	orrs	r7, r3
 8001684:	0c36      	lsrs	r6, r6, #16
 8001686:	4252      	negs	r2, r2
 8001688:	4264      	negs	r4, r4
 800168a:	19bf      	adds	r7, r7, r6
 800168c:	4322      	orrs	r2, r4
 800168e:	18bf      	adds	r7, r7, r2
 8001690:	4662      	mov	r2, ip
 8001692:	1838      	adds	r0, r7, r0
 8001694:	0243      	lsls	r3, r0, #9
 8001696:	0dd2      	lsrs	r2, r2, #23
 8001698:	9903      	ldr	r1, [sp, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	026a      	lsls	r2, r5, #9
 800169e:	430a      	orrs	r2, r1
 80016a0:	1e50      	subs	r0, r2, #1
 80016a2:	4182      	sbcs	r2, r0
 80016a4:	4661      	mov	r1, ip
 80016a6:	0ded      	lsrs	r5, r5, #23
 80016a8:	432a      	orrs	r2, r5
 80016aa:	024e      	lsls	r6, r1, #9
 80016ac:	4332      	orrs	r2, r6
 80016ae:	01d9      	lsls	r1, r3, #7
 80016b0:	d400      	bmi.n	80016b4 <__aeabi_dmul+0x31c>
 80016b2:	e0b3      	b.n	800181c <__aeabi_dmul+0x484>
 80016b4:	2601      	movs	r6, #1
 80016b6:	0850      	lsrs	r0, r2, #1
 80016b8:	4032      	ands	r2, r6
 80016ba:	4302      	orrs	r2, r0
 80016bc:	07de      	lsls	r6, r3, #31
 80016be:	4332      	orrs	r2, r6
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	4c22      	ldr	r4, [pc, #136]	; (800174c <__aeabi_dmul+0x3b4>)
 80016c4:	4454      	add	r4, sl
 80016c6:	2c00      	cmp	r4, #0
 80016c8:	dd62      	ble.n	8001790 <__aeabi_dmul+0x3f8>
 80016ca:	0751      	lsls	r1, r2, #29
 80016cc:	d009      	beq.n	80016e2 <__aeabi_dmul+0x34a>
 80016ce:	200f      	movs	r0, #15
 80016d0:	4010      	ands	r0, r2
 80016d2:	2804      	cmp	r0, #4
 80016d4:	d005      	beq.n	80016e2 <__aeabi_dmul+0x34a>
 80016d6:	1d10      	adds	r0, r2, #4
 80016d8:	4290      	cmp	r0, r2
 80016da:	4192      	sbcs	r2, r2
 80016dc:	4252      	negs	r2, r2
 80016de:	189b      	adds	r3, r3, r2
 80016e0:	0002      	movs	r2, r0
 80016e2:	01d9      	lsls	r1, r3, #7
 80016e4:	d504      	bpl.n	80016f0 <__aeabi_dmul+0x358>
 80016e6:	2480      	movs	r4, #128	; 0x80
 80016e8:	4819      	ldr	r0, [pc, #100]	; (8001750 <__aeabi_dmul+0x3b8>)
 80016ea:	00e4      	lsls	r4, r4, #3
 80016ec:	4003      	ands	r3, r0
 80016ee:	4454      	add	r4, sl
 80016f0:	4818      	ldr	r0, [pc, #96]	; (8001754 <__aeabi_dmul+0x3bc>)
 80016f2:	4284      	cmp	r4, r0
 80016f4:	dd00      	ble.n	80016f8 <__aeabi_dmul+0x360>
 80016f6:	e727      	b.n	8001548 <__aeabi_dmul+0x1b0>
 80016f8:	075e      	lsls	r6, r3, #29
 80016fa:	025b      	lsls	r3, r3, #9
 80016fc:	08d2      	lsrs	r2, r2, #3
 80016fe:	0b1f      	lsrs	r7, r3, #12
 8001700:	0563      	lsls	r3, r4, #21
 8001702:	4316      	orrs	r6, r2
 8001704:	0d5b      	lsrs	r3, r3, #21
 8001706:	e6b2      	b.n	800146e <__aeabi_dmul+0xd6>
 8001708:	2300      	movs	r3, #0
 800170a:	4699      	mov	r9, r3
 800170c:	3301      	adds	r3, #1
 800170e:	2704      	movs	r7, #4
 8001710:	2600      	movs	r6, #0
 8001712:	469b      	mov	fp, r3
 8001714:	e664      	b.n	80013e0 <__aeabi_dmul+0x48>
 8001716:	2303      	movs	r3, #3
 8001718:	9701      	str	r7, [sp, #4]
 800171a:	4681      	mov	r9, r0
 800171c:	270c      	movs	r7, #12
 800171e:	469b      	mov	fp, r3
 8001720:	e65e      	b.n	80013e0 <__aeabi_dmul+0x48>
 8001722:	2201      	movs	r2, #1
 8001724:	2001      	movs	r0, #1
 8001726:	4317      	orrs	r7, r2
 8001728:	2200      	movs	r2, #0
 800172a:	e676      	b.n	800141a <__aeabi_dmul+0x82>
 800172c:	2303      	movs	r3, #3
 800172e:	2003      	movs	r0, #3
 8001730:	431f      	orrs	r7, r3
 8001732:	4643      	mov	r3, r8
 8001734:	e671      	b.n	800141a <__aeabi_dmul+0x82>
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	000007ff 	.word	0x000007ff
 800173c:	fffffc01 	.word	0xfffffc01
 8001740:	0800893c 	.word	0x0800893c
 8001744:	800fffff 	.word	0x800fffff
 8001748:	fffffc0d 	.word	0xfffffc0d
 800174c:	000003ff 	.word	0x000003ff
 8001750:	feffffff 	.word	0xfeffffff
 8001754:	000007fe 	.word	0x000007fe
 8001758:	2300      	movs	r3, #0
 800175a:	2780      	movs	r7, #128	; 0x80
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	033f      	lsls	r7, r7, #12
 8001760:	2600      	movs	r6, #0
 8001762:	4b43      	ldr	r3, [pc, #268]	; (8001870 <__aeabi_dmul+0x4d8>)
 8001764:	e683      	b.n	800146e <__aeabi_dmul+0xd6>
 8001766:	9b01      	ldr	r3, [sp, #4]
 8001768:	0032      	movs	r2, r6
 800176a:	46a4      	mov	ip, r4
 800176c:	4658      	mov	r0, fp
 800176e:	e670      	b.n	8001452 <__aeabi_dmul+0xba>
 8001770:	46ac      	mov	ip, r5
 8001772:	e66e      	b.n	8001452 <__aeabi_dmul+0xba>
 8001774:	2780      	movs	r7, #128	; 0x80
 8001776:	9901      	ldr	r1, [sp, #4]
 8001778:	033f      	lsls	r7, r7, #12
 800177a:	4239      	tst	r1, r7
 800177c:	d02d      	beq.n	80017da <__aeabi_dmul+0x442>
 800177e:	423b      	tst	r3, r7
 8001780:	d12b      	bne.n	80017da <__aeabi_dmul+0x442>
 8001782:	431f      	orrs	r7, r3
 8001784:	033f      	lsls	r7, r7, #12
 8001786:	0b3f      	lsrs	r7, r7, #12
 8001788:	9500      	str	r5, [sp, #0]
 800178a:	0016      	movs	r6, r2
 800178c:	4b38      	ldr	r3, [pc, #224]	; (8001870 <__aeabi_dmul+0x4d8>)
 800178e:	e66e      	b.n	800146e <__aeabi_dmul+0xd6>
 8001790:	2501      	movs	r5, #1
 8001792:	1b2d      	subs	r5, r5, r4
 8001794:	2d38      	cmp	r5, #56	; 0x38
 8001796:	dd00      	ble.n	800179a <__aeabi_dmul+0x402>
 8001798:	e666      	b.n	8001468 <__aeabi_dmul+0xd0>
 800179a:	2d1f      	cmp	r5, #31
 800179c:	dc40      	bgt.n	8001820 <__aeabi_dmul+0x488>
 800179e:	4835      	ldr	r0, [pc, #212]	; (8001874 <__aeabi_dmul+0x4dc>)
 80017a0:	001c      	movs	r4, r3
 80017a2:	4450      	add	r0, sl
 80017a4:	0016      	movs	r6, r2
 80017a6:	4082      	lsls	r2, r0
 80017a8:	4084      	lsls	r4, r0
 80017aa:	40ee      	lsrs	r6, r5
 80017ac:	1e50      	subs	r0, r2, #1
 80017ae:	4182      	sbcs	r2, r0
 80017b0:	4334      	orrs	r4, r6
 80017b2:	4314      	orrs	r4, r2
 80017b4:	40eb      	lsrs	r3, r5
 80017b6:	0762      	lsls	r2, r4, #29
 80017b8:	d009      	beq.n	80017ce <__aeabi_dmul+0x436>
 80017ba:	220f      	movs	r2, #15
 80017bc:	4022      	ands	r2, r4
 80017be:	2a04      	cmp	r2, #4
 80017c0:	d005      	beq.n	80017ce <__aeabi_dmul+0x436>
 80017c2:	0022      	movs	r2, r4
 80017c4:	1d14      	adds	r4, r2, #4
 80017c6:	4294      	cmp	r4, r2
 80017c8:	4180      	sbcs	r0, r0
 80017ca:	4240      	negs	r0, r0
 80017cc:	181b      	adds	r3, r3, r0
 80017ce:	021a      	lsls	r2, r3, #8
 80017d0:	d53e      	bpl.n	8001850 <__aeabi_dmul+0x4b8>
 80017d2:	2301      	movs	r3, #1
 80017d4:	2700      	movs	r7, #0
 80017d6:	2600      	movs	r6, #0
 80017d8:	e649      	b.n	800146e <__aeabi_dmul+0xd6>
 80017da:	2780      	movs	r7, #128	; 0x80
 80017dc:	9b01      	ldr	r3, [sp, #4]
 80017de:	033f      	lsls	r7, r7, #12
 80017e0:	431f      	orrs	r7, r3
 80017e2:	033f      	lsls	r7, r7, #12
 80017e4:	0b3f      	lsrs	r7, r7, #12
 80017e6:	9400      	str	r4, [sp, #0]
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <__aeabi_dmul+0x4d8>)
 80017ea:	e640      	b.n	800146e <__aeabi_dmul+0xd6>
 80017ec:	0003      	movs	r3, r0
 80017ee:	465a      	mov	r2, fp
 80017f0:	3b28      	subs	r3, #40	; 0x28
 80017f2:	409a      	lsls	r2, r3
 80017f4:	2600      	movs	r6, #0
 80017f6:	9201      	str	r2, [sp, #4]
 80017f8:	e66d      	b.n	80014d6 <__aeabi_dmul+0x13e>
 80017fa:	4658      	mov	r0, fp
 80017fc:	f000 fd1a 	bl	8002234 <__clzsi2>
 8001800:	3020      	adds	r0, #32
 8001802:	e657      	b.n	80014b4 <__aeabi_dmul+0x11c>
 8001804:	0003      	movs	r3, r0
 8001806:	4652      	mov	r2, sl
 8001808:	3b28      	subs	r3, #40	; 0x28
 800180a:	409a      	lsls	r2, r3
 800180c:	0013      	movs	r3, r2
 800180e:	2200      	movs	r2, #0
 8001810:	e693      	b.n	800153a <__aeabi_dmul+0x1a2>
 8001812:	4650      	mov	r0, sl
 8001814:	f000 fd0e 	bl	8002234 <__clzsi2>
 8001818:	3020      	adds	r0, #32
 800181a:	e67b      	b.n	8001514 <__aeabi_dmul+0x17c>
 800181c:	46ca      	mov	sl, r9
 800181e:	e750      	b.n	80016c2 <__aeabi_dmul+0x32a>
 8001820:	201f      	movs	r0, #31
 8001822:	001e      	movs	r6, r3
 8001824:	4240      	negs	r0, r0
 8001826:	1b04      	subs	r4, r0, r4
 8001828:	40e6      	lsrs	r6, r4
 800182a:	2d20      	cmp	r5, #32
 800182c:	d003      	beq.n	8001836 <__aeabi_dmul+0x49e>
 800182e:	4c12      	ldr	r4, [pc, #72]	; (8001878 <__aeabi_dmul+0x4e0>)
 8001830:	4454      	add	r4, sl
 8001832:	40a3      	lsls	r3, r4
 8001834:	431a      	orrs	r2, r3
 8001836:	1e50      	subs	r0, r2, #1
 8001838:	4182      	sbcs	r2, r0
 800183a:	4332      	orrs	r2, r6
 800183c:	2607      	movs	r6, #7
 800183e:	2700      	movs	r7, #0
 8001840:	4016      	ands	r6, r2
 8001842:	d009      	beq.n	8001858 <__aeabi_dmul+0x4c0>
 8001844:	200f      	movs	r0, #15
 8001846:	2300      	movs	r3, #0
 8001848:	4010      	ands	r0, r2
 800184a:	0014      	movs	r4, r2
 800184c:	2804      	cmp	r0, #4
 800184e:	d1b9      	bne.n	80017c4 <__aeabi_dmul+0x42c>
 8001850:	0022      	movs	r2, r4
 8001852:	075e      	lsls	r6, r3, #29
 8001854:	025b      	lsls	r3, r3, #9
 8001856:	0b1f      	lsrs	r7, r3, #12
 8001858:	08d2      	lsrs	r2, r2, #3
 800185a:	4316      	orrs	r6, r2
 800185c:	2300      	movs	r3, #0
 800185e:	e606      	b.n	800146e <__aeabi_dmul+0xd6>
 8001860:	2780      	movs	r7, #128	; 0x80
 8001862:	033f      	lsls	r7, r7, #12
 8001864:	431f      	orrs	r7, r3
 8001866:	033f      	lsls	r7, r7, #12
 8001868:	0b3f      	lsrs	r7, r7, #12
 800186a:	0016      	movs	r6, r2
 800186c:	4b00      	ldr	r3, [pc, #0]	; (8001870 <__aeabi_dmul+0x4d8>)
 800186e:	e5fe      	b.n	800146e <__aeabi_dmul+0xd6>
 8001870:	000007ff 	.word	0x000007ff
 8001874:	0000041e 	.word	0x0000041e
 8001878:	0000043e 	.word	0x0000043e

0800187c <__aeabi_dsub>:
 800187c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800187e:	4657      	mov	r7, sl
 8001880:	464e      	mov	r6, r9
 8001882:	4645      	mov	r5, r8
 8001884:	46de      	mov	lr, fp
 8001886:	000c      	movs	r4, r1
 8001888:	0309      	lsls	r1, r1, #12
 800188a:	b5e0      	push	{r5, r6, r7, lr}
 800188c:	0a49      	lsrs	r1, r1, #9
 800188e:	0f46      	lsrs	r6, r0, #29
 8001890:	005f      	lsls	r7, r3, #1
 8001892:	4331      	orrs	r1, r6
 8001894:	031e      	lsls	r6, r3, #12
 8001896:	0fdb      	lsrs	r3, r3, #31
 8001898:	0a76      	lsrs	r6, r6, #9
 800189a:	469b      	mov	fp, r3
 800189c:	0f53      	lsrs	r3, r2, #29
 800189e:	4333      	orrs	r3, r6
 80018a0:	4ec8      	ldr	r6, [pc, #800]	; (8001bc4 <__aeabi_dsub+0x348>)
 80018a2:	0065      	lsls	r5, r4, #1
 80018a4:	00c0      	lsls	r0, r0, #3
 80018a6:	0fe4      	lsrs	r4, r4, #31
 80018a8:	00d2      	lsls	r2, r2, #3
 80018aa:	0d6d      	lsrs	r5, r5, #21
 80018ac:	46a2      	mov	sl, r4
 80018ae:	4681      	mov	r9, r0
 80018b0:	0d7f      	lsrs	r7, r7, #21
 80018b2:	469c      	mov	ip, r3
 80018b4:	4690      	mov	r8, r2
 80018b6:	42b7      	cmp	r7, r6
 80018b8:	d100      	bne.n	80018bc <__aeabi_dsub+0x40>
 80018ba:	e0b9      	b.n	8001a30 <__aeabi_dsub+0x1b4>
 80018bc:	465b      	mov	r3, fp
 80018be:	2601      	movs	r6, #1
 80018c0:	4073      	eors	r3, r6
 80018c2:	469b      	mov	fp, r3
 80018c4:	1bee      	subs	r6, r5, r7
 80018c6:	45a3      	cmp	fp, r4
 80018c8:	d100      	bne.n	80018cc <__aeabi_dsub+0x50>
 80018ca:	e083      	b.n	80019d4 <__aeabi_dsub+0x158>
 80018cc:	2e00      	cmp	r6, #0
 80018ce:	dd63      	ble.n	8001998 <__aeabi_dsub+0x11c>
 80018d0:	2f00      	cmp	r7, #0
 80018d2:	d000      	beq.n	80018d6 <__aeabi_dsub+0x5a>
 80018d4:	e0b1      	b.n	8001a3a <__aeabi_dsub+0x1be>
 80018d6:	4663      	mov	r3, ip
 80018d8:	4313      	orrs	r3, r2
 80018da:	d100      	bne.n	80018de <__aeabi_dsub+0x62>
 80018dc:	e123      	b.n	8001b26 <__aeabi_dsub+0x2aa>
 80018de:	1e73      	subs	r3, r6, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d000      	beq.n	80018e6 <__aeabi_dsub+0x6a>
 80018e4:	e1ba      	b.n	8001c5c <__aeabi_dsub+0x3e0>
 80018e6:	1a86      	subs	r6, r0, r2
 80018e8:	4663      	mov	r3, ip
 80018ea:	42b0      	cmp	r0, r6
 80018ec:	4180      	sbcs	r0, r0
 80018ee:	2501      	movs	r5, #1
 80018f0:	1ac9      	subs	r1, r1, r3
 80018f2:	4240      	negs	r0, r0
 80018f4:	1a09      	subs	r1, r1, r0
 80018f6:	020b      	lsls	r3, r1, #8
 80018f8:	d400      	bmi.n	80018fc <__aeabi_dsub+0x80>
 80018fa:	e147      	b.n	8001b8c <__aeabi_dsub+0x310>
 80018fc:	0249      	lsls	r1, r1, #9
 80018fe:	0a4b      	lsrs	r3, r1, #9
 8001900:	4698      	mov	r8, r3
 8001902:	4643      	mov	r3, r8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d100      	bne.n	800190a <__aeabi_dsub+0x8e>
 8001908:	e189      	b.n	8001c1e <__aeabi_dsub+0x3a2>
 800190a:	4640      	mov	r0, r8
 800190c:	f000 fc92 	bl	8002234 <__clzsi2>
 8001910:	0003      	movs	r3, r0
 8001912:	3b08      	subs	r3, #8
 8001914:	2b1f      	cmp	r3, #31
 8001916:	dd00      	ble.n	800191a <__aeabi_dsub+0x9e>
 8001918:	e17c      	b.n	8001c14 <__aeabi_dsub+0x398>
 800191a:	2220      	movs	r2, #32
 800191c:	0030      	movs	r0, r6
 800191e:	1ad2      	subs	r2, r2, r3
 8001920:	4641      	mov	r1, r8
 8001922:	40d0      	lsrs	r0, r2
 8001924:	4099      	lsls	r1, r3
 8001926:	0002      	movs	r2, r0
 8001928:	409e      	lsls	r6, r3
 800192a:	430a      	orrs	r2, r1
 800192c:	429d      	cmp	r5, r3
 800192e:	dd00      	ble.n	8001932 <__aeabi_dsub+0xb6>
 8001930:	e16a      	b.n	8001c08 <__aeabi_dsub+0x38c>
 8001932:	1b5d      	subs	r5, r3, r5
 8001934:	1c6b      	adds	r3, r5, #1
 8001936:	2b1f      	cmp	r3, #31
 8001938:	dd00      	ble.n	800193c <__aeabi_dsub+0xc0>
 800193a:	e194      	b.n	8001c66 <__aeabi_dsub+0x3ea>
 800193c:	2120      	movs	r1, #32
 800193e:	0010      	movs	r0, r2
 8001940:	0035      	movs	r5, r6
 8001942:	1ac9      	subs	r1, r1, r3
 8001944:	408e      	lsls	r6, r1
 8001946:	40da      	lsrs	r2, r3
 8001948:	4088      	lsls	r0, r1
 800194a:	40dd      	lsrs	r5, r3
 800194c:	1e71      	subs	r1, r6, #1
 800194e:	418e      	sbcs	r6, r1
 8001950:	0011      	movs	r1, r2
 8001952:	2207      	movs	r2, #7
 8001954:	4328      	orrs	r0, r5
 8001956:	2500      	movs	r5, #0
 8001958:	4306      	orrs	r6, r0
 800195a:	4032      	ands	r2, r6
 800195c:	2a00      	cmp	r2, #0
 800195e:	d009      	beq.n	8001974 <__aeabi_dsub+0xf8>
 8001960:	230f      	movs	r3, #15
 8001962:	4033      	ands	r3, r6
 8001964:	2b04      	cmp	r3, #4
 8001966:	d005      	beq.n	8001974 <__aeabi_dsub+0xf8>
 8001968:	1d33      	adds	r3, r6, #4
 800196a:	42b3      	cmp	r3, r6
 800196c:	41b6      	sbcs	r6, r6
 800196e:	4276      	negs	r6, r6
 8001970:	1989      	adds	r1, r1, r6
 8001972:	001e      	movs	r6, r3
 8001974:	020b      	lsls	r3, r1, #8
 8001976:	d400      	bmi.n	800197a <__aeabi_dsub+0xfe>
 8001978:	e23d      	b.n	8001df6 <__aeabi_dsub+0x57a>
 800197a:	1c6a      	adds	r2, r5, #1
 800197c:	4b91      	ldr	r3, [pc, #580]	; (8001bc4 <__aeabi_dsub+0x348>)
 800197e:	0555      	lsls	r5, r2, #21
 8001980:	0d6d      	lsrs	r5, r5, #21
 8001982:	429a      	cmp	r2, r3
 8001984:	d100      	bne.n	8001988 <__aeabi_dsub+0x10c>
 8001986:	e119      	b.n	8001bbc <__aeabi_dsub+0x340>
 8001988:	4a8f      	ldr	r2, [pc, #572]	; (8001bc8 <__aeabi_dsub+0x34c>)
 800198a:	08f6      	lsrs	r6, r6, #3
 800198c:	400a      	ands	r2, r1
 800198e:	0757      	lsls	r7, r2, #29
 8001990:	0252      	lsls	r2, r2, #9
 8001992:	4337      	orrs	r7, r6
 8001994:	0b12      	lsrs	r2, r2, #12
 8001996:	e09b      	b.n	8001ad0 <__aeabi_dsub+0x254>
 8001998:	2e00      	cmp	r6, #0
 800199a:	d000      	beq.n	800199e <__aeabi_dsub+0x122>
 800199c:	e0c5      	b.n	8001b2a <__aeabi_dsub+0x2ae>
 800199e:	1c6e      	adds	r6, r5, #1
 80019a0:	0576      	lsls	r6, r6, #21
 80019a2:	0d76      	lsrs	r6, r6, #21
 80019a4:	2e01      	cmp	r6, #1
 80019a6:	dc00      	bgt.n	80019aa <__aeabi_dsub+0x12e>
 80019a8:	e148      	b.n	8001c3c <__aeabi_dsub+0x3c0>
 80019aa:	4667      	mov	r7, ip
 80019ac:	1a86      	subs	r6, r0, r2
 80019ae:	1bcb      	subs	r3, r1, r7
 80019b0:	42b0      	cmp	r0, r6
 80019b2:	41bf      	sbcs	r7, r7
 80019b4:	427f      	negs	r7, r7
 80019b6:	46b8      	mov	r8, r7
 80019b8:	001f      	movs	r7, r3
 80019ba:	4643      	mov	r3, r8
 80019bc:	1aff      	subs	r7, r7, r3
 80019be:	003b      	movs	r3, r7
 80019c0:	46b8      	mov	r8, r7
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	d500      	bpl.n	80019c8 <__aeabi_dsub+0x14c>
 80019c6:	e15f      	b.n	8001c88 <__aeabi_dsub+0x40c>
 80019c8:	4337      	orrs	r7, r6
 80019ca:	d19a      	bne.n	8001902 <__aeabi_dsub+0x86>
 80019cc:	2200      	movs	r2, #0
 80019ce:	2400      	movs	r4, #0
 80019d0:	2500      	movs	r5, #0
 80019d2:	e079      	b.n	8001ac8 <__aeabi_dsub+0x24c>
 80019d4:	2e00      	cmp	r6, #0
 80019d6:	dc00      	bgt.n	80019da <__aeabi_dsub+0x15e>
 80019d8:	e0fa      	b.n	8001bd0 <__aeabi_dsub+0x354>
 80019da:	2f00      	cmp	r7, #0
 80019dc:	d100      	bne.n	80019e0 <__aeabi_dsub+0x164>
 80019de:	e08d      	b.n	8001afc <__aeabi_dsub+0x280>
 80019e0:	4b78      	ldr	r3, [pc, #480]	; (8001bc4 <__aeabi_dsub+0x348>)
 80019e2:	429d      	cmp	r5, r3
 80019e4:	d067      	beq.n	8001ab6 <__aeabi_dsub+0x23a>
 80019e6:	2380      	movs	r3, #128	; 0x80
 80019e8:	4667      	mov	r7, ip
 80019ea:	041b      	lsls	r3, r3, #16
 80019ec:	431f      	orrs	r7, r3
 80019ee:	46bc      	mov	ip, r7
 80019f0:	2e38      	cmp	r6, #56	; 0x38
 80019f2:	dc00      	bgt.n	80019f6 <__aeabi_dsub+0x17a>
 80019f4:	e152      	b.n	8001c9c <__aeabi_dsub+0x420>
 80019f6:	4663      	mov	r3, ip
 80019f8:	4313      	orrs	r3, r2
 80019fa:	1e5a      	subs	r2, r3, #1
 80019fc:	4193      	sbcs	r3, r2
 80019fe:	181e      	adds	r6, r3, r0
 8001a00:	4286      	cmp	r6, r0
 8001a02:	4180      	sbcs	r0, r0
 8001a04:	4240      	negs	r0, r0
 8001a06:	1809      	adds	r1, r1, r0
 8001a08:	020b      	lsls	r3, r1, #8
 8001a0a:	d400      	bmi.n	8001a0e <__aeabi_dsub+0x192>
 8001a0c:	e0be      	b.n	8001b8c <__aeabi_dsub+0x310>
 8001a0e:	4b6d      	ldr	r3, [pc, #436]	; (8001bc4 <__aeabi_dsub+0x348>)
 8001a10:	3501      	adds	r5, #1
 8001a12:	429d      	cmp	r5, r3
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dsub+0x19c>
 8001a16:	e0d2      	b.n	8001bbe <__aeabi_dsub+0x342>
 8001a18:	4a6b      	ldr	r2, [pc, #428]	; (8001bc8 <__aeabi_dsub+0x34c>)
 8001a1a:	0873      	lsrs	r3, r6, #1
 8001a1c:	400a      	ands	r2, r1
 8001a1e:	2101      	movs	r1, #1
 8001a20:	400e      	ands	r6, r1
 8001a22:	431e      	orrs	r6, r3
 8001a24:	0851      	lsrs	r1, r2, #1
 8001a26:	07d3      	lsls	r3, r2, #31
 8001a28:	2207      	movs	r2, #7
 8001a2a:	431e      	orrs	r6, r3
 8001a2c:	4032      	ands	r2, r6
 8001a2e:	e795      	b.n	800195c <__aeabi_dsub+0xe0>
 8001a30:	001e      	movs	r6, r3
 8001a32:	4316      	orrs	r6, r2
 8001a34:	d000      	beq.n	8001a38 <__aeabi_dsub+0x1bc>
 8001a36:	e745      	b.n	80018c4 <__aeabi_dsub+0x48>
 8001a38:	e740      	b.n	80018bc <__aeabi_dsub+0x40>
 8001a3a:	4b62      	ldr	r3, [pc, #392]	; (8001bc4 <__aeabi_dsub+0x348>)
 8001a3c:	429d      	cmp	r5, r3
 8001a3e:	d03a      	beq.n	8001ab6 <__aeabi_dsub+0x23a>
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	4667      	mov	r7, ip
 8001a44:	041b      	lsls	r3, r3, #16
 8001a46:	431f      	orrs	r7, r3
 8001a48:	46bc      	mov	ip, r7
 8001a4a:	2e38      	cmp	r6, #56	; 0x38
 8001a4c:	dd00      	ble.n	8001a50 <__aeabi_dsub+0x1d4>
 8001a4e:	e0eb      	b.n	8001c28 <__aeabi_dsub+0x3ac>
 8001a50:	2e1f      	cmp	r6, #31
 8001a52:	dc00      	bgt.n	8001a56 <__aeabi_dsub+0x1da>
 8001a54:	e13a      	b.n	8001ccc <__aeabi_dsub+0x450>
 8001a56:	0033      	movs	r3, r6
 8001a58:	4667      	mov	r7, ip
 8001a5a:	3b20      	subs	r3, #32
 8001a5c:	40df      	lsrs	r7, r3
 8001a5e:	003b      	movs	r3, r7
 8001a60:	2e20      	cmp	r6, #32
 8001a62:	d005      	beq.n	8001a70 <__aeabi_dsub+0x1f4>
 8001a64:	2740      	movs	r7, #64	; 0x40
 8001a66:	1bbf      	subs	r7, r7, r6
 8001a68:	4666      	mov	r6, ip
 8001a6a:	40be      	lsls	r6, r7
 8001a6c:	4332      	orrs	r2, r6
 8001a6e:	4690      	mov	r8, r2
 8001a70:	4646      	mov	r6, r8
 8001a72:	1e72      	subs	r2, r6, #1
 8001a74:	4196      	sbcs	r6, r2
 8001a76:	4333      	orrs	r3, r6
 8001a78:	e0da      	b.n	8001c30 <__aeabi_dsub+0x3b4>
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d100      	bne.n	8001a80 <__aeabi_dsub+0x204>
 8001a7e:	e214      	b.n	8001eaa <__aeabi_dsub+0x62e>
 8001a80:	4663      	mov	r3, ip
 8001a82:	4313      	orrs	r3, r2
 8001a84:	d100      	bne.n	8001a88 <__aeabi_dsub+0x20c>
 8001a86:	e168      	b.n	8001d5a <__aeabi_dsub+0x4de>
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	074e      	lsls	r6, r1, #29
 8001a8c:	08c0      	lsrs	r0, r0, #3
 8001a8e:	08c9      	lsrs	r1, r1, #3
 8001a90:	031b      	lsls	r3, r3, #12
 8001a92:	4306      	orrs	r6, r0
 8001a94:	4219      	tst	r1, r3
 8001a96:	d008      	beq.n	8001aaa <__aeabi_dsub+0x22e>
 8001a98:	4660      	mov	r0, ip
 8001a9a:	08c0      	lsrs	r0, r0, #3
 8001a9c:	4218      	tst	r0, r3
 8001a9e:	d104      	bne.n	8001aaa <__aeabi_dsub+0x22e>
 8001aa0:	4663      	mov	r3, ip
 8001aa2:	0001      	movs	r1, r0
 8001aa4:	08d2      	lsrs	r2, r2, #3
 8001aa6:	075e      	lsls	r6, r3, #29
 8001aa8:	4316      	orrs	r6, r2
 8001aaa:	00f3      	lsls	r3, r6, #3
 8001aac:	4699      	mov	r9, r3
 8001aae:	00c9      	lsls	r1, r1, #3
 8001ab0:	0f72      	lsrs	r2, r6, #29
 8001ab2:	4d44      	ldr	r5, [pc, #272]	; (8001bc4 <__aeabi_dsub+0x348>)
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	464b      	mov	r3, r9
 8001ab8:	08de      	lsrs	r6, r3, #3
 8001aba:	4b42      	ldr	r3, [pc, #264]	; (8001bc4 <__aeabi_dsub+0x348>)
 8001abc:	074f      	lsls	r7, r1, #29
 8001abe:	4337      	orrs	r7, r6
 8001ac0:	08ca      	lsrs	r2, r1, #3
 8001ac2:	429d      	cmp	r5, r3
 8001ac4:	d100      	bne.n	8001ac8 <__aeabi_dsub+0x24c>
 8001ac6:	e06e      	b.n	8001ba6 <__aeabi_dsub+0x32a>
 8001ac8:	0312      	lsls	r2, r2, #12
 8001aca:	056d      	lsls	r5, r5, #21
 8001acc:	0b12      	lsrs	r2, r2, #12
 8001ace:	0d6d      	lsrs	r5, r5, #21
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	0312      	lsls	r2, r2, #12
 8001ad4:	0b13      	lsrs	r3, r2, #12
 8001ad6:	0d0a      	lsrs	r2, r1, #20
 8001ad8:	0512      	lsls	r2, r2, #20
 8001ada:	431a      	orrs	r2, r3
 8001adc:	4b3b      	ldr	r3, [pc, #236]	; (8001bcc <__aeabi_dsub+0x350>)
 8001ade:	052d      	lsls	r5, r5, #20
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	432b      	orrs	r3, r5
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	07e4      	lsls	r4, r4, #31
 8001ae8:	085b      	lsrs	r3, r3, #1
 8001aea:	4323      	orrs	r3, r4
 8001aec:	0038      	movs	r0, r7
 8001aee:	0019      	movs	r1, r3
 8001af0:	bc3c      	pop	{r2, r3, r4, r5}
 8001af2:	4690      	mov	r8, r2
 8001af4:	4699      	mov	r9, r3
 8001af6:	46a2      	mov	sl, r4
 8001af8:	46ab      	mov	fp, r5
 8001afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001afc:	4663      	mov	r3, ip
 8001afe:	4313      	orrs	r3, r2
 8001b00:	d011      	beq.n	8001b26 <__aeabi_dsub+0x2aa>
 8001b02:	1e73      	subs	r3, r6, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d000      	beq.n	8001b0a <__aeabi_dsub+0x28e>
 8001b08:	e107      	b.n	8001d1a <__aeabi_dsub+0x49e>
 8001b0a:	1886      	adds	r6, r0, r2
 8001b0c:	4286      	cmp	r6, r0
 8001b0e:	4180      	sbcs	r0, r0
 8001b10:	4461      	add	r1, ip
 8001b12:	4240      	negs	r0, r0
 8001b14:	1809      	adds	r1, r1, r0
 8001b16:	2501      	movs	r5, #1
 8001b18:	020b      	lsls	r3, r1, #8
 8001b1a:	d537      	bpl.n	8001b8c <__aeabi_dsub+0x310>
 8001b1c:	2502      	movs	r5, #2
 8001b1e:	e77b      	b.n	8001a18 <__aeabi_dsub+0x19c>
 8001b20:	003e      	movs	r6, r7
 8001b22:	4661      	mov	r1, ip
 8001b24:	4691      	mov	r9, r2
 8001b26:	0035      	movs	r5, r6
 8001b28:	e7c5      	b.n	8001ab6 <__aeabi_dsub+0x23a>
 8001b2a:	465c      	mov	r4, fp
 8001b2c:	2d00      	cmp	r5, #0
 8001b2e:	d000      	beq.n	8001b32 <__aeabi_dsub+0x2b6>
 8001b30:	e0e1      	b.n	8001cf6 <__aeabi_dsub+0x47a>
 8001b32:	000b      	movs	r3, r1
 8001b34:	4303      	orrs	r3, r0
 8001b36:	d0f3      	beq.n	8001b20 <__aeabi_dsub+0x2a4>
 8001b38:	1c73      	adds	r3, r6, #1
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_dsub+0x2c2>
 8001b3c:	e1ac      	b.n	8001e98 <__aeabi_dsub+0x61c>
 8001b3e:	4b21      	ldr	r3, [pc, #132]	; (8001bc4 <__aeabi_dsub+0x348>)
 8001b40:	429f      	cmp	r7, r3
 8001b42:	d100      	bne.n	8001b46 <__aeabi_dsub+0x2ca>
 8001b44:	e13a      	b.n	8001dbc <__aeabi_dsub+0x540>
 8001b46:	43f3      	mvns	r3, r6
 8001b48:	2b38      	cmp	r3, #56	; 0x38
 8001b4a:	dd00      	ble.n	8001b4e <__aeabi_dsub+0x2d2>
 8001b4c:	e16f      	b.n	8001e2e <__aeabi_dsub+0x5b2>
 8001b4e:	2b1f      	cmp	r3, #31
 8001b50:	dd00      	ble.n	8001b54 <__aeabi_dsub+0x2d8>
 8001b52:	e18c      	b.n	8001e6e <__aeabi_dsub+0x5f2>
 8001b54:	2520      	movs	r5, #32
 8001b56:	000e      	movs	r6, r1
 8001b58:	1aed      	subs	r5, r5, r3
 8001b5a:	40ae      	lsls	r6, r5
 8001b5c:	46b0      	mov	r8, r6
 8001b5e:	0006      	movs	r6, r0
 8001b60:	46aa      	mov	sl, r5
 8001b62:	40de      	lsrs	r6, r3
 8001b64:	4645      	mov	r5, r8
 8001b66:	4335      	orrs	r5, r6
 8001b68:	002e      	movs	r6, r5
 8001b6a:	4655      	mov	r5, sl
 8001b6c:	40d9      	lsrs	r1, r3
 8001b6e:	40a8      	lsls	r0, r5
 8001b70:	4663      	mov	r3, ip
 8001b72:	1e45      	subs	r5, r0, #1
 8001b74:	41a8      	sbcs	r0, r5
 8001b76:	1a5b      	subs	r3, r3, r1
 8001b78:	469c      	mov	ip, r3
 8001b7a:	4330      	orrs	r0, r6
 8001b7c:	1a16      	subs	r6, r2, r0
 8001b7e:	42b2      	cmp	r2, r6
 8001b80:	4192      	sbcs	r2, r2
 8001b82:	4663      	mov	r3, ip
 8001b84:	4252      	negs	r2, r2
 8001b86:	1a99      	subs	r1, r3, r2
 8001b88:	003d      	movs	r5, r7
 8001b8a:	e6b4      	b.n	80018f6 <__aeabi_dsub+0x7a>
 8001b8c:	2207      	movs	r2, #7
 8001b8e:	4032      	ands	r2, r6
 8001b90:	2a00      	cmp	r2, #0
 8001b92:	d000      	beq.n	8001b96 <__aeabi_dsub+0x31a>
 8001b94:	e6e4      	b.n	8001960 <__aeabi_dsub+0xe4>
 8001b96:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <__aeabi_dsub+0x348>)
 8001b98:	08f6      	lsrs	r6, r6, #3
 8001b9a:	074f      	lsls	r7, r1, #29
 8001b9c:	4337      	orrs	r7, r6
 8001b9e:	08ca      	lsrs	r2, r1, #3
 8001ba0:	429d      	cmp	r5, r3
 8001ba2:	d000      	beq.n	8001ba6 <__aeabi_dsub+0x32a>
 8001ba4:	e790      	b.n	8001ac8 <__aeabi_dsub+0x24c>
 8001ba6:	003b      	movs	r3, r7
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x332>
 8001bac:	e1a6      	b.n	8001efc <__aeabi_dsub+0x680>
 8001bae:	2380      	movs	r3, #128	; 0x80
 8001bb0:	031b      	lsls	r3, r3, #12
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	0312      	lsls	r2, r2, #12
 8001bb6:	0b12      	lsrs	r2, r2, #12
 8001bb8:	4d02      	ldr	r5, [pc, #8]	; (8001bc4 <__aeabi_dsub+0x348>)
 8001bba:	e789      	b.n	8001ad0 <__aeabi_dsub+0x254>
 8001bbc:	0015      	movs	r5, r2
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2700      	movs	r7, #0
 8001bc2:	e785      	b.n	8001ad0 <__aeabi_dsub+0x254>
 8001bc4:	000007ff 	.word	0x000007ff
 8001bc8:	ff7fffff 	.word	0xff7fffff
 8001bcc:	800fffff 	.word	0x800fffff
 8001bd0:	2e00      	cmp	r6, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dsub+0x35a>
 8001bd4:	e0c7      	b.n	8001d66 <__aeabi_dsub+0x4ea>
 8001bd6:	1c6b      	adds	r3, r5, #1
 8001bd8:	055e      	lsls	r6, r3, #21
 8001bda:	0d76      	lsrs	r6, r6, #21
 8001bdc:	2e01      	cmp	r6, #1
 8001bde:	dc00      	bgt.n	8001be2 <__aeabi_dsub+0x366>
 8001be0:	e0f0      	b.n	8001dc4 <__aeabi_dsub+0x548>
 8001be2:	4dc8      	ldr	r5, [pc, #800]	; (8001f04 <__aeabi_dsub+0x688>)
 8001be4:	42ab      	cmp	r3, r5
 8001be6:	d100      	bne.n	8001bea <__aeabi_dsub+0x36e>
 8001be8:	e0b9      	b.n	8001d5e <__aeabi_dsub+0x4e2>
 8001bea:	1885      	adds	r5, r0, r2
 8001bec:	000a      	movs	r2, r1
 8001bee:	4285      	cmp	r5, r0
 8001bf0:	4189      	sbcs	r1, r1
 8001bf2:	4462      	add	r2, ip
 8001bf4:	4249      	negs	r1, r1
 8001bf6:	1851      	adds	r1, r2, r1
 8001bf8:	2207      	movs	r2, #7
 8001bfa:	07ce      	lsls	r6, r1, #31
 8001bfc:	086d      	lsrs	r5, r5, #1
 8001bfe:	432e      	orrs	r6, r5
 8001c00:	0849      	lsrs	r1, r1, #1
 8001c02:	4032      	ands	r2, r6
 8001c04:	001d      	movs	r5, r3
 8001c06:	e6a9      	b.n	800195c <__aeabi_dsub+0xe0>
 8001c08:	49bf      	ldr	r1, [pc, #764]	; (8001f08 <__aeabi_dsub+0x68c>)
 8001c0a:	1aed      	subs	r5, r5, r3
 8001c0c:	4011      	ands	r1, r2
 8001c0e:	2207      	movs	r2, #7
 8001c10:	4032      	ands	r2, r6
 8001c12:	e6a3      	b.n	800195c <__aeabi_dsub+0xe0>
 8001c14:	0032      	movs	r2, r6
 8001c16:	3828      	subs	r0, #40	; 0x28
 8001c18:	4082      	lsls	r2, r0
 8001c1a:	2600      	movs	r6, #0
 8001c1c:	e686      	b.n	800192c <__aeabi_dsub+0xb0>
 8001c1e:	0030      	movs	r0, r6
 8001c20:	f000 fb08 	bl	8002234 <__clzsi2>
 8001c24:	3020      	adds	r0, #32
 8001c26:	e673      	b.n	8001910 <__aeabi_dsub+0x94>
 8001c28:	4663      	mov	r3, ip
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	1e5a      	subs	r2, r3, #1
 8001c2e:	4193      	sbcs	r3, r2
 8001c30:	1ac6      	subs	r6, r0, r3
 8001c32:	42b0      	cmp	r0, r6
 8001c34:	4180      	sbcs	r0, r0
 8001c36:	4240      	negs	r0, r0
 8001c38:	1a09      	subs	r1, r1, r0
 8001c3a:	e65c      	b.n	80018f6 <__aeabi_dsub+0x7a>
 8001c3c:	000e      	movs	r6, r1
 8001c3e:	4667      	mov	r7, ip
 8001c40:	4306      	orrs	r6, r0
 8001c42:	4317      	orrs	r7, r2
 8001c44:	2d00      	cmp	r5, #0
 8001c46:	d15e      	bne.n	8001d06 <__aeabi_dsub+0x48a>
 8001c48:	2e00      	cmp	r6, #0
 8001c4a:	d000      	beq.n	8001c4e <__aeabi_dsub+0x3d2>
 8001c4c:	e0f3      	b.n	8001e36 <__aeabi_dsub+0x5ba>
 8001c4e:	2f00      	cmp	r7, #0
 8001c50:	d100      	bne.n	8001c54 <__aeabi_dsub+0x3d8>
 8001c52:	e11e      	b.n	8001e92 <__aeabi_dsub+0x616>
 8001c54:	465c      	mov	r4, fp
 8001c56:	4661      	mov	r1, ip
 8001c58:	4691      	mov	r9, r2
 8001c5a:	e72c      	b.n	8001ab6 <__aeabi_dsub+0x23a>
 8001c5c:	4fa9      	ldr	r7, [pc, #676]	; (8001f04 <__aeabi_dsub+0x688>)
 8001c5e:	42be      	cmp	r6, r7
 8001c60:	d07b      	beq.n	8001d5a <__aeabi_dsub+0x4de>
 8001c62:	001e      	movs	r6, r3
 8001c64:	e6f1      	b.n	8001a4a <__aeabi_dsub+0x1ce>
 8001c66:	0010      	movs	r0, r2
 8001c68:	3d1f      	subs	r5, #31
 8001c6a:	40e8      	lsrs	r0, r5
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d003      	beq.n	8001c78 <__aeabi_dsub+0x3fc>
 8001c70:	2140      	movs	r1, #64	; 0x40
 8001c72:	1acb      	subs	r3, r1, r3
 8001c74:	409a      	lsls	r2, r3
 8001c76:	4316      	orrs	r6, r2
 8001c78:	1e73      	subs	r3, r6, #1
 8001c7a:	419e      	sbcs	r6, r3
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	4306      	orrs	r6, r0
 8001c80:	4032      	ands	r2, r6
 8001c82:	2100      	movs	r1, #0
 8001c84:	2500      	movs	r5, #0
 8001c86:	e783      	b.n	8001b90 <__aeabi_dsub+0x314>
 8001c88:	1a16      	subs	r6, r2, r0
 8001c8a:	4663      	mov	r3, ip
 8001c8c:	42b2      	cmp	r2, r6
 8001c8e:	4180      	sbcs	r0, r0
 8001c90:	1a59      	subs	r1, r3, r1
 8001c92:	4240      	negs	r0, r0
 8001c94:	1a0b      	subs	r3, r1, r0
 8001c96:	4698      	mov	r8, r3
 8001c98:	465c      	mov	r4, fp
 8001c9a:	e632      	b.n	8001902 <__aeabi_dsub+0x86>
 8001c9c:	2e1f      	cmp	r6, #31
 8001c9e:	dd00      	ble.n	8001ca2 <__aeabi_dsub+0x426>
 8001ca0:	e0ab      	b.n	8001dfa <__aeabi_dsub+0x57e>
 8001ca2:	2720      	movs	r7, #32
 8001ca4:	1bbb      	subs	r3, r7, r6
 8001ca6:	469a      	mov	sl, r3
 8001ca8:	4663      	mov	r3, ip
 8001caa:	4657      	mov	r7, sl
 8001cac:	40bb      	lsls	r3, r7
 8001cae:	4699      	mov	r9, r3
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	464f      	mov	r7, r9
 8001cb4:	40f3      	lsrs	r3, r6
 8001cb6:	431f      	orrs	r7, r3
 8001cb8:	003b      	movs	r3, r7
 8001cba:	4657      	mov	r7, sl
 8001cbc:	40ba      	lsls	r2, r7
 8001cbe:	1e57      	subs	r7, r2, #1
 8001cc0:	41ba      	sbcs	r2, r7
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	4662      	mov	r2, ip
 8001cc6:	40f2      	lsrs	r2, r6
 8001cc8:	1889      	adds	r1, r1, r2
 8001cca:	e698      	b.n	80019fe <__aeabi_dsub+0x182>
 8001ccc:	2720      	movs	r7, #32
 8001cce:	1bbb      	subs	r3, r7, r6
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	4663      	mov	r3, ip
 8001cd4:	4657      	mov	r7, sl
 8001cd6:	40bb      	lsls	r3, r7
 8001cd8:	4699      	mov	r9, r3
 8001cda:	0013      	movs	r3, r2
 8001cdc:	464f      	mov	r7, r9
 8001cde:	40f3      	lsrs	r3, r6
 8001ce0:	431f      	orrs	r7, r3
 8001ce2:	003b      	movs	r3, r7
 8001ce4:	4657      	mov	r7, sl
 8001ce6:	40ba      	lsls	r2, r7
 8001ce8:	1e57      	subs	r7, r2, #1
 8001cea:	41ba      	sbcs	r2, r7
 8001cec:	4313      	orrs	r3, r2
 8001cee:	4662      	mov	r2, ip
 8001cf0:	40f2      	lsrs	r2, r6
 8001cf2:	1a89      	subs	r1, r1, r2
 8001cf4:	e79c      	b.n	8001c30 <__aeabi_dsub+0x3b4>
 8001cf6:	4b83      	ldr	r3, [pc, #524]	; (8001f04 <__aeabi_dsub+0x688>)
 8001cf8:	429f      	cmp	r7, r3
 8001cfa:	d05f      	beq.n	8001dbc <__aeabi_dsub+0x540>
 8001cfc:	2580      	movs	r5, #128	; 0x80
 8001cfe:	042d      	lsls	r5, r5, #16
 8001d00:	4273      	negs	r3, r6
 8001d02:	4329      	orrs	r1, r5
 8001d04:	e720      	b.n	8001b48 <__aeabi_dsub+0x2cc>
 8001d06:	2e00      	cmp	r6, #0
 8001d08:	d10c      	bne.n	8001d24 <__aeabi_dsub+0x4a8>
 8001d0a:	2f00      	cmp	r7, #0
 8001d0c:	d100      	bne.n	8001d10 <__aeabi_dsub+0x494>
 8001d0e:	e0d0      	b.n	8001eb2 <__aeabi_dsub+0x636>
 8001d10:	465c      	mov	r4, fp
 8001d12:	4661      	mov	r1, ip
 8001d14:	4691      	mov	r9, r2
 8001d16:	4d7b      	ldr	r5, [pc, #492]	; (8001f04 <__aeabi_dsub+0x688>)
 8001d18:	e6cd      	b.n	8001ab6 <__aeabi_dsub+0x23a>
 8001d1a:	4f7a      	ldr	r7, [pc, #488]	; (8001f04 <__aeabi_dsub+0x688>)
 8001d1c:	42be      	cmp	r6, r7
 8001d1e:	d01c      	beq.n	8001d5a <__aeabi_dsub+0x4de>
 8001d20:	001e      	movs	r6, r3
 8001d22:	e665      	b.n	80019f0 <__aeabi_dsub+0x174>
 8001d24:	2f00      	cmp	r7, #0
 8001d26:	d018      	beq.n	8001d5a <__aeabi_dsub+0x4de>
 8001d28:	08c0      	lsrs	r0, r0, #3
 8001d2a:	074e      	lsls	r6, r1, #29
 8001d2c:	4306      	orrs	r6, r0
 8001d2e:	2080      	movs	r0, #128	; 0x80
 8001d30:	08c9      	lsrs	r1, r1, #3
 8001d32:	0300      	lsls	r0, r0, #12
 8001d34:	4201      	tst	r1, r0
 8001d36:	d008      	beq.n	8001d4a <__aeabi_dsub+0x4ce>
 8001d38:	4663      	mov	r3, ip
 8001d3a:	08dc      	lsrs	r4, r3, #3
 8001d3c:	4204      	tst	r4, r0
 8001d3e:	d104      	bne.n	8001d4a <__aeabi_dsub+0x4ce>
 8001d40:	0021      	movs	r1, r4
 8001d42:	46da      	mov	sl, fp
 8001d44:	08d2      	lsrs	r2, r2, #3
 8001d46:	075e      	lsls	r6, r3, #29
 8001d48:	4316      	orrs	r6, r2
 8001d4a:	00f3      	lsls	r3, r6, #3
 8001d4c:	4699      	mov	r9, r3
 8001d4e:	2401      	movs	r4, #1
 8001d50:	4653      	mov	r3, sl
 8001d52:	00c9      	lsls	r1, r1, #3
 8001d54:	0f72      	lsrs	r2, r6, #29
 8001d56:	4311      	orrs	r1, r2
 8001d58:	401c      	ands	r4, r3
 8001d5a:	4d6a      	ldr	r5, [pc, #424]	; (8001f04 <__aeabi_dsub+0x688>)
 8001d5c:	e6ab      	b.n	8001ab6 <__aeabi_dsub+0x23a>
 8001d5e:	001d      	movs	r5, r3
 8001d60:	2200      	movs	r2, #0
 8001d62:	2700      	movs	r7, #0
 8001d64:	e6b4      	b.n	8001ad0 <__aeabi_dsub+0x254>
 8001d66:	2d00      	cmp	r5, #0
 8001d68:	d159      	bne.n	8001e1e <__aeabi_dsub+0x5a2>
 8001d6a:	000b      	movs	r3, r1
 8001d6c:	4303      	orrs	r3, r0
 8001d6e:	d100      	bne.n	8001d72 <__aeabi_dsub+0x4f6>
 8001d70:	e6d6      	b.n	8001b20 <__aeabi_dsub+0x2a4>
 8001d72:	1c73      	adds	r3, r6, #1
 8001d74:	d100      	bne.n	8001d78 <__aeabi_dsub+0x4fc>
 8001d76:	e0b2      	b.n	8001ede <__aeabi_dsub+0x662>
 8001d78:	4b62      	ldr	r3, [pc, #392]	; (8001f04 <__aeabi_dsub+0x688>)
 8001d7a:	429f      	cmp	r7, r3
 8001d7c:	d01e      	beq.n	8001dbc <__aeabi_dsub+0x540>
 8001d7e:	43f3      	mvns	r3, r6
 8001d80:	2b38      	cmp	r3, #56	; 0x38
 8001d82:	dc6f      	bgt.n	8001e64 <__aeabi_dsub+0x5e8>
 8001d84:	2b1f      	cmp	r3, #31
 8001d86:	dd00      	ble.n	8001d8a <__aeabi_dsub+0x50e>
 8001d88:	e097      	b.n	8001eba <__aeabi_dsub+0x63e>
 8001d8a:	2520      	movs	r5, #32
 8001d8c:	000e      	movs	r6, r1
 8001d8e:	1aed      	subs	r5, r5, r3
 8001d90:	40ae      	lsls	r6, r5
 8001d92:	46b0      	mov	r8, r6
 8001d94:	0006      	movs	r6, r0
 8001d96:	46aa      	mov	sl, r5
 8001d98:	40de      	lsrs	r6, r3
 8001d9a:	4645      	mov	r5, r8
 8001d9c:	4335      	orrs	r5, r6
 8001d9e:	002e      	movs	r6, r5
 8001da0:	4655      	mov	r5, sl
 8001da2:	40a8      	lsls	r0, r5
 8001da4:	40d9      	lsrs	r1, r3
 8001da6:	1e45      	subs	r5, r0, #1
 8001da8:	41a8      	sbcs	r0, r5
 8001daa:	448c      	add	ip, r1
 8001dac:	4306      	orrs	r6, r0
 8001dae:	18b6      	adds	r6, r6, r2
 8001db0:	4296      	cmp	r6, r2
 8001db2:	4192      	sbcs	r2, r2
 8001db4:	4251      	negs	r1, r2
 8001db6:	4461      	add	r1, ip
 8001db8:	003d      	movs	r5, r7
 8001dba:	e625      	b.n	8001a08 <__aeabi_dsub+0x18c>
 8001dbc:	003d      	movs	r5, r7
 8001dbe:	4661      	mov	r1, ip
 8001dc0:	4691      	mov	r9, r2
 8001dc2:	e678      	b.n	8001ab6 <__aeabi_dsub+0x23a>
 8001dc4:	000b      	movs	r3, r1
 8001dc6:	4303      	orrs	r3, r0
 8001dc8:	2d00      	cmp	r5, #0
 8001dca:	d000      	beq.n	8001dce <__aeabi_dsub+0x552>
 8001dcc:	e655      	b.n	8001a7a <__aeabi_dsub+0x1fe>
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f5      	beq.n	8001dbe <__aeabi_dsub+0x542>
 8001dd2:	4663      	mov	r3, ip
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dsub+0x55e>
 8001dd8:	e66d      	b.n	8001ab6 <__aeabi_dsub+0x23a>
 8001dda:	1886      	adds	r6, r0, r2
 8001ddc:	4286      	cmp	r6, r0
 8001dde:	4180      	sbcs	r0, r0
 8001de0:	4461      	add	r1, ip
 8001de2:	4240      	negs	r0, r0
 8001de4:	1809      	adds	r1, r1, r0
 8001de6:	2200      	movs	r2, #0
 8001de8:	020b      	lsls	r3, r1, #8
 8001dea:	d400      	bmi.n	8001dee <__aeabi_dsub+0x572>
 8001dec:	e6d0      	b.n	8001b90 <__aeabi_dsub+0x314>
 8001dee:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <__aeabi_dsub+0x68c>)
 8001df0:	3501      	adds	r5, #1
 8001df2:	4019      	ands	r1, r3
 8001df4:	e5b2      	b.n	800195c <__aeabi_dsub+0xe0>
 8001df6:	46b1      	mov	r9, r6
 8001df8:	e65d      	b.n	8001ab6 <__aeabi_dsub+0x23a>
 8001dfa:	0033      	movs	r3, r6
 8001dfc:	4667      	mov	r7, ip
 8001dfe:	3b20      	subs	r3, #32
 8001e00:	40df      	lsrs	r7, r3
 8001e02:	003b      	movs	r3, r7
 8001e04:	2e20      	cmp	r6, #32
 8001e06:	d005      	beq.n	8001e14 <__aeabi_dsub+0x598>
 8001e08:	2740      	movs	r7, #64	; 0x40
 8001e0a:	1bbf      	subs	r7, r7, r6
 8001e0c:	4666      	mov	r6, ip
 8001e0e:	40be      	lsls	r6, r7
 8001e10:	4332      	orrs	r2, r6
 8001e12:	4690      	mov	r8, r2
 8001e14:	4646      	mov	r6, r8
 8001e16:	1e72      	subs	r2, r6, #1
 8001e18:	4196      	sbcs	r6, r2
 8001e1a:	4333      	orrs	r3, r6
 8001e1c:	e5ef      	b.n	80019fe <__aeabi_dsub+0x182>
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <__aeabi_dsub+0x688>)
 8001e20:	429f      	cmp	r7, r3
 8001e22:	d0cb      	beq.n	8001dbc <__aeabi_dsub+0x540>
 8001e24:	2580      	movs	r5, #128	; 0x80
 8001e26:	042d      	lsls	r5, r5, #16
 8001e28:	4273      	negs	r3, r6
 8001e2a:	4329      	orrs	r1, r5
 8001e2c:	e7a8      	b.n	8001d80 <__aeabi_dsub+0x504>
 8001e2e:	4308      	orrs	r0, r1
 8001e30:	1e41      	subs	r1, r0, #1
 8001e32:	4188      	sbcs	r0, r1
 8001e34:	e6a2      	b.n	8001b7c <__aeabi_dsub+0x300>
 8001e36:	2f00      	cmp	r7, #0
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x5c0>
 8001e3a:	e63c      	b.n	8001ab6 <__aeabi_dsub+0x23a>
 8001e3c:	4663      	mov	r3, ip
 8001e3e:	1a86      	subs	r6, r0, r2
 8001e40:	1acf      	subs	r7, r1, r3
 8001e42:	42b0      	cmp	r0, r6
 8001e44:	419b      	sbcs	r3, r3
 8001e46:	425b      	negs	r3, r3
 8001e48:	1afb      	subs	r3, r7, r3
 8001e4a:	4698      	mov	r8, r3
 8001e4c:	021b      	lsls	r3, r3, #8
 8001e4e:	d54e      	bpl.n	8001eee <__aeabi_dsub+0x672>
 8001e50:	1a16      	subs	r6, r2, r0
 8001e52:	4663      	mov	r3, ip
 8001e54:	42b2      	cmp	r2, r6
 8001e56:	4192      	sbcs	r2, r2
 8001e58:	1a59      	subs	r1, r3, r1
 8001e5a:	4252      	negs	r2, r2
 8001e5c:	1a89      	subs	r1, r1, r2
 8001e5e:	465c      	mov	r4, fp
 8001e60:	2200      	movs	r2, #0
 8001e62:	e57b      	b.n	800195c <__aeabi_dsub+0xe0>
 8001e64:	4301      	orrs	r1, r0
 8001e66:	000e      	movs	r6, r1
 8001e68:	1e71      	subs	r1, r6, #1
 8001e6a:	418e      	sbcs	r6, r1
 8001e6c:	e79f      	b.n	8001dae <__aeabi_dsub+0x532>
 8001e6e:	001d      	movs	r5, r3
 8001e70:	000e      	movs	r6, r1
 8001e72:	3d20      	subs	r5, #32
 8001e74:	40ee      	lsrs	r6, r5
 8001e76:	46b0      	mov	r8, r6
 8001e78:	2b20      	cmp	r3, #32
 8001e7a:	d004      	beq.n	8001e86 <__aeabi_dsub+0x60a>
 8001e7c:	2540      	movs	r5, #64	; 0x40
 8001e7e:	1aeb      	subs	r3, r5, r3
 8001e80:	4099      	lsls	r1, r3
 8001e82:	4308      	orrs	r0, r1
 8001e84:	4681      	mov	r9, r0
 8001e86:	4648      	mov	r0, r9
 8001e88:	4643      	mov	r3, r8
 8001e8a:	1e41      	subs	r1, r0, #1
 8001e8c:	4188      	sbcs	r0, r1
 8001e8e:	4318      	orrs	r0, r3
 8001e90:	e674      	b.n	8001b7c <__aeabi_dsub+0x300>
 8001e92:	2200      	movs	r2, #0
 8001e94:	2400      	movs	r4, #0
 8001e96:	e617      	b.n	8001ac8 <__aeabi_dsub+0x24c>
 8001e98:	1a16      	subs	r6, r2, r0
 8001e9a:	4663      	mov	r3, ip
 8001e9c:	42b2      	cmp	r2, r6
 8001e9e:	4192      	sbcs	r2, r2
 8001ea0:	1a59      	subs	r1, r3, r1
 8001ea2:	4252      	negs	r2, r2
 8001ea4:	1a89      	subs	r1, r1, r2
 8001ea6:	003d      	movs	r5, r7
 8001ea8:	e525      	b.n	80018f6 <__aeabi_dsub+0x7a>
 8001eaa:	4661      	mov	r1, ip
 8001eac:	4691      	mov	r9, r2
 8001eae:	4d15      	ldr	r5, [pc, #84]	; (8001f04 <__aeabi_dsub+0x688>)
 8001eb0:	e601      	b.n	8001ab6 <__aeabi_dsub+0x23a>
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	2400      	movs	r4, #0
 8001eb6:	0312      	lsls	r2, r2, #12
 8001eb8:	e679      	b.n	8001bae <__aeabi_dsub+0x332>
 8001eba:	001d      	movs	r5, r3
 8001ebc:	000e      	movs	r6, r1
 8001ebe:	3d20      	subs	r5, #32
 8001ec0:	40ee      	lsrs	r6, r5
 8001ec2:	46b0      	mov	r8, r6
 8001ec4:	2b20      	cmp	r3, #32
 8001ec6:	d004      	beq.n	8001ed2 <__aeabi_dsub+0x656>
 8001ec8:	2540      	movs	r5, #64	; 0x40
 8001eca:	1aeb      	subs	r3, r5, r3
 8001ecc:	4099      	lsls	r1, r3
 8001ece:	4308      	orrs	r0, r1
 8001ed0:	4681      	mov	r9, r0
 8001ed2:	464e      	mov	r6, r9
 8001ed4:	4643      	mov	r3, r8
 8001ed6:	1e71      	subs	r1, r6, #1
 8001ed8:	418e      	sbcs	r6, r1
 8001eda:	431e      	orrs	r6, r3
 8001edc:	e767      	b.n	8001dae <__aeabi_dsub+0x532>
 8001ede:	1886      	adds	r6, r0, r2
 8001ee0:	4296      	cmp	r6, r2
 8001ee2:	419b      	sbcs	r3, r3
 8001ee4:	4461      	add	r1, ip
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	18c9      	adds	r1, r1, r3
 8001eea:	003d      	movs	r5, r7
 8001eec:	e58c      	b.n	8001a08 <__aeabi_dsub+0x18c>
 8001eee:	4647      	mov	r7, r8
 8001ef0:	4337      	orrs	r7, r6
 8001ef2:	d0ce      	beq.n	8001e92 <__aeabi_dsub+0x616>
 8001ef4:	2207      	movs	r2, #7
 8001ef6:	4641      	mov	r1, r8
 8001ef8:	4032      	ands	r2, r6
 8001efa:	e649      	b.n	8001b90 <__aeabi_dsub+0x314>
 8001efc:	2700      	movs	r7, #0
 8001efe:	003a      	movs	r2, r7
 8001f00:	e5e6      	b.n	8001ad0 <__aeabi_dsub+0x254>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff
 8001f08:	ff7fffff 	.word	0xff7fffff

08001f0c <__aeabi_dcmpun>:
 8001f0c:	b570      	push	{r4, r5, r6, lr}
 8001f0e:	4e0c      	ldr	r6, [pc, #48]	; (8001f40 <__aeabi_dcmpun+0x34>)
 8001f10:	030d      	lsls	r5, r1, #12
 8001f12:	031c      	lsls	r4, r3, #12
 8001f14:	0049      	lsls	r1, r1, #1
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	0b2d      	lsrs	r5, r5, #12
 8001f1a:	0d49      	lsrs	r1, r1, #21
 8001f1c:	0b24      	lsrs	r4, r4, #12
 8001f1e:	0d5b      	lsrs	r3, r3, #21
 8001f20:	42b1      	cmp	r1, r6
 8001f22:	d008      	beq.n	8001f36 <__aeabi_dcmpun+0x2a>
 8001f24:	4906      	ldr	r1, [pc, #24]	; (8001f40 <__aeabi_dcmpun+0x34>)
 8001f26:	2000      	movs	r0, #0
 8001f28:	428b      	cmp	r3, r1
 8001f2a:	d103      	bne.n	8001f34 <__aeabi_dcmpun+0x28>
 8001f2c:	4314      	orrs	r4, r2
 8001f2e:	0020      	movs	r0, r4
 8001f30:	1e44      	subs	r4, r0, #1
 8001f32:	41a0      	sbcs	r0, r4
 8001f34:	bd70      	pop	{r4, r5, r6, pc}
 8001f36:	4305      	orrs	r5, r0
 8001f38:	2001      	movs	r0, #1
 8001f3a:	2d00      	cmp	r5, #0
 8001f3c:	d1fa      	bne.n	8001f34 <__aeabi_dcmpun+0x28>
 8001f3e:	e7f1      	b.n	8001f24 <__aeabi_dcmpun+0x18>
 8001f40:	000007ff 	.word	0x000007ff

08001f44 <__aeabi_d2iz>:
 8001f44:	b530      	push	{r4, r5, lr}
 8001f46:	4d14      	ldr	r5, [pc, #80]	; (8001f98 <__aeabi_d2iz+0x54>)
 8001f48:	030a      	lsls	r2, r1, #12
 8001f4a:	004b      	lsls	r3, r1, #1
 8001f4c:	0b12      	lsrs	r2, r2, #12
 8001f4e:	0d5b      	lsrs	r3, r3, #21
 8001f50:	0fc9      	lsrs	r1, r1, #31
 8001f52:	2400      	movs	r4, #0
 8001f54:	42ab      	cmp	r3, r5
 8001f56:	dd11      	ble.n	8001f7c <__aeabi_d2iz+0x38>
 8001f58:	4c10      	ldr	r4, [pc, #64]	; (8001f9c <__aeabi_d2iz+0x58>)
 8001f5a:	42a3      	cmp	r3, r4
 8001f5c:	dc10      	bgt.n	8001f80 <__aeabi_d2iz+0x3c>
 8001f5e:	2480      	movs	r4, #128	; 0x80
 8001f60:	0364      	lsls	r4, r4, #13
 8001f62:	4322      	orrs	r2, r4
 8001f64:	4c0e      	ldr	r4, [pc, #56]	; (8001fa0 <__aeabi_d2iz+0x5c>)
 8001f66:	1ae4      	subs	r4, r4, r3
 8001f68:	2c1f      	cmp	r4, #31
 8001f6a:	dd0c      	ble.n	8001f86 <__aeabi_d2iz+0x42>
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <__aeabi_d2iz+0x60>)
 8001f6e:	1ac3      	subs	r3, r0, r3
 8001f70:	40da      	lsrs	r2, r3
 8001f72:	0013      	movs	r3, r2
 8001f74:	425c      	negs	r4, r3
 8001f76:	2900      	cmp	r1, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_d2iz+0x38>
 8001f7a:	001c      	movs	r4, r3
 8001f7c:	0020      	movs	r0, r4
 8001f7e:	bd30      	pop	{r4, r5, pc}
 8001f80:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <__aeabi_d2iz+0x64>)
 8001f82:	18cc      	adds	r4, r1, r3
 8001f84:	e7fa      	b.n	8001f7c <__aeabi_d2iz+0x38>
 8001f86:	4d09      	ldr	r5, [pc, #36]	; (8001fac <__aeabi_d2iz+0x68>)
 8001f88:	40e0      	lsrs	r0, r4
 8001f8a:	46ac      	mov	ip, r5
 8001f8c:	4463      	add	r3, ip
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	0013      	movs	r3, r2
 8001f92:	4303      	orrs	r3, r0
 8001f94:	e7ee      	b.n	8001f74 <__aeabi_d2iz+0x30>
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	000003fe 	.word	0x000003fe
 8001f9c:	0000041d 	.word	0x0000041d
 8001fa0:	00000433 	.word	0x00000433
 8001fa4:	00000413 	.word	0x00000413
 8001fa8:	7fffffff 	.word	0x7fffffff
 8001fac:	fffffbed 	.word	0xfffffbed

08001fb0 <__aeabi_i2d>:
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	d02d      	beq.n	8002012 <__aeabi_i2d+0x62>
 8001fb6:	17c3      	asrs	r3, r0, #31
 8001fb8:	18c5      	adds	r5, r0, r3
 8001fba:	405d      	eors	r5, r3
 8001fbc:	0fc4      	lsrs	r4, r0, #31
 8001fbe:	0028      	movs	r0, r5
 8001fc0:	f000 f938 	bl	8002234 <__clzsi2>
 8001fc4:	4b15      	ldr	r3, [pc, #84]	; (800201c <__aeabi_i2d+0x6c>)
 8001fc6:	1a1b      	subs	r3, r3, r0
 8001fc8:	055b      	lsls	r3, r3, #21
 8001fca:	0d5b      	lsrs	r3, r3, #21
 8001fcc:	280a      	cmp	r0, #10
 8001fce:	dd15      	ble.n	8001ffc <__aeabi_i2d+0x4c>
 8001fd0:	380b      	subs	r0, #11
 8001fd2:	4085      	lsls	r5, r0
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	032d      	lsls	r5, r5, #12
 8001fd8:	0b2d      	lsrs	r5, r5, #12
 8001fda:	2100      	movs	r1, #0
 8001fdc:	0010      	movs	r0, r2
 8001fde:	032d      	lsls	r5, r5, #12
 8001fe0:	0d0a      	lsrs	r2, r1, #20
 8001fe2:	0b2d      	lsrs	r5, r5, #12
 8001fe4:	0512      	lsls	r2, r2, #20
 8001fe6:	432a      	orrs	r2, r5
 8001fe8:	4d0d      	ldr	r5, [pc, #52]	; (8002020 <__aeabi_i2d+0x70>)
 8001fea:	051b      	lsls	r3, r3, #20
 8001fec:	402a      	ands	r2, r5
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	07e4      	lsls	r4, r4, #31
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	4323      	orrs	r3, r4
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	0002      	movs	r2, r0
 8001ffe:	0029      	movs	r1, r5
 8002000:	3215      	adds	r2, #21
 8002002:	4091      	lsls	r1, r2
 8002004:	000a      	movs	r2, r1
 8002006:	210b      	movs	r1, #11
 8002008:	1a08      	subs	r0, r1, r0
 800200a:	40c5      	lsrs	r5, r0
 800200c:	032d      	lsls	r5, r5, #12
 800200e:	0b2d      	lsrs	r5, r5, #12
 8002010:	e7e3      	b.n	8001fda <__aeabi_i2d+0x2a>
 8002012:	2400      	movs	r4, #0
 8002014:	2300      	movs	r3, #0
 8002016:	2500      	movs	r5, #0
 8002018:	2200      	movs	r2, #0
 800201a:	e7de      	b.n	8001fda <__aeabi_i2d+0x2a>
 800201c:	0000041e 	.word	0x0000041e
 8002020:	800fffff 	.word	0x800fffff

08002024 <__aeabi_ui2d>:
 8002024:	b510      	push	{r4, lr}
 8002026:	1e04      	subs	r4, r0, #0
 8002028:	d025      	beq.n	8002076 <__aeabi_ui2d+0x52>
 800202a:	f000 f903 	bl	8002234 <__clzsi2>
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <__aeabi_ui2d+0x5c>)
 8002030:	1a1b      	subs	r3, r3, r0
 8002032:	055b      	lsls	r3, r3, #21
 8002034:	0d5b      	lsrs	r3, r3, #21
 8002036:	280a      	cmp	r0, #10
 8002038:	dd12      	ble.n	8002060 <__aeabi_ui2d+0x3c>
 800203a:	380b      	subs	r0, #11
 800203c:	4084      	lsls	r4, r0
 800203e:	2200      	movs	r2, #0
 8002040:	0324      	lsls	r4, r4, #12
 8002042:	0b24      	lsrs	r4, r4, #12
 8002044:	2100      	movs	r1, #0
 8002046:	0010      	movs	r0, r2
 8002048:	0324      	lsls	r4, r4, #12
 800204a:	0d0a      	lsrs	r2, r1, #20
 800204c:	0b24      	lsrs	r4, r4, #12
 800204e:	0512      	lsls	r2, r2, #20
 8002050:	4322      	orrs	r2, r4
 8002052:	4c0c      	ldr	r4, [pc, #48]	; (8002084 <__aeabi_ui2d+0x60>)
 8002054:	051b      	lsls	r3, r3, #20
 8002056:	4022      	ands	r2, r4
 8002058:	4313      	orrs	r3, r2
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	0859      	lsrs	r1, r3, #1
 800205e:	bd10      	pop	{r4, pc}
 8002060:	0002      	movs	r2, r0
 8002062:	0021      	movs	r1, r4
 8002064:	3215      	adds	r2, #21
 8002066:	4091      	lsls	r1, r2
 8002068:	000a      	movs	r2, r1
 800206a:	210b      	movs	r1, #11
 800206c:	1a08      	subs	r0, r1, r0
 800206e:	40c4      	lsrs	r4, r0
 8002070:	0324      	lsls	r4, r4, #12
 8002072:	0b24      	lsrs	r4, r4, #12
 8002074:	e7e6      	b.n	8002044 <__aeabi_ui2d+0x20>
 8002076:	2300      	movs	r3, #0
 8002078:	2400      	movs	r4, #0
 800207a:	2200      	movs	r2, #0
 800207c:	e7e2      	b.n	8002044 <__aeabi_ui2d+0x20>
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	0000041e 	.word	0x0000041e
 8002084:	800fffff 	.word	0x800fffff

08002088 <__aeabi_f2d>:
 8002088:	0041      	lsls	r1, r0, #1
 800208a:	0e09      	lsrs	r1, r1, #24
 800208c:	1c4b      	adds	r3, r1, #1
 800208e:	b570      	push	{r4, r5, r6, lr}
 8002090:	b2db      	uxtb	r3, r3
 8002092:	0246      	lsls	r6, r0, #9
 8002094:	0a75      	lsrs	r5, r6, #9
 8002096:	0fc4      	lsrs	r4, r0, #31
 8002098:	2b01      	cmp	r3, #1
 800209a:	dd14      	ble.n	80020c6 <__aeabi_f2d+0x3e>
 800209c:	23e0      	movs	r3, #224	; 0xe0
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	076d      	lsls	r5, r5, #29
 80020a2:	0b36      	lsrs	r6, r6, #12
 80020a4:	18cb      	adds	r3, r1, r3
 80020a6:	2100      	movs	r1, #0
 80020a8:	0d0a      	lsrs	r2, r1, #20
 80020aa:	0028      	movs	r0, r5
 80020ac:	0512      	lsls	r2, r2, #20
 80020ae:	4d1c      	ldr	r5, [pc, #112]	; (8002120 <__aeabi_f2d+0x98>)
 80020b0:	4332      	orrs	r2, r6
 80020b2:	055b      	lsls	r3, r3, #21
 80020b4:	402a      	ands	r2, r5
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	4313      	orrs	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	07e4      	lsls	r4, r4, #31
 80020be:	085b      	lsrs	r3, r3, #1
 80020c0:	4323      	orrs	r3, r4
 80020c2:	0019      	movs	r1, r3
 80020c4:	bd70      	pop	{r4, r5, r6, pc}
 80020c6:	2900      	cmp	r1, #0
 80020c8:	d114      	bne.n	80020f4 <__aeabi_f2d+0x6c>
 80020ca:	2d00      	cmp	r5, #0
 80020cc:	d01e      	beq.n	800210c <__aeabi_f2d+0x84>
 80020ce:	0028      	movs	r0, r5
 80020d0:	f000 f8b0 	bl	8002234 <__clzsi2>
 80020d4:	280a      	cmp	r0, #10
 80020d6:	dc1c      	bgt.n	8002112 <__aeabi_f2d+0x8a>
 80020d8:	230b      	movs	r3, #11
 80020da:	002a      	movs	r2, r5
 80020dc:	1a1b      	subs	r3, r3, r0
 80020de:	40da      	lsrs	r2, r3
 80020e0:	0003      	movs	r3, r0
 80020e2:	3315      	adds	r3, #21
 80020e4:	409d      	lsls	r5, r3
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <__aeabi_f2d+0x9c>)
 80020e8:	0312      	lsls	r2, r2, #12
 80020ea:	1a1b      	subs	r3, r3, r0
 80020ec:	055b      	lsls	r3, r3, #21
 80020ee:	0b16      	lsrs	r6, r2, #12
 80020f0:	0d5b      	lsrs	r3, r3, #21
 80020f2:	e7d8      	b.n	80020a6 <__aeabi_f2d+0x1e>
 80020f4:	2d00      	cmp	r5, #0
 80020f6:	d006      	beq.n	8002106 <__aeabi_f2d+0x7e>
 80020f8:	0b32      	lsrs	r2, r6, #12
 80020fa:	2680      	movs	r6, #128	; 0x80
 80020fc:	0336      	lsls	r6, r6, #12
 80020fe:	076d      	lsls	r5, r5, #29
 8002100:	4316      	orrs	r6, r2
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <__aeabi_f2d+0xa0>)
 8002104:	e7cf      	b.n	80020a6 <__aeabi_f2d+0x1e>
 8002106:	4b08      	ldr	r3, [pc, #32]	; (8002128 <__aeabi_f2d+0xa0>)
 8002108:	2600      	movs	r6, #0
 800210a:	e7cc      	b.n	80020a6 <__aeabi_f2d+0x1e>
 800210c:	2300      	movs	r3, #0
 800210e:	2600      	movs	r6, #0
 8002110:	e7c9      	b.n	80020a6 <__aeabi_f2d+0x1e>
 8002112:	0003      	movs	r3, r0
 8002114:	002a      	movs	r2, r5
 8002116:	3b0b      	subs	r3, #11
 8002118:	409a      	lsls	r2, r3
 800211a:	2500      	movs	r5, #0
 800211c:	e7e3      	b.n	80020e6 <__aeabi_f2d+0x5e>
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	800fffff 	.word	0x800fffff
 8002124:	00000389 	.word	0x00000389
 8002128:	000007ff 	.word	0x000007ff

0800212c <__aeabi_d2f>:
 800212c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800212e:	004c      	lsls	r4, r1, #1
 8002130:	0d64      	lsrs	r4, r4, #21
 8002132:	030b      	lsls	r3, r1, #12
 8002134:	1c62      	adds	r2, r4, #1
 8002136:	0a5b      	lsrs	r3, r3, #9
 8002138:	0f46      	lsrs	r6, r0, #29
 800213a:	0552      	lsls	r2, r2, #21
 800213c:	0fc9      	lsrs	r1, r1, #31
 800213e:	431e      	orrs	r6, r3
 8002140:	00c5      	lsls	r5, r0, #3
 8002142:	0d52      	lsrs	r2, r2, #21
 8002144:	2a01      	cmp	r2, #1
 8002146:	dd29      	ble.n	800219c <__aeabi_d2f+0x70>
 8002148:	4b37      	ldr	r3, [pc, #220]	; (8002228 <__aeabi_d2f+0xfc>)
 800214a:	18e7      	adds	r7, r4, r3
 800214c:	2ffe      	cmp	r7, #254	; 0xfe
 800214e:	dc1c      	bgt.n	800218a <__aeabi_d2f+0x5e>
 8002150:	2f00      	cmp	r7, #0
 8002152:	dd3b      	ble.n	80021cc <__aeabi_d2f+0xa0>
 8002154:	0180      	lsls	r0, r0, #6
 8002156:	1e43      	subs	r3, r0, #1
 8002158:	4198      	sbcs	r0, r3
 800215a:	2207      	movs	r2, #7
 800215c:	00f3      	lsls	r3, r6, #3
 800215e:	0f6d      	lsrs	r5, r5, #29
 8002160:	4303      	orrs	r3, r0
 8002162:	432b      	orrs	r3, r5
 8002164:	401a      	ands	r2, r3
 8002166:	2a00      	cmp	r2, #0
 8002168:	d004      	beq.n	8002174 <__aeabi_d2f+0x48>
 800216a:	220f      	movs	r2, #15
 800216c:	401a      	ands	r2, r3
 800216e:	2a04      	cmp	r2, #4
 8002170:	d000      	beq.n	8002174 <__aeabi_d2f+0x48>
 8002172:	3304      	adds	r3, #4
 8002174:	2280      	movs	r2, #128	; 0x80
 8002176:	04d2      	lsls	r2, r2, #19
 8002178:	401a      	ands	r2, r3
 800217a:	d024      	beq.n	80021c6 <__aeabi_d2f+0x9a>
 800217c:	3701      	adds	r7, #1
 800217e:	b2fa      	uxtb	r2, r7
 8002180:	2fff      	cmp	r7, #255	; 0xff
 8002182:	d002      	beq.n	800218a <__aeabi_d2f+0x5e>
 8002184:	019b      	lsls	r3, r3, #6
 8002186:	0a58      	lsrs	r0, r3, #9
 8002188:	e001      	b.n	800218e <__aeabi_d2f+0x62>
 800218a:	22ff      	movs	r2, #255	; 0xff
 800218c:	2000      	movs	r0, #0
 800218e:	0240      	lsls	r0, r0, #9
 8002190:	05d2      	lsls	r2, r2, #23
 8002192:	0a40      	lsrs	r0, r0, #9
 8002194:	07c9      	lsls	r1, r1, #31
 8002196:	4310      	orrs	r0, r2
 8002198:	4308      	orrs	r0, r1
 800219a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800219c:	4335      	orrs	r5, r6
 800219e:	2c00      	cmp	r4, #0
 80021a0:	d104      	bne.n	80021ac <__aeabi_d2f+0x80>
 80021a2:	2d00      	cmp	r5, #0
 80021a4:	d10a      	bne.n	80021bc <__aeabi_d2f+0x90>
 80021a6:	2200      	movs	r2, #0
 80021a8:	2000      	movs	r0, #0
 80021aa:	e7f0      	b.n	800218e <__aeabi_d2f+0x62>
 80021ac:	2d00      	cmp	r5, #0
 80021ae:	d0ec      	beq.n	800218a <__aeabi_d2f+0x5e>
 80021b0:	2080      	movs	r0, #128	; 0x80
 80021b2:	03c0      	lsls	r0, r0, #15
 80021b4:	4330      	orrs	r0, r6
 80021b6:	22ff      	movs	r2, #255	; 0xff
 80021b8:	e7e9      	b.n	800218e <__aeabi_d2f+0x62>
 80021ba:	2400      	movs	r4, #0
 80021bc:	2300      	movs	r3, #0
 80021be:	025b      	lsls	r3, r3, #9
 80021c0:	0a58      	lsrs	r0, r3, #9
 80021c2:	b2e2      	uxtb	r2, r4
 80021c4:	e7e3      	b.n	800218e <__aeabi_d2f+0x62>
 80021c6:	08db      	lsrs	r3, r3, #3
 80021c8:	003c      	movs	r4, r7
 80021ca:	e7f8      	b.n	80021be <__aeabi_d2f+0x92>
 80021cc:	003b      	movs	r3, r7
 80021ce:	3317      	adds	r3, #23
 80021d0:	dbf3      	blt.n	80021ba <__aeabi_d2f+0x8e>
 80021d2:	2380      	movs	r3, #128	; 0x80
 80021d4:	041b      	lsls	r3, r3, #16
 80021d6:	4333      	orrs	r3, r6
 80021d8:	261e      	movs	r6, #30
 80021da:	1bf6      	subs	r6, r6, r7
 80021dc:	2e1f      	cmp	r6, #31
 80021de:	dd14      	ble.n	800220a <__aeabi_d2f+0xde>
 80021e0:	2202      	movs	r2, #2
 80021e2:	4252      	negs	r2, r2
 80021e4:	1bd7      	subs	r7, r2, r7
 80021e6:	001a      	movs	r2, r3
 80021e8:	40fa      	lsrs	r2, r7
 80021ea:	0017      	movs	r7, r2
 80021ec:	2e20      	cmp	r6, #32
 80021ee:	d004      	beq.n	80021fa <__aeabi_d2f+0xce>
 80021f0:	4a0e      	ldr	r2, [pc, #56]	; (800222c <__aeabi_d2f+0x100>)
 80021f2:	4694      	mov	ip, r2
 80021f4:	4464      	add	r4, ip
 80021f6:	40a3      	lsls	r3, r4
 80021f8:	431d      	orrs	r5, r3
 80021fa:	002b      	movs	r3, r5
 80021fc:	1e5d      	subs	r5, r3, #1
 80021fe:	41ab      	sbcs	r3, r5
 8002200:	2207      	movs	r2, #7
 8002202:	433b      	orrs	r3, r7
 8002204:	401a      	ands	r2, r3
 8002206:	2700      	movs	r7, #0
 8002208:	e7ad      	b.n	8002166 <__aeabi_d2f+0x3a>
 800220a:	4a09      	ldr	r2, [pc, #36]	; (8002230 <__aeabi_d2f+0x104>)
 800220c:	0028      	movs	r0, r5
 800220e:	18a2      	adds	r2, r4, r2
 8002210:	4095      	lsls	r5, r2
 8002212:	4093      	lsls	r3, r2
 8002214:	1e6c      	subs	r4, r5, #1
 8002216:	41a5      	sbcs	r5, r4
 8002218:	40f0      	lsrs	r0, r6
 800221a:	2207      	movs	r2, #7
 800221c:	432b      	orrs	r3, r5
 800221e:	4303      	orrs	r3, r0
 8002220:	401a      	ands	r2, r3
 8002222:	2700      	movs	r7, #0
 8002224:	e79f      	b.n	8002166 <__aeabi_d2f+0x3a>
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	fffffc80 	.word	0xfffffc80
 800222c:	fffffca2 	.word	0xfffffca2
 8002230:	fffffc82 	.word	0xfffffc82

08002234 <__clzsi2>:
 8002234:	211c      	movs	r1, #28
 8002236:	2301      	movs	r3, #1
 8002238:	041b      	lsls	r3, r3, #16
 800223a:	4298      	cmp	r0, r3
 800223c:	d301      	bcc.n	8002242 <__clzsi2+0xe>
 800223e:	0c00      	lsrs	r0, r0, #16
 8002240:	3910      	subs	r1, #16
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	4298      	cmp	r0, r3
 8002246:	d301      	bcc.n	800224c <__clzsi2+0x18>
 8002248:	0a00      	lsrs	r0, r0, #8
 800224a:	3908      	subs	r1, #8
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	4298      	cmp	r0, r3
 8002250:	d301      	bcc.n	8002256 <__clzsi2+0x22>
 8002252:	0900      	lsrs	r0, r0, #4
 8002254:	3904      	subs	r1, #4
 8002256:	a202      	add	r2, pc, #8	; (adr r2, 8002260 <__clzsi2+0x2c>)
 8002258:	5c10      	ldrb	r0, [r2, r0]
 800225a:	1840      	adds	r0, r0, r1
 800225c:	4770      	bx	lr
 800225e:	46c0      	nop			; (mov r8, r8)
 8002260:	02020304 	.word	0x02020304
 8002264:	01010101 	.word	0x01010101
	...

08002270 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002276:	1dfb      	adds	r3, r7, #7
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <HAL_Init+0x3c>)
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	4b0a      	ldr	r3, [pc, #40]	; (80022ac <HAL_Init+0x3c>)
 8002282:	2180      	movs	r1, #128	; 0x80
 8002284:	0049      	lsls	r1, r1, #1
 8002286:	430a      	orrs	r2, r1
 8002288:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800228a:	2000      	movs	r0, #0
 800228c:	f000 f810 	bl	80022b0 <HAL_InitTick>
 8002290:	1e03      	subs	r3, r0, #0
 8002292:	d003      	beq.n	800229c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002294:	1dfb      	adds	r3, r7, #7
 8002296:	2201      	movs	r2, #1
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	e001      	b.n	80022a0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800229c:	f003 fdb4 	bl	8005e08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022a0:	1dfb      	adds	r3, r7, #7
 80022a2:	781b      	ldrb	r3, [r3, #0]
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b002      	add	sp, #8
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40022000 	.word	0x40022000

080022b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022b8:	230f      	movs	r3, #15
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	2200      	movs	r2, #0
 80022be:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_InitTick+0x88>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d02b      	beq.n	8002320 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80022c8:	4b1c      	ldr	r3, [pc, #112]	; (800233c <HAL_InitTick+0x8c>)
 80022ca:	681c      	ldr	r4, [r3, #0]
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <HAL_InitTick+0x88>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	0019      	movs	r1, r3
 80022d2:	23fa      	movs	r3, #250	; 0xfa
 80022d4:	0098      	lsls	r0, r3, #2
 80022d6:	f7fd ff27 	bl	8000128 <__udivsi3>
 80022da:	0003      	movs	r3, r0
 80022dc:	0019      	movs	r1, r3
 80022de:	0020      	movs	r0, r4
 80022e0:	f7fd ff22 	bl	8000128 <__udivsi3>
 80022e4:	0003      	movs	r3, r0
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 fdd9 	bl	8002e9e <HAL_SYSTICK_Config>
 80022ec:	1e03      	subs	r3, r0, #0
 80022ee:	d112      	bne.n	8002316 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d80a      	bhi.n	800230c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	2301      	movs	r3, #1
 80022fa:	425b      	negs	r3, r3
 80022fc:	2200      	movs	r2, #0
 80022fe:	0018      	movs	r0, r3
 8002300:	f000 fda8 	bl	8002e54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002304:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <HAL_InitTick+0x90>)
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	e00d      	b.n	8002328 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800230c:	230f      	movs	r3, #15
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	e008      	b.n	8002328 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002316:	230f      	movs	r3, #15
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
 800231e:	e003      	b.n	8002328 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002320:	230f      	movs	r3, #15
 8002322:	18fb      	adds	r3, r7, r3
 8002324:	2201      	movs	r2, #1
 8002326:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002328:	230f      	movs	r3, #15
 800232a:	18fb      	adds	r3, r7, r3
 800232c:	781b      	ldrb	r3, [r3, #0]
}
 800232e:	0018      	movs	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	b005      	add	sp, #20
 8002334:	bd90      	pop	{r4, r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	20000004 	.word	0x20000004
 800233c:	20000008 	.word	0x20000008
 8002340:	20000000 	.word	0x20000000

08002344 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002348:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_IncTick+0x1c>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	001a      	movs	r2, r3
 800234e:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_IncTick+0x20>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	18d2      	adds	r2, r2, r3
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <HAL_IncTick+0x20>)
 8002356:	601a      	str	r2, [r3, #0]
}
 8002358:	46c0      	nop			; (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			; (mov r8, r8)
 8002360:	20000004 	.word	0x20000004
 8002364:	20000420 	.word	0x20000420

08002368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  return uwTick;
 800236c:	4b02      	ldr	r3, [pc, #8]	; (8002378 <HAL_GetTick+0x10>)
 800236e:	681b      	ldr	r3, [r3, #0]
}
 8002370:	0018      	movs	r0, r3
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	46c0      	nop			; (mov r8, r8)
 8002378:	20000420 	.word	0x20000420

0800237c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002384:	f7ff fff0 	bl	8002368 <HAL_GetTick>
 8002388:	0003      	movs	r3, r0
 800238a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3301      	adds	r3, #1
 8002394:	d005      	beq.n	80023a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_Delay+0x40>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	001a      	movs	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	189b      	adds	r3, r3, r2
 80023a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	f7ff ffe0 	bl	8002368 <HAL_GetTick>
 80023a8:	0002      	movs	r2, r0
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	68fa      	ldr	r2, [r7, #12]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d8f7      	bhi.n	80023a4 <HAL_Delay+0x28>
  {
  }
}
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b004      	add	sp, #16
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000004 	.word	0x20000004

080023c0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80023d0:	401a      	ands	r2, r3
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	46bd      	mov	sp, r7
 80023de:	b002      	add	sp, #8
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			; (mov r8, r8)
 80023e4:	fe3fffff 	.word	0xfe3fffff

080023e8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	23e0      	movs	r3, #224	; 0xe0
 80023f6:	045b      	lsls	r3, r3, #17
 80023f8:	4013      	ands	r3, r2
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}

08002402 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	68ba      	ldr	r2, [r7, #8]
 8002414:	2104      	movs	r1, #4
 8002416:	400a      	ands	r2, r1
 8002418:	2107      	movs	r1, #7
 800241a:	4091      	lsls	r1, r2
 800241c:	000a      	movs	r2, r1
 800241e:	43d2      	mvns	r2, r2
 8002420:	401a      	ands	r2, r3
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2104      	movs	r1, #4
 8002426:	400b      	ands	r3, r1
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	4099      	lsls	r1, r3
 800242c:	000b      	movs	r3, r1
 800242e:	431a      	orrs	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002434:	46c0      	nop			; (mov r8, r8)
 8002436:	46bd      	mov	sp, r7
 8002438:	b004      	add	sp, #16
 800243a:	bd80      	pop	{r7, pc}

0800243c <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	68ba      	ldr	r2, [r7, #8]
 800244e:	211f      	movs	r1, #31
 8002450:	400a      	ands	r2, r1
 8002452:	210f      	movs	r1, #15
 8002454:	4091      	lsls	r1, r2
 8002456:	000a      	movs	r2, r1
 8002458:	43d2      	mvns	r2, r2
 800245a:	401a      	ands	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	0e9b      	lsrs	r3, r3, #26
 8002460:	210f      	movs	r1, #15
 8002462:	4019      	ands	r1, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	201f      	movs	r0, #31
 8002468:	4003      	ands	r3, r0
 800246a:	4099      	lsls	r1, r3
 800246c:	000b      	movs	r3, r1
 800246e:	431a      	orrs	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b004      	add	sp, #16
 800247a:	bd80      	pop	{r7, pc}

0800247c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	035b      	lsls	r3, r3, #13
 800248e:	0b5b      	lsrs	r3, r3, #13
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002496:	46c0      	nop			; (mov r8, r8)
 8002498:	46bd      	mov	sp, r7
 800249a:	b002      	add	sp, #8
 800249c:	bd80      	pop	{r7, pc}

0800249e <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	0352      	lsls	r2, r2, #13
 80024b0:	0b52      	lsrs	r2, r2, #13
 80024b2:	43d2      	mvns	r2, r2
 80024b4:	401a      	ands	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	68ba      	ldr	r2, [r7, #8]
 80024d6:	0212      	lsls	r2, r2, #8
 80024d8:	43d2      	mvns	r2, r2
 80024da:	401a      	ands	r2, r3
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	400b      	ands	r3, r1
 80024e4:	4904      	ldr	r1, [pc, #16]	; (80024f8 <LL_ADC_SetChannelSamplingTime+0x34>)
 80024e6:	400b      	ands	r3, r1
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	46bd      	mov	sp, r7
 80024f2:	b004      	add	sp, #16
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	46c0      	nop			; (mov r8, r8)
 80024f8:	07ffff00 	.word	0x07ffff00

080024fc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	4a05      	ldr	r2, [pc, #20]	; (8002520 <LL_ADC_EnableInternalRegulator+0x24>)
 800250a:	4013      	ands	r3, r2
 800250c:	2280      	movs	r2, #128	; 0x80
 800250e:	0552      	lsls	r2, r2, #21
 8002510:	431a      	orrs	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	46bd      	mov	sp, r7
 800251a:	b002      	add	sp, #8
 800251c:	bd80      	pop	{r7, pc}
 800251e:	46c0      	nop			; (mov r8, r8)
 8002520:	6fffffe8 	.word	0x6fffffe8

08002524 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	2380      	movs	r3, #128	; 0x80
 8002532:	055b      	lsls	r3, r3, #21
 8002534:	401a      	ands	r2, r3
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	055b      	lsls	r3, r3, #21
 800253a:	429a      	cmp	r2, r3
 800253c:	d101      	bne.n	8002542 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800253e:	2301      	movs	r3, #1
 8002540:	e000      	b.n	8002544 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002542:	2300      	movs	r3, #0
}
 8002544:	0018      	movs	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	b002      	add	sp, #8
 800254a:	bd80      	pop	{r7, pc}

0800254c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2201      	movs	r2, #1
 800255a:	4013      	ands	r3, r2
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <LL_ADC_IsEnabled+0x18>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <LL_ADC_IsEnabled+0x1a>
 8002564:	2300      	movs	r3, #0
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b002      	add	sp, #8
 800256c:	bd80      	pop	{r7, pc}

0800256e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b082      	sub	sp, #8
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2204      	movs	r2, #4
 800257c:	4013      	ands	r3, r2
 800257e:	2b04      	cmp	r3, #4
 8002580:	d101      	bne.n	8002586 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002586:	2300      	movs	r3, #0
}
 8002588:	0018      	movs	r0, r3
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002598:	231f      	movs	r3, #31
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1ad      	b.n	8002912 <HAL_ADC_Init+0x382>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f003 fc45 	bl	8005e50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2254      	movs	r2, #84	; 0x54
 80025d0:	2100      	movs	r1, #0
 80025d2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	0018      	movs	r0, r3
 80025da:	f7ff ffa3 	bl	8002524 <LL_ADC_IsInternalRegulatorEnabled>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d114      	bne.n	800260c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f7ff ff88 	bl	80024fc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80025ec:	4bcb      	ldr	r3, [pc, #812]	; (800291c <HAL_ADC_Init+0x38c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	49cb      	ldr	r1, [pc, #812]	; (8002920 <HAL_ADC_Init+0x390>)
 80025f2:	0018      	movs	r0, r3
 80025f4:	f7fd fd98 	bl	8000128 <__udivsi3>
 80025f8:	0003      	movs	r3, r0
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025fe:	e002      	b.n	8002606 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	3b01      	subs	r3, #1
 8002604:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f9      	bne.n	8002600 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	0018      	movs	r0, r3
 8002612:	f7ff ff87 	bl	8002524 <LL_ADC_IsInternalRegulatorEnabled>
 8002616:	1e03      	subs	r3, r0, #0
 8002618:	d10f      	bne.n	800263a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	2210      	movs	r2, #16
 8002620:	431a      	orrs	r2, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	2201      	movs	r2, #1
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002632:	231f      	movs	r3, #31
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	0018      	movs	r0, r3
 8002640:	f7ff ff95 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 8002644:	0003      	movs	r3, r0
 8002646:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264c:	2210      	movs	r2, #16
 800264e:	4013      	ands	r3, r2
 8002650:	d000      	beq.n	8002654 <HAL_ADC_Init+0xc4>
 8002652:	e151      	b.n	80028f8 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d000      	beq.n	800265c <HAL_ADC_Init+0xcc>
 800265a:	e14d      	b.n	80028f8 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	4ab0      	ldr	r2, [pc, #704]	; (8002924 <HAL_ADC_Init+0x394>)
 8002662:	4013      	ands	r3, r2
 8002664:	2202      	movs	r2, #2
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0018      	movs	r0, r3
 8002672:	f7ff ff6b 	bl	800254c <LL_ADC_IsEnabled>
 8002676:	1e03      	subs	r3, r0, #0
 8002678:	d151      	bne.n	800271e <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2218      	movs	r2, #24
 8002682:	4393      	bics	r3, r2
 8002684:	0019      	movs	r1, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	0f9b      	lsrs	r3, r3, #30
 8002698:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800269e:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 80026a4:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 80026aa:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 80026b0:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	223c      	movs	r2, #60	; 0x3c
 80026bc:	5c9b      	ldrb	r3, [r3, r2]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d103      	bne.n	80026ca <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2201      	movs	r2, #1
 80026c6:	4313      	orrs	r3, r2
 80026c8:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	4a95      	ldr	r2, [pc, #596]	; (8002928 <HAL_ADC_Init+0x398>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	0019      	movs	r1, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	430a      	orrs	r2, r1
 80026de:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	23c0      	movs	r3, #192	; 0xc0
 80026e6:	061b      	lsls	r3, r3, #24
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d018      	beq.n	800271e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	05db      	lsls	r3, r3, #23
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d012      	beq.n	800271e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	061b      	lsls	r3, r3, #24
 8002700:	429a      	cmp	r2, r3
 8002702:	d00c      	beq.n	800271e <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002704:	4b89      	ldr	r3, [pc, #548]	; (800292c <HAL_ADC_Init+0x39c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a89      	ldr	r2, [pc, #548]	; (8002930 <HAL_ADC_Init+0x3a0>)
 800270a:	4013      	ands	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	23f0      	movs	r3, #240	; 0xf0
 8002714:	039b      	lsls	r3, r3, #14
 8002716:	401a      	ands	r2, r3
 8002718:	4b84      	ldr	r3, [pc, #528]	; (800292c <HAL_ADC_Init+0x39c>)
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7e1b      	ldrb	r3, [r3, #24]
 8002722:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7e5b      	ldrb	r3, [r3, #25]
 8002728:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800272a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	7e9b      	ldrb	r3, [r3, #26]
 8002730:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002732:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <HAL_ADC_Init+0x1b2>
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	015b      	lsls	r3, r3, #5
 8002740:	e000      	b.n	8002744 <HAL_ADC_Init+0x1b4>
 8002742:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002744:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800274a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	2b00      	cmp	r3, #0
 8002752:	da04      	bge.n	800275e <HAL_ADC_Init+0x1ce>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	005b      	lsls	r3, r3, #1
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	e001      	b.n	8002762 <HAL_ADC_Init+0x1d2>
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8002762:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	212c      	movs	r1, #44	; 0x2c
 8002768:	5c5b      	ldrb	r3, [r3, r1]
 800276a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800276c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2220      	movs	r2, #32
 8002778:	5c9b      	ldrb	r3, [r3, r2]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d115      	bne.n	80027aa <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7e9b      	ldrb	r3, [r3, #26]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2280      	movs	r2, #128	; 0x80
 800278a:	0252      	lsls	r2, r2, #9
 800278c:	4313      	orrs	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	e00b      	b.n	80027aa <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	2220      	movs	r2, #32
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	2201      	movs	r2, #1
 80027a4:	431a      	orrs	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027b6:	23e0      	movs	r3, #224	; 0xe0
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80027c0:	4313      	orrs	r3, r2
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	4a59      	ldr	r2, [pc, #356]	; (8002934 <HAL_ADC_Init+0x3a4>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	430a      	orrs	r2, r1
 80027dc:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	4a54      	ldr	r2, [pc, #336]	; (8002938 <HAL_ADC_Init+0x3a8>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	001a      	movs	r2, r3
 80027fe:	2100      	movs	r1, #0
 8002800:	f7ff fdff 	bl	8002402 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280c:	494b      	ldr	r1, [pc, #300]	; (800293c <HAL_ADC_Init+0x3ac>)
 800280e:	001a      	movs	r2, r3
 8002810:	f7ff fdf7 	bl	8002402 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	691b      	ldr	r3, [r3, #16]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d109      	bne.n	8002830 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2110      	movs	r1, #16
 8002828:	4249      	negs	r1, r1
 800282a:	430a      	orrs	r2, r1
 800282c:	629a      	str	r2, [r3, #40]	; 0x28
 800282e:	e03c      	b.n	80028aa <HAL_ADC_Init+0x31a>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	039b      	lsls	r3, r3, #14
 8002838:	429a      	cmp	r2, r3
 800283a:	d136      	bne.n	80028aa <HAL_ADC_Init+0x31a>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	e00c      	b.n	800285c <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	40da      	lsrs	r2, r3
 800284c:	0013      	movs	r3, r2
 800284e:	220f      	movs	r2, #15
 8002850:	4013      	ands	r3, r2
 8002852:	2b0f      	cmp	r3, #15
 8002854:	d006      	beq.n	8002864 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	3301      	adds	r3, #1
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	2b07      	cmp	r3, #7
 8002860:	d9ef      	bls.n	8002842 <HAL_ADC_Init+0x2b2>
 8002862:	e000      	b.n	8002866 <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8002864:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d109      	bne.n	8002880 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2110      	movs	r1, #16
 8002878:	4249      	negs	r1, r1
 800287a:	430a      	orrs	r2, r1
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
 800287e:	e014      	b.n	80028aa <HAL_ADC_Init+0x31a>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	69db      	ldr	r3, [r3, #28]
 800288a:	4a2d      	ldr	r2, [pc, #180]	; (8002940 <HAL_ADC_Init+0x3b0>)
 800288c:	4694      	mov	ip, r2
 800288e:	4463      	add	r3, ip
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	221c      	movs	r2, #28
 8002894:	4013      	ands	r3, r2
 8002896:	2210      	movs	r2, #16
 8002898:	4252      	negs	r2, r2
 800289a:	409a      	lsls	r2, r3
 800289c:	0011      	movs	r1, r2
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a24      	ldr	r2, [pc, #144]	; (8002944 <HAL_ADC_Init+0x3b4>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d10b      	bne.n	80028d2 <HAL_ADC_Init+0x342>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	2203      	movs	r2, #3
 80028c6:	4393      	bics	r3, r2
 80028c8:	2201      	movs	r2, #1
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80028d0:	e01c      	b.n	800290c <HAL_ADC_Init+0x37c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d6:	2212      	movs	r2, #18
 80028d8:	4393      	bics	r3, r2
 80028da:	2210      	movs	r2, #16
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e6:	2201      	movs	r2, #1
 80028e8:	431a      	orrs	r2, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80028ee:	231f      	movs	r3, #31
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	2201      	movs	r2, #1
 80028f4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80028f6:	e009      	b.n	800290c <HAL_ADC_Init+0x37c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fc:	2210      	movs	r2, #16
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002904:	231f      	movs	r3, #31
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800290c:	231f      	movs	r3, #31
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	781b      	ldrb	r3, [r3, #0]
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	b008      	add	sp, #32
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	20000008 	.word	0x20000008
 8002920:	00030d40 	.word	0x00030d40
 8002924:	fffffefd 	.word	0xfffffefd
 8002928:	1ffffc02 	.word	0x1ffffc02
 800292c:	40012708 	.word	0x40012708
 8002930:	ffc3ffff 	.word	0xffc3ffff
 8002934:	fffe0219 	.word	0xfffe0219
 8002938:	dffffc02 	.word	0xdffffc02
 800293c:	07ffff04 	.word	0x07ffff04
 8002940:	3fffffff 	.word	0x3fffffff
 8002944:	833fffe7 	.word	0x833fffe7

08002948 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002952:	2317      	movs	r3, #23
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2254      	movs	r2, #84	; 0x54
 8002962:	5c9b      	ldrb	r3, [r3, r2]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x24>
 8002968:	2302      	movs	r3, #2
 800296a:	e1c2      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x3aa>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2254      	movs	r2, #84	; 0x54
 8002970:	2101      	movs	r1, #1
 8002972:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0018      	movs	r0, r3
 800297a:	f7ff fdf8 	bl	800256e <LL_ADC_REG_IsConversionOngoing>
 800297e:	1e03      	subs	r3, r0, #0
 8002980:	d000      	beq.n	8002984 <HAL_ADC_ConfigChannel+0x3c>
 8002982:	e1a5      	b.n	8002cd0 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d100      	bne.n	800298e <HAL_ADC_ConfigChannel+0x46>
 800298c:	e144      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691a      	ldr	r2, [r3, #16]
 8002992:	2380      	movs	r3, #128	; 0x80
 8002994:	061b      	lsls	r3, r3, #24
 8002996:	429a      	cmp	r2, r3
 8002998:	d004      	beq.n	80029a4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800299e:	4ac2      	ldr	r2, [pc, #776]	; (8002ca8 <HAL_ADC_ConfigChannel+0x360>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d108      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	0019      	movs	r1, r3
 80029ae:	0010      	movs	r0, r2
 80029b0:	f7ff fd64 	bl	800247c <LL_ADC_REG_SetSequencerChAdd>
 80029b4:	e0c9      	b.n	8002b4a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	211f      	movs	r1, #31
 80029c0:	400b      	ands	r3, r1
 80029c2:	210f      	movs	r1, #15
 80029c4:	4099      	lsls	r1, r3
 80029c6:	000b      	movs	r3, r1
 80029c8:	43db      	mvns	r3, r3
 80029ca:	4013      	ands	r3, r2
 80029cc:	0019      	movs	r1, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	035b      	lsls	r3, r3, #13
 80029d4:	0b5b      	lsrs	r3, r3, #13
 80029d6:	d105      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x9c>
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	0e9b      	lsrs	r3, r3, #26
 80029de:	221f      	movs	r2, #31
 80029e0:	4013      	ands	r3, r2
 80029e2:	e098      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2201      	movs	r2, #1
 80029ea:	4013      	ands	r3, r2
 80029ec:	d000      	beq.n	80029f0 <HAL_ADC_ConfigChannel+0xa8>
 80029ee:	e091      	b.n	8002b14 <HAL_ADC_ConfigChannel+0x1cc>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2202      	movs	r2, #2
 80029f6:	4013      	ands	r3, r2
 80029f8:	d000      	beq.n	80029fc <HAL_ADC_ConfigChannel+0xb4>
 80029fa:	e089      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x1c8>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2204      	movs	r2, #4
 8002a02:	4013      	ands	r3, r2
 8002a04:	d000      	beq.n	8002a08 <HAL_ADC_ConfigChannel+0xc0>
 8002a06:	e081      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x1c4>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	4013      	ands	r3, r2
 8002a10:	d000      	beq.n	8002a14 <HAL_ADC_ConfigChannel+0xcc>
 8002a12:	e079      	b.n	8002b08 <HAL_ADC_ConfigChannel+0x1c0>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2210      	movs	r2, #16
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d000      	beq.n	8002a20 <HAL_ADC_ConfigChannel+0xd8>
 8002a1e:	e071      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x1bc>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2220      	movs	r2, #32
 8002a26:	4013      	ands	r3, r2
 8002a28:	d000      	beq.n	8002a2c <HAL_ADC_ConfigChannel+0xe4>
 8002a2a:	e069      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x1b8>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	4013      	ands	r3, r2
 8002a34:	d000      	beq.n	8002a38 <HAL_ADC_ConfigChannel+0xf0>
 8002a36:	e061      	b.n	8002afc <HAL_ADC_ConfigChannel+0x1b4>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d000      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0xfc>
 8002a42:	e059      	b.n	8002af8 <HAL_ADC_ConfigChannel+0x1b0>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2380      	movs	r3, #128	; 0x80
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	d151      	bne.n	8002af4 <HAL_ADC_ConfigChannel+0x1ac>
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d149      	bne.n	8002af0 <HAL_ADC_ConfigChannel+0x1a8>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	2380      	movs	r3, #128	; 0x80
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4013      	ands	r3, r2
 8002a66:	d141      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x1a4>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	4013      	ands	r3, r2
 8002a72:	d139      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1a0>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	015b      	lsls	r3, r3, #5
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d131      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x19c>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	; 0x80
 8002a86:	019b      	lsls	r3, r3, #6
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d129      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x198>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	01db      	lsls	r3, r3, #7
 8002a94:	4013      	ands	r3, r2
 8002a96:	d121      	bne.n	8002adc <HAL_ADC_ConfigChannel+0x194>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	021b      	lsls	r3, r3, #8
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d119      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x190>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	025b      	lsls	r3, r3, #9
 8002aac:	4013      	ands	r3, r2
 8002aae:	d111      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x18c>
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	029b      	lsls	r3, r3, #10
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d109      	bne.n	8002ad0 <HAL_ADC_ConfigChannel+0x188>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	02db      	lsls	r3, r3, #11
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d001      	beq.n	8002acc <HAL_ADC_ConfigChannel+0x184>
 8002ac8:	2312      	movs	r3, #18
 8002aca:	e024      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002acc:	2300      	movs	r3, #0
 8002ace:	e022      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ad0:	2311      	movs	r3, #17
 8002ad2:	e020      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ad4:	2310      	movs	r3, #16
 8002ad6:	e01e      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ad8:	230f      	movs	r3, #15
 8002ada:	e01c      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002adc:	230e      	movs	r3, #14
 8002ade:	e01a      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ae0:	230d      	movs	r3, #13
 8002ae2:	e018      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ae4:	230c      	movs	r3, #12
 8002ae6:	e016      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002ae8:	230b      	movs	r3, #11
 8002aea:	e014      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002aec:	230a      	movs	r3, #10
 8002aee:	e012      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002af0:	2309      	movs	r3, #9
 8002af2:	e010      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002af4:	2308      	movs	r3, #8
 8002af6:	e00e      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002af8:	2307      	movs	r3, #7
 8002afa:	e00c      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002afc:	2306      	movs	r3, #6
 8002afe:	e00a      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002b00:	2305      	movs	r3, #5
 8002b02:	e008      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002b04:	2304      	movs	r3, #4
 8002b06:	e006      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e004      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e002      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002b10:	2301      	movs	r3, #1
 8002b12:	e000      	b.n	8002b16 <HAL_ADC_ConfigChannel+0x1ce>
 8002b14:	2300      	movs	r3, #0
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	6852      	ldr	r2, [r2, #4]
 8002b1a:	201f      	movs	r0, #31
 8002b1c:	4002      	ands	r2, r0
 8002b1e:	4093      	lsls	r3, r2
 8002b20:	000a      	movs	r2, r1
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	69db      	ldr	r3, [r3, #28]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d808      	bhi.n	8002b4a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6859      	ldr	r1, [r3, #4]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	001a      	movs	r2, r3
 8002b46:	f7ff fc79 	bl	800243c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6819      	ldr	r1, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	001a      	movs	r2, r3
 8002b58:	f7ff fcb4 	bl	80024c4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	db00      	blt.n	8002b66 <HAL_ADC_ConfigChannel+0x21e>
 8002b64:	e0be      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b66:	4b51      	ldr	r3, [pc, #324]	; (8002cac <HAL_ADC_ConfigChannel+0x364>)
 8002b68:	0018      	movs	r0, r3
 8002b6a:	f7ff fc3d 	bl	80023e8 <LL_ADC_GetCommonPathInternalCh>
 8002b6e:	0003      	movs	r3, r0
 8002b70:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a4e      	ldr	r2, [pc, #312]	; (8002cb0 <HAL_ADC_ConfigChannel+0x368>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d123      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	041b      	lsls	r3, r3, #16
 8002b82:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b84:	d11e      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2280      	movs	r2, #128	; 0x80
 8002b8a:	0412      	lsls	r2, r2, #16
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	4a47      	ldr	r2, [pc, #284]	; (8002cac <HAL_ADC_ConfigChannel+0x364>)
 8002b90:	0019      	movs	r1, r3
 8002b92:	0010      	movs	r0, r2
 8002b94:	f7ff fc14 	bl	80023c0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002b98:	4b46      	ldr	r3, [pc, #280]	; (8002cb4 <HAL_ADC_ConfigChannel+0x36c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4946      	ldr	r1, [pc, #280]	; (8002cb8 <HAL_ADC_ConfigChannel+0x370>)
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7fd fac2 	bl	8000128 <__udivsi3>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	0013      	movs	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	189b      	adds	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bb4:	e002      	b.n	8002bbc <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f9      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002bc2:	e08f      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a3c      	ldr	r2, [pc, #240]	; (8002cbc <HAL_ADC_ConfigChannel+0x374>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10e      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x2a4>
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	2380      	movs	r3, #128	; 0x80
 8002bd2:	045b      	lsls	r3, r3, #17
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d109      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	0452      	lsls	r2, r2, #17
 8002bde:	4313      	orrs	r3, r2
 8002be0:	4a32      	ldr	r2, [pc, #200]	; (8002cac <HAL_ADC_ConfigChannel+0x364>)
 8002be2:	0019      	movs	r1, r3
 8002be4:	0010      	movs	r0, r2
 8002be6:	f7ff fbeb 	bl	80023c0 <LL_ADC_SetCommonPathInternalCh>
 8002bea:	e07b      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a33      	ldr	r2, [pc, #204]	; (8002cc0 <HAL_ADC_ConfigChannel+0x378>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d000      	beq.n	8002bf8 <HAL_ADC_ConfigChannel+0x2b0>
 8002bf6:	e075      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	2380      	movs	r3, #128	; 0x80
 8002bfc:	03db      	lsls	r3, r3, #15
 8002bfe:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002c00:	d000      	beq.n	8002c04 <HAL_ADC_ConfigChannel+0x2bc>
 8002c02:	e06f      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	2280      	movs	r2, #128	; 0x80
 8002c08:	03d2      	lsls	r2, r2, #15
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	4a27      	ldr	r2, [pc, #156]	; (8002cac <HAL_ADC_ConfigChannel+0x364>)
 8002c0e:	0019      	movs	r1, r3
 8002c10:	0010      	movs	r0, r2
 8002c12:	f7ff fbd5 	bl	80023c0 <LL_ADC_SetCommonPathInternalCh>
 8002c16:	e065      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	061b      	lsls	r3, r3, #24
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d004      	beq.n	8002c2e <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c28:	4a1f      	ldr	r2, [pc, #124]	; (8002ca8 <HAL_ADC_ConfigChannel+0x360>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d107      	bne.n	8002c3e <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	0019      	movs	r1, r3
 8002c38:	0010      	movs	r0, r2
 8002c3a:	f7ff fc30 	bl	800249e <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	da4e      	bge.n	8002ce4 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c46:	4b19      	ldr	r3, [pc, #100]	; (8002cac <HAL_ADC_ConfigChannel+0x364>)
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7ff fbcd 	bl	80023e8 <LL_ADC_GetCommonPathInternalCh>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a16      	ldr	r2, [pc, #88]	; (8002cb0 <HAL_ADC_ConfigChannel+0x368>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d108      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4a19      	ldr	r2, [pc, #100]	; (8002cc4 <HAL_ADC_ConfigChannel+0x37c>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	4a12      	ldr	r2, [pc, #72]	; (8002cac <HAL_ADC_ConfigChannel+0x364>)
 8002c64:	0019      	movs	r1, r3
 8002c66:	0010      	movs	r0, r2
 8002c68:	f7ff fbaa 	bl	80023c0 <LL_ADC_SetCommonPathInternalCh>
 8002c6c:	e03a      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a12      	ldr	r2, [pc, #72]	; (8002cbc <HAL_ADC_ConfigChannel+0x374>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d108      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_ADC_ConfigChannel+0x380>)
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	4a0b      	ldr	r2, [pc, #44]	; (8002cac <HAL_ADC_ConfigChannel+0x364>)
 8002c80:	0019      	movs	r1, r3
 8002c82:	0010      	movs	r0, r2
 8002c84:	f7ff fb9c 	bl	80023c0 <LL_ADC_SetCommonPathInternalCh>
 8002c88:	e02c      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a0c      	ldr	r2, [pc, #48]	; (8002cc0 <HAL_ADC_ConfigChannel+0x378>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d127      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4a0d      	ldr	r2, [pc, #52]	; (8002ccc <HAL_ADC_ConfigChannel+0x384>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	4a04      	ldr	r2, [pc, #16]	; (8002cac <HAL_ADC_ConfigChannel+0x364>)
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	0010      	movs	r0, r2
 8002ca0:	f7ff fb8e 	bl	80023c0 <LL_ADC_SetCommonPathInternalCh>
 8002ca4:	e01e      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x39c>
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	80000004 	.word	0x80000004
 8002cac:	40012708 	.word	0x40012708
 8002cb0:	b0001000 	.word	0xb0001000
 8002cb4:	20000008 	.word	0x20000008
 8002cb8:	00030d40 	.word	0x00030d40
 8002cbc:	b8004000 	.word	0xb8004000
 8002cc0:	b4002000 	.word	0xb4002000
 8002cc4:	ff7fffff 	.word	0xff7fffff
 8002cc8:	feffffff 	.word	0xfeffffff
 8002ccc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cdc:	2317      	movs	r3, #23
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2254      	movs	r2, #84	; 0x54
 8002ce8:	2100      	movs	r1, #0
 8002cea:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002cec:	2317      	movs	r3, #23
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	781b      	ldrb	r3, [r3, #0]
}
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b006      	add	sp, #24
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	46c0      	nop			; (mov r8, r8)

08002cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	0002      	movs	r2, r0
 8002d04:	1dfb      	adds	r3, r7, #7
 8002d06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d08:	1dfb      	adds	r3, r7, #7
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b7f      	cmp	r3, #127	; 0x7f
 8002d0e:	d809      	bhi.n	8002d24 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d10:	1dfb      	adds	r3, r7, #7
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	001a      	movs	r2, r3
 8002d16:	231f      	movs	r3, #31
 8002d18:	401a      	ands	r2, r3
 8002d1a:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <__NVIC_EnableIRQ+0x30>)
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	4091      	lsls	r1, r2
 8002d20:	000a      	movs	r2, r1
 8002d22:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	e000e100 	.word	0xe000e100

08002d30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d30:	b590      	push	{r4, r7, lr}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	0002      	movs	r2, r0
 8002d38:	6039      	str	r1, [r7, #0]
 8002d3a:	1dfb      	adds	r3, r7, #7
 8002d3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d3e:	1dfb      	adds	r3, r7, #7
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b7f      	cmp	r3, #127	; 0x7f
 8002d44:	d828      	bhi.n	8002d98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d46:	4a2f      	ldr	r2, [pc, #188]	; (8002e04 <__NVIC_SetPriority+0xd4>)
 8002d48:	1dfb      	adds	r3, r7, #7
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	b25b      	sxtb	r3, r3
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	33c0      	adds	r3, #192	; 0xc0
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	589b      	ldr	r3, [r3, r2]
 8002d56:	1dfa      	adds	r2, r7, #7
 8002d58:	7812      	ldrb	r2, [r2, #0]
 8002d5a:	0011      	movs	r1, r2
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	400a      	ands	r2, r1
 8002d60:	00d2      	lsls	r2, r2, #3
 8002d62:	21ff      	movs	r1, #255	; 0xff
 8002d64:	4091      	lsls	r1, r2
 8002d66:	000a      	movs	r2, r1
 8002d68:	43d2      	mvns	r2, r2
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	019b      	lsls	r3, r3, #6
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	401a      	ands	r2, r3
 8002d76:	1dfb      	adds	r3, r7, #7
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	4003      	ands	r3, r0
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d84:	481f      	ldr	r0, [pc, #124]	; (8002e04 <__NVIC_SetPriority+0xd4>)
 8002d86:	1dfb      	adds	r3, r7, #7
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	b25b      	sxtb	r3, r3
 8002d8c:	089b      	lsrs	r3, r3, #2
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	33c0      	adds	r3, #192	; 0xc0
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002d96:	e031      	b.n	8002dfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <__NVIC_SetPriority+0xd8>)
 8002d9a:	1dfb      	adds	r3, r7, #7
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	0019      	movs	r1, r3
 8002da0:	230f      	movs	r3, #15
 8002da2:	400b      	ands	r3, r1
 8002da4:	3b08      	subs	r3, #8
 8002da6:	089b      	lsrs	r3, r3, #2
 8002da8:	3306      	adds	r3, #6
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	18d3      	adds	r3, r2, r3
 8002dae:	3304      	adds	r3, #4
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	1dfa      	adds	r2, r7, #7
 8002db4:	7812      	ldrb	r2, [r2, #0]
 8002db6:	0011      	movs	r1, r2
 8002db8:	2203      	movs	r2, #3
 8002dba:	400a      	ands	r2, r1
 8002dbc:	00d2      	lsls	r2, r2, #3
 8002dbe:	21ff      	movs	r1, #255	; 0xff
 8002dc0:	4091      	lsls	r1, r2
 8002dc2:	000a      	movs	r2, r1
 8002dc4:	43d2      	mvns	r2, r2
 8002dc6:	401a      	ands	r2, r3
 8002dc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	019b      	lsls	r3, r3, #6
 8002dce:	22ff      	movs	r2, #255	; 0xff
 8002dd0:	401a      	ands	r2, r3
 8002dd2:	1dfb      	adds	r3, r7, #7
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	2303      	movs	r3, #3
 8002dda:	4003      	ands	r3, r0
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002de0:	4809      	ldr	r0, [pc, #36]	; (8002e08 <__NVIC_SetPriority+0xd8>)
 8002de2:	1dfb      	adds	r3, r7, #7
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	001c      	movs	r4, r3
 8002de8:	230f      	movs	r3, #15
 8002dea:	4023      	ands	r3, r4
 8002dec:	3b08      	subs	r3, #8
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	430a      	orrs	r2, r1
 8002df2:	3306      	adds	r3, #6
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	18c3      	adds	r3, r0, r3
 8002df8:	3304      	adds	r3, #4
 8002dfa:	601a      	str	r2, [r3, #0]
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b003      	add	sp, #12
 8002e02:	bd90      	pop	{r4, r7, pc}
 8002e04:	e000e100 	.word	0xe000e100
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	4a0c      	ldr	r2, [pc, #48]	; (8002e4c <SysTick_Config+0x40>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e010      	b.n	8002e44 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e22:	4b0b      	ldr	r3, [pc, #44]	; (8002e50 <SysTick_Config+0x44>)
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	3a01      	subs	r2, #1
 8002e28:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	425b      	negs	r3, r3
 8002e2e:	2103      	movs	r1, #3
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff ff7d 	bl	8002d30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e36:	4b06      	ldr	r3, [pc, #24]	; (8002e50 <SysTick_Config+0x44>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <SysTick_Config+0x44>)
 8002e3e:	2207      	movs	r2, #7
 8002e40:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b002      	add	sp, #8
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	00ffffff 	.word	0x00ffffff
 8002e50:	e000e010 	.word	0xe000e010

08002e54 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	210f      	movs	r1, #15
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	1c02      	adds	r2, r0, #0
 8002e64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	b25b      	sxtb	r3, r3
 8002e6e:	0011      	movs	r1, r2
 8002e70:	0018      	movs	r0, r3
 8002e72:	f7ff ff5d 	bl	8002d30 <__NVIC_SetPriority>
}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b004      	add	sp, #16
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	0002      	movs	r2, r0
 8002e86:	1dfb      	adds	r3, r7, #7
 8002e88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e8a:	1dfb      	adds	r3, r7, #7
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	b25b      	sxtb	r3, r3
 8002e90:	0018      	movs	r0, r3
 8002e92:	f7ff ff33 	bl	8002cfc <__NVIC_EnableIRQ>
}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	b002      	add	sp, #8
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f7ff ffaf 	bl	8002e0c <SysTick_Config>
 8002eae:	0003      	movs	r3, r0
}
 8002eb0:	0018      	movs	r0, r3
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ec6:	e147      	b.n	8003158 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	4091      	lsls	r1, r2
 8002ed2:	000a      	movs	r2, r1
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d100      	bne.n	8002ee0 <HAL_GPIO_Init+0x28>
 8002ede:	e138      	b.n	8003152 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d00b      	beq.n	8002f00 <HAL_GPIO_Init+0x48>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d007      	beq.n	8002f00 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ef4:	2b11      	cmp	r3, #17
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b12      	cmp	r3, #18
 8002efe:	d130      	bne.n	8002f62 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	43da      	mvns	r2, r3
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4013      	ands	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68da      	ldr	r2, [r3, #12]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	409a      	lsls	r2, r3
 8002f22:	0013      	movs	r3, r2
 8002f24:	693a      	ldr	r2, [r7, #16]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f36:	2201      	movs	r2, #1
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	0013      	movs	r3, r2
 8002f3e:	43da      	mvns	r2, r3
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	091b      	lsrs	r3, r3, #4
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	401a      	ands	r2, r3
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	409a      	lsls	r2, r3
 8002f54:	0013      	movs	r3, r2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	693a      	ldr	r2, [r7, #16]
 8002f60:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	0013      	movs	r3, r2
 8002f72:	43da      	mvns	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	409a      	lsls	r2, r3
 8002f84:	0013      	movs	r3, r2
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0xea>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b12      	cmp	r3, #18
 8002fa0:	d123      	bne.n	8002fea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	08da      	lsrs	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	3208      	adds	r2, #8
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	58d3      	ldr	r3, [r2, r3]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	2207      	movs	r2, #7
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	220f      	movs	r2, #15
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	0013      	movs	r3, r2
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2107      	movs	r1, #7
 8002fce:	400b      	ands	r3, r1
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	409a      	lsls	r2, r3
 8002fd4:	0013      	movs	r3, r2
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	08da      	lsrs	r2, r3, #3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3208      	adds	r2, #8
 8002fe4:	0092      	lsls	r2, r2, #2
 8002fe6:	6939      	ldr	r1, [r7, #16]
 8002fe8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	2203      	movs	r2, #3
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	0013      	movs	r3, r2
 8002ffa:	43da      	mvns	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	4013      	ands	r3, r2
 8003000:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	2203      	movs	r2, #3
 8003008:	401a      	ands	r2, r3
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	409a      	lsls	r2, r3
 8003010:	0013      	movs	r3, r2
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	4313      	orrs	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	055b      	lsls	r3, r3, #21
 8003026:	4013      	ands	r3, r2
 8003028:	d100      	bne.n	800302c <HAL_GPIO_Init+0x174>
 800302a:	e092      	b.n	8003152 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800302c:	4a50      	ldr	r2, [pc, #320]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3318      	adds	r3, #24
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	589b      	ldr	r3, [r3, r2]
 8003038:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2203      	movs	r2, #3
 800303e:	4013      	ands	r3, r2
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	220f      	movs	r2, #15
 8003044:	409a      	lsls	r2, r3
 8003046:	0013      	movs	r3, r2
 8003048:	43da      	mvns	r2, r3
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	23a0      	movs	r3, #160	; 0xa0
 8003054:	05db      	lsls	r3, r3, #23
 8003056:	429a      	cmp	r2, r3
 8003058:	d013      	beq.n	8003082 <HAL_GPIO_Init+0x1ca>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a45      	ldr	r2, [pc, #276]	; (8003174 <HAL_GPIO_Init+0x2bc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d00d      	beq.n	800307e <HAL_GPIO_Init+0x1c6>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a44      	ldr	r2, [pc, #272]	; (8003178 <HAL_GPIO_Init+0x2c0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d007      	beq.n	800307a <HAL_GPIO_Init+0x1c2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a43      	ldr	r2, [pc, #268]	; (800317c <HAL_GPIO_Init+0x2c4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d101      	bne.n	8003076 <HAL_GPIO_Init+0x1be>
 8003072:	2303      	movs	r3, #3
 8003074:	e006      	b.n	8003084 <HAL_GPIO_Init+0x1cc>
 8003076:	2305      	movs	r3, #5
 8003078:	e004      	b.n	8003084 <HAL_GPIO_Init+0x1cc>
 800307a:	2302      	movs	r3, #2
 800307c:	e002      	b.n	8003084 <HAL_GPIO_Init+0x1cc>
 800307e:	2301      	movs	r3, #1
 8003080:	e000      	b.n	8003084 <HAL_GPIO_Init+0x1cc>
 8003082:	2300      	movs	r3, #0
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	2103      	movs	r1, #3
 8003088:	400a      	ands	r2, r1
 800308a:	00d2      	lsls	r2, r2, #3
 800308c:	4093      	lsls	r3, r2
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003094:	4936      	ldr	r1, [pc, #216]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	089b      	lsrs	r3, r3, #2
 800309a:	3318      	adds	r3, #24
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80030a2:	4a33      	ldr	r2, [pc, #204]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	58d3      	ldr	r3, [r2, r3]
 80030a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	43da      	mvns	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4013      	ands	r3, r2
 80030b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	025b      	lsls	r3, r3, #9
 80030bc:	4013      	ands	r3, r2
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030c8:	4929      	ldr	r1, [pc, #164]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 80030ca:	2280      	movs	r2, #128	; 0x80
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80030d0:	4a27      	ldr	r2, [pc, #156]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 80030d2:	2384      	movs	r3, #132	; 0x84
 80030d4:	58d3      	ldr	r3, [r2, r3]
 80030d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	43da      	mvns	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4013      	ands	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	2380      	movs	r3, #128	; 0x80
 80030e8:	029b      	lsls	r3, r3, #10
 80030ea:	4013      	ands	r3, r2
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030f6:	491e      	ldr	r1, [pc, #120]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 80030f8:	2284      	movs	r2, #132	; 0x84
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	43da      	mvns	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	2380      	movs	r3, #128	; 0x80
 8003114:	035b      	lsls	r3, r3, #13
 8003116:	4013      	ands	r3, r2
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003128:	4b11      	ldr	r3, [pc, #68]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	43da      	mvns	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	2380      	movs	r3, #128	; 0x80
 800313e:	039b      	lsls	r3, r3, #14
 8003140:	4013      	ands	r3, r2
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4313      	orrs	r3, r2
 800314a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800314c:	4b08      	ldr	r3, [pc, #32]	; (8003170 <HAL_GPIO_Init+0x2b8>)
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	3301      	adds	r3, #1
 8003156:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	40da      	lsrs	r2, r3
 8003160:	1e13      	subs	r3, r2, #0
 8003162:	d000      	beq.n	8003166 <HAL_GPIO_Init+0x2ae>
 8003164:	e6b0      	b.n	8002ec8 <HAL_GPIO_Init+0x10>
  }
}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	46bd      	mov	sp, r7
 800316a:	b006      	add	sp, #24
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	40021800 	.word	0x40021800
 8003174:	50000400 	.word	0x50000400
 8003178:	50000800 	.word	0x50000800
 800317c:	50000c00 	.word	0x50000c00

08003180 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	0002      	movs	r2, r0
 8003188:	1dbb      	adds	r3, r7, #6
 800318a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800318c:	4b10      	ldr	r3, [pc, #64]	; (80031d0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	1dba      	adds	r2, r7, #6
 8003192:	8812      	ldrh	r2, [r2, #0]
 8003194:	4013      	ands	r3, r2
 8003196:	d008      	beq.n	80031aa <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003198:	4b0d      	ldr	r3, [pc, #52]	; (80031d0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800319a:	1dba      	adds	r2, r7, #6
 800319c:	8812      	ldrh	r2, [r2, #0]
 800319e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80031a0:	1dbb      	adds	r3, r7, #6
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 f815 	bl	80031d4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80031aa:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	1dba      	adds	r2, r7, #6
 80031b0:	8812      	ldrh	r2, [r2, #0]
 80031b2:	4013      	ands	r3, r2
 80031b4:	d008      	beq.n	80031c8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80031b8:	1dba      	adds	r2, r7, #6
 80031ba:	8812      	ldrh	r2, [r2, #0]
 80031bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80031be:	1dbb      	adds	r3, r7, #6
 80031c0:	881b      	ldrh	r3, [r3, #0]
 80031c2:	0018      	movs	r0, r3
 80031c4:	f002 fc7e 	bl	8005ac4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	46bd      	mov	sp, r7
 80031cc:	b002      	add	sp, #8
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021800 	.word	0x40021800

080031d4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	0002      	movs	r2, r0
 80031dc:	1dbb      	adds	r3, r7, #6
 80031de:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b002      	add	sp, #8
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e082      	b.n	8003300 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2241      	movs	r2, #65	; 0x41
 80031fe:	5c9b      	ldrb	r3, [r3, r2]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d107      	bne.n	8003216 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2240      	movs	r2, #64	; 0x40
 800320a:	2100      	movs	r1, #0
 800320c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f002 fe63 	bl	8005edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2241      	movs	r2, #65	; 0x41
 800321a:	2124      	movs	r1, #36	; 0x24
 800321c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2101      	movs	r1, #1
 800322a:	438a      	bics	r2, r1
 800322c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4934      	ldr	r1, [pc, #208]	; (8003308 <HAL_I2C_Init+0x120>)
 8003238:	400a      	ands	r2, r1
 800323a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4931      	ldr	r1, [pc, #196]	; (800330c <HAL_I2C_Init+0x124>)
 8003248:	400a      	ands	r2, r1
 800324a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d108      	bne.n	8003266 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2180      	movs	r1, #128	; 0x80
 800325e:	0209      	lsls	r1, r1, #8
 8003260:	430a      	orrs	r2, r1
 8003262:	609a      	str	r2, [r3, #8]
 8003264:	e007      	b.n	8003276 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2184      	movs	r1, #132	; 0x84
 8003270:	0209      	lsls	r1, r1, #8
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d104      	bne.n	8003288 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2280      	movs	r2, #128	; 0x80
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	491f      	ldr	r1, [pc, #124]	; (8003310 <HAL_I2C_Init+0x128>)
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	491a      	ldr	r1, [pc, #104]	; (800330c <HAL_I2C_Init+0x124>)
 80032a4:	400a      	ands	r2, r1
 80032a6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	431a      	orrs	r2, r3
 80032b2:	0011      	movs	r1, r2
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	021a      	lsls	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69d9      	ldr	r1, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2101      	movs	r1, #1
 80032de:	430a      	orrs	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2241      	movs	r2, #65	; 0x41
 80032ec:	2120      	movs	r1, #32
 80032ee:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2242      	movs	r2, #66	; 0x42
 80032fa:	2100      	movs	r1, #0
 80032fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}
 8003308:	f0ffffff 	.word	0xf0ffffff
 800330c:	ffff7fff 	.word	0xffff7fff
 8003310:	02008000 	.word	0x02008000

08003314 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b089      	sub	sp, #36	; 0x24
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	0008      	movs	r0, r1
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	0019      	movs	r1, r3
 8003322:	230a      	movs	r3, #10
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	1c02      	adds	r2, r0, #0
 8003328:	801a      	strh	r2, [r3, #0]
 800332a:	2308      	movs	r3, #8
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	1c0a      	adds	r2, r1, #0
 8003330:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2241      	movs	r2, #65	; 0x41
 8003336:	5c9b      	ldrb	r3, [r3, r2]
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b20      	cmp	r3, #32
 800333c:	d000      	beq.n	8003340 <HAL_I2C_Master_Transmit+0x2c>
 800333e:	e0e7      	b.n	8003510 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2240      	movs	r2, #64	; 0x40
 8003344:	5c9b      	ldrb	r3, [r3, r2]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_I2C_Master_Transmit+0x3a>
 800334a:	2302      	movs	r3, #2
 800334c:	e0e1      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1fe>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2240      	movs	r2, #64	; 0x40
 8003352:	2101      	movs	r1, #1
 8003354:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003356:	f7ff f807 	bl	8002368 <HAL_GetTick>
 800335a:	0003      	movs	r3, r0
 800335c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	0219      	lsls	r1, r3, #8
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	2319      	movs	r3, #25
 800336a:	2201      	movs	r2, #1
 800336c:	f000 fd3e 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003370:	1e03      	subs	r3, r0, #0
 8003372:	d001      	beq.n	8003378 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0cc      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2241      	movs	r2, #65	; 0x41
 800337c:	2121      	movs	r1, #33	; 0x21
 800337e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2242      	movs	r2, #66	; 0x42
 8003384:	2110      	movs	r1, #16
 8003386:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2208      	movs	r2, #8
 8003398:	18ba      	adds	r2, r7, r2
 800339a:	8812      	ldrh	r2, [r2, #0]
 800339c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2bff      	cmp	r3, #255	; 0xff
 80033ac:	d911      	bls.n	80033d2 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	22ff      	movs	r2, #255	; 0xff
 80033b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	2380      	movs	r3, #128	; 0x80
 80033bc:	045c      	lsls	r4, r3, #17
 80033be:	230a      	movs	r3, #10
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	8819      	ldrh	r1, [r3, #0]
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	4b55      	ldr	r3, [pc, #340]	; (800351c <HAL_I2C_Master_Transmit+0x208>)
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	0023      	movs	r3, r4
 80033cc:	f000 fe2e 	bl	800402c <I2C_TransferConfig>
 80033d0:	e075      	b.n	80034be <HAL_I2C_Master_Transmit+0x1aa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29a      	uxth	r2, r3
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	2380      	movs	r3, #128	; 0x80
 80033e4:	049c      	lsls	r4, r3, #18
 80033e6:	230a      	movs	r3, #10
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	8819      	ldrh	r1, [r3, #0]
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	4b4b      	ldr	r3, [pc, #300]	; (800351c <HAL_I2C_Master_Transmit+0x208>)
 80033f0:	9300      	str	r3, [sp, #0]
 80033f2:	0023      	movs	r3, r4
 80033f4:	f000 fe1a 	bl	800402c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80033f8:	e061      	b.n	80034be <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 fd32 	bl	8003e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8003406:	1e03      	subs	r3, r0, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e081      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	d03a      	beq.n	80034be <HAL_I2C_Master_Transmit+0x1aa>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344c:	2b00      	cmp	r3, #0
 800344e:	d136      	bne.n	80034be <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003450:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	9300      	str	r3, [sp, #0]
 8003458:	0013      	movs	r3, r2
 800345a:	2200      	movs	r2, #0
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	f000 fcc5 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003462:	1e03      	subs	r3, r0, #0
 8003464:	d001      	beq.n	800346a <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e053      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	2bff      	cmp	r3, #255	; 0xff
 8003472:	d911      	bls.n	8003498 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	22ff      	movs	r2, #255	; 0xff
 8003478:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	b2da      	uxtb	r2, r3
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	045c      	lsls	r4, r3, #17
 8003484:	230a      	movs	r3, #10
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	8819      	ldrh	r1, [r3, #0]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	2300      	movs	r3, #0
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	0023      	movs	r3, r4
 8003492:	f000 fdcb 	bl	800402c <I2C_TransferConfig>
 8003496:	e012      	b.n	80034be <HAL_I2C_Master_Transmit+0x1aa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	049c      	lsls	r4, r3, #18
 80034ac:	230a      	movs	r3, #10
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	8819      	ldrh	r1, [r3, #0]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	2300      	movs	r3, #0
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	0023      	movs	r3, r4
 80034ba:	f000 fdb7 	bl	800402c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d198      	bne.n	80033fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 fd0a 	bl	8003ee8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034d4:	1e03      	subs	r3, r0, #0
 80034d6:	d001      	beq.n	80034dc <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e01a      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2220      	movs	r2, #32
 80034e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	490c      	ldr	r1, [pc, #48]	; (8003520 <HAL_I2C_Master_Transmit+0x20c>)
 80034f0:	400a      	ands	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2241      	movs	r2, #65	; 0x41
 80034f8:	2120      	movs	r1, #32
 80034fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2242      	movs	r2, #66	; 0x42
 8003500:	2100      	movs	r1, #0
 8003502:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2240      	movs	r2, #64	; 0x40
 8003508:	2100      	movs	r1, #0
 800350a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	e000      	b.n	8003512 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8003510:	2302      	movs	r3, #2
  }
}
 8003512:	0018      	movs	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	b007      	add	sp, #28
 8003518:	bd90      	pop	{r4, r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	80002000 	.word	0x80002000
 8003520:	fe00e800 	.word	0xfe00e800

08003524 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b089      	sub	sp, #36	; 0x24
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	000c      	movs	r4, r1
 800352e:	0010      	movs	r0, r2
 8003530:	0019      	movs	r1, r3
 8003532:	230a      	movs	r3, #10
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	1c22      	adds	r2, r4, #0
 8003538:	801a      	strh	r2, [r3, #0]
 800353a:	2308      	movs	r3, #8
 800353c:	18fb      	adds	r3, r7, r3
 800353e:	1c02      	adds	r2, r0, #0
 8003540:	801a      	strh	r2, [r3, #0]
 8003542:	1dbb      	adds	r3, r7, #6
 8003544:	1c0a      	adds	r2, r1, #0
 8003546:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2241      	movs	r2, #65	; 0x41
 800354c:	5c9b      	ldrb	r3, [r3, r2]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b20      	cmp	r3, #32
 8003552:	d000      	beq.n	8003556 <HAL_I2C_Mem_Write+0x32>
 8003554:	e10c      	b.n	8003770 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	2b00      	cmp	r3, #0
 800355a:	d004      	beq.n	8003566 <HAL_I2C_Mem_Write+0x42>
 800355c:	232c      	movs	r3, #44	; 0x2c
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d105      	bne.n	8003572 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2280      	movs	r2, #128	; 0x80
 800356a:	0092      	lsls	r2, r2, #2
 800356c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e0ff      	b.n	8003772 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2240      	movs	r2, #64	; 0x40
 8003576:	5c9b      	ldrb	r3, [r3, r2]
 8003578:	2b01      	cmp	r3, #1
 800357a:	d101      	bne.n	8003580 <HAL_I2C_Mem_Write+0x5c>
 800357c:	2302      	movs	r3, #2
 800357e:	e0f8      	b.n	8003772 <HAL_I2C_Mem_Write+0x24e>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2240      	movs	r2, #64	; 0x40
 8003584:	2101      	movs	r1, #1
 8003586:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003588:	f7fe feee 	bl	8002368 <HAL_GetTick>
 800358c:	0003      	movs	r3, r0
 800358e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003590:	2380      	movs	r3, #128	; 0x80
 8003592:	0219      	lsls	r1, r3, #8
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2319      	movs	r3, #25
 800359c:	2201      	movs	r2, #1
 800359e:	f000 fc25 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80035a2:	1e03      	subs	r3, r0, #0
 80035a4:	d001      	beq.n	80035aa <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e0e3      	b.n	8003772 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2241      	movs	r2, #65	; 0x41
 80035ae:	2121      	movs	r1, #33	; 0x21
 80035b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2242      	movs	r2, #66	; 0x42
 80035b6:	2140      	movs	r1, #64	; 0x40
 80035b8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	222c      	movs	r2, #44	; 0x2c
 80035ca:	18ba      	adds	r2, r7, r2
 80035cc:	8812      	ldrh	r2, [r2, #0]
 80035ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035d6:	1dbb      	adds	r3, r7, #6
 80035d8:	881c      	ldrh	r4, [r3, #0]
 80035da:	2308      	movs	r3, #8
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	881a      	ldrh	r2, [r3, #0]
 80035e0:	230a      	movs	r3, #10
 80035e2:	18fb      	adds	r3, r7, r3
 80035e4:	8819      	ldrh	r1, [r3, #0]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	9300      	str	r3, [sp, #0]
 80035f0:	0023      	movs	r3, r4
 80035f2:	f000 fb13 	bl	8003c1c <I2C_RequestMemoryWrite>
 80035f6:	1e03      	subs	r3, r0, #0
 80035f8:	d005      	beq.n	8003606 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2240      	movs	r2, #64	; 0x40
 80035fe:	2100      	movs	r1, #0
 8003600:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e0b5      	b.n	8003772 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800360a:	b29b      	uxth	r3, r3
 800360c:	2bff      	cmp	r3, #255	; 0xff
 800360e:	d911      	bls.n	8003634 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	22ff      	movs	r2, #255	; 0xff
 8003614:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800361a:	b2da      	uxtb	r2, r3
 800361c:	2380      	movs	r3, #128	; 0x80
 800361e:	045c      	lsls	r4, r3, #17
 8003620:	230a      	movs	r3, #10
 8003622:	18fb      	adds	r3, r7, r3
 8003624:	8819      	ldrh	r1, [r3, #0]
 8003626:	68f8      	ldr	r0, [r7, #12]
 8003628:	2300      	movs	r3, #0
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	0023      	movs	r3, r4
 800362e:	f000 fcfd 	bl	800402c <I2C_TransferConfig>
 8003632:	e012      	b.n	800365a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003642:	b2da      	uxtb	r2, r3
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	049c      	lsls	r4, r3, #18
 8003648:	230a      	movs	r3, #10
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	8819      	ldrh	r1, [r3, #0]
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	2300      	movs	r3, #0
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	0023      	movs	r3, r4
 8003656:	f000 fce9 	bl	800402c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	0018      	movs	r0, r3
 8003662:	f000 fc02 	bl	8003e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e081      	b.n	8003772 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d03a      	beq.n	800371e <HAL_I2C_Mem_Write+0x1fa>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d136      	bne.n	800371e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	9300      	str	r3, [sp, #0]
 80036b8:	0013      	movs	r3, r2
 80036ba:	2200      	movs	r2, #0
 80036bc:	2180      	movs	r1, #128	; 0x80
 80036be:	f000 fb95 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80036c2:	1e03      	subs	r3, r0, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e053      	b.n	8003772 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2bff      	cmp	r3, #255	; 0xff
 80036d2:	d911      	bls.n	80036f8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	22ff      	movs	r2, #255	; 0xff
 80036d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	045c      	lsls	r4, r3, #17
 80036e4:	230a      	movs	r3, #10
 80036e6:	18fb      	adds	r3, r7, r3
 80036e8:	8819      	ldrh	r1, [r3, #0]
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	2300      	movs	r3, #0
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	0023      	movs	r3, r4
 80036f2:	f000 fc9b 	bl	800402c <I2C_TransferConfig>
 80036f6:	e012      	b.n	800371e <HAL_I2C_Mem_Write+0x1fa>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003706:	b2da      	uxtb	r2, r3
 8003708:	2380      	movs	r3, #128	; 0x80
 800370a:	049c      	lsls	r4, r3, #18
 800370c:	230a      	movs	r3, #10
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	8819      	ldrh	r1, [r3, #0]
 8003712:	68f8      	ldr	r0, [r7, #12]
 8003714:	2300      	movs	r3, #0
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	0023      	movs	r3, r4
 800371a:	f000 fc87 	bl	800402c <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d198      	bne.n	800365a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	0018      	movs	r0, r3
 8003730:	f000 fbda 	bl	8003ee8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d001      	beq.n	800373c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e01a      	b.n	8003772 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2220      	movs	r2, #32
 8003742:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	490b      	ldr	r1, [pc, #44]	; (800377c <HAL_I2C_Mem_Write+0x258>)
 8003750:	400a      	ands	r2, r1
 8003752:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2241      	movs	r2, #65	; 0x41
 8003758:	2120      	movs	r1, #32
 800375a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2242      	movs	r2, #66	; 0x42
 8003760:	2100      	movs	r1, #0
 8003762:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2240      	movs	r2, #64	; 0x40
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800376c:	2300      	movs	r3, #0
 800376e:	e000      	b.n	8003772 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003770:	2302      	movs	r3, #2
  }
}
 8003772:	0018      	movs	r0, r3
 8003774:	46bd      	mov	sp, r7
 8003776:	b007      	add	sp, #28
 8003778:	bd90      	pop	{r4, r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	fe00e800 	.word	0xfe00e800

08003780 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003780:	b590      	push	{r4, r7, lr}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	000c      	movs	r4, r1
 800378a:	0010      	movs	r0, r2
 800378c:	0019      	movs	r1, r3
 800378e:	230a      	movs	r3, #10
 8003790:	18fb      	adds	r3, r7, r3
 8003792:	1c22      	adds	r2, r4, #0
 8003794:	801a      	strh	r2, [r3, #0]
 8003796:	2308      	movs	r3, #8
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	1c02      	adds	r2, r0, #0
 800379c:	801a      	strh	r2, [r3, #0]
 800379e:	1dbb      	adds	r3, r7, #6
 80037a0:	1c0a      	adds	r2, r1, #0
 80037a2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2241      	movs	r2, #65	; 0x41
 80037a8:	5c9b      	ldrb	r3, [r3, r2]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d000      	beq.n	80037b2 <HAL_I2C_Mem_Read+0x32>
 80037b0:	e110      	b.n	80039d4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d004      	beq.n	80037c2 <HAL_I2C_Mem_Read+0x42>
 80037b8:	232c      	movs	r3, #44	; 0x2c
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	881b      	ldrh	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d105      	bne.n	80037ce <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2280      	movs	r2, #128	; 0x80
 80037c6:	0092      	lsls	r2, r2, #2
 80037c8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e103      	b.n	80039d6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2240      	movs	r2, #64	; 0x40
 80037d2:	5c9b      	ldrb	r3, [r3, r2]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_I2C_Mem_Read+0x5c>
 80037d8:	2302      	movs	r3, #2
 80037da:	e0fc      	b.n	80039d6 <HAL_I2C_Mem_Read+0x256>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2240      	movs	r2, #64	; 0x40
 80037e0:	2101      	movs	r1, #1
 80037e2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037e4:	f7fe fdc0 	bl	8002368 <HAL_GetTick>
 80037e8:	0003      	movs	r3, r0
 80037ea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	0219      	lsls	r1, r3, #8
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	2319      	movs	r3, #25
 80037f8:	2201      	movs	r2, #1
 80037fa:	f000 faf7 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80037fe:	1e03      	subs	r3, r0, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e0e7      	b.n	80039d6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2241      	movs	r2, #65	; 0x41
 800380a:	2122      	movs	r1, #34	; 0x22
 800380c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2242      	movs	r2, #66	; 0x42
 8003812:	2140      	movs	r1, #64	; 0x40
 8003814:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2200      	movs	r2, #0
 800381a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003820:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	222c      	movs	r2, #44	; 0x2c
 8003826:	18ba      	adds	r2, r7, r2
 8003828:	8812      	ldrh	r2, [r2, #0]
 800382a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003832:	1dbb      	adds	r3, r7, #6
 8003834:	881c      	ldrh	r4, [r3, #0]
 8003836:	2308      	movs	r3, #8
 8003838:	18fb      	adds	r3, r7, r3
 800383a:	881a      	ldrh	r2, [r3, #0]
 800383c:	230a      	movs	r3, #10
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	8819      	ldrh	r1, [r3, #0]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	0023      	movs	r3, r4
 800384e:	f000 fa49 	bl	8003ce4 <I2C_RequestMemoryRead>
 8003852:	1e03      	subs	r3, r0, #0
 8003854:	d005      	beq.n	8003862 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2240      	movs	r2, #64	; 0x40
 800385a:	2100      	movs	r1, #0
 800385c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e0b9      	b.n	80039d6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003866:	b29b      	uxth	r3, r3
 8003868:	2bff      	cmp	r3, #255	; 0xff
 800386a:	d911      	bls.n	8003890 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	22ff      	movs	r2, #255	; 0xff
 8003870:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003876:	b2da      	uxtb	r2, r3
 8003878:	2380      	movs	r3, #128	; 0x80
 800387a:	045c      	lsls	r4, r3, #17
 800387c:	230a      	movs	r3, #10
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	8819      	ldrh	r1, [r3, #0]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	4b56      	ldr	r3, [pc, #344]	; (80039e0 <HAL_I2C_Mem_Read+0x260>)
 8003886:	9300      	str	r3, [sp, #0]
 8003888:	0023      	movs	r3, r4
 800388a:	f000 fbcf 	bl	800402c <I2C_TransferConfig>
 800388e:	e012      	b.n	80038b6 <HAL_I2C_Mem_Read+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	049c      	lsls	r4, r3, #18
 80038a4:	230a      	movs	r3, #10
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	8819      	ldrh	r1, [r3, #0]
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	4b4c      	ldr	r3, [pc, #304]	; (80039e0 <HAL_I2C_Mem_Read+0x260>)
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	0023      	movs	r3, r4
 80038b2:	f000 fbbb 	bl	800402c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80038b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	0013      	movs	r3, r2
 80038c0:	2200      	movs	r2, #0
 80038c2:	2104      	movs	r1, #4
 80038c4:	f000 fa92 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 80038c8:	1e03      	subs	r3, r0, #0
 80038ca:	d001      	beq.n	80038d0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e082      	b.n	80039d6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d03a      	beq.n	8003982 <HAL_I2C_Mem_Read+0x202>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003910:	2b00      	cmp	r3, #0
 8003912:	d136      	bne.n	8003982 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	0013      	movs	r3, r2
 800391e:	2200      	movs	r2, #0
 8003920:	2180      	movs	r1, #128	; 0x80
 8003922:	f000 fa63 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003926:	1e03      	subs	r3, r0, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e053      	b.n	80039d6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2bff      	cmp	r3, #255	; 0xff
 8003936:	d911      	bls.n	800395c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	22ff      	movs	r2, #255	; 0xff
 800393c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	b2da      	uxtb	r2, r3
 8003944:	2380      	movs	r3, #128	; 0x80
 8003946:	045c      	lsls	r4, r3, #17
 8003948:	230a      	movs	r3, #10
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	8819      	ldrh	r1, [r3, #0]
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	2300      	movs	r3, #0
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	0023      	movs	r3, r4
 8003956:	f000 fb69 	bl	800402c <I2C_TransferConfig>
 800395a:	e012      	b.n	8003982 <HAL_I2C_Mem_Read+0x202>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	b2da      	uxtb	r2, r3
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	049c      	lsls	r4, r3, #18
 8003970:	230a      	movs	r3, #10
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	8819      	ldrh	r1, [r3, #0]
 8003976:	68f8      	ldr	r0, [r7, #12]
 8003978:	2300      	movs	r3, #0
 800397a:	9300      	str	r3, [sp, #0]
 800397c:	0023      	movs	r3, r4
 800397e:	f000 fb55 	bl	800402c <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d194      	bne.n	80038b6 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	0018      	movs	r0, r3
 8003994:	f000 faa8 	bl	8003ee8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003998:	1e03      	subs	r3, r0, #0
 800399a:	d001      	beq.n	80039a0 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e01a      	b.n	80039d6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2220      	movs	r2, #32
 80039a6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	490c      	ldr	r1, [pc, #48]	; (80039e4 <HAL_I2C_Mem_Read+0x264>)
 80039b4:	400a      	ands	r2, r1
 80039b6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2241      	movs	r2, #65	; 0x41
 80039bc:	2120      	movs	r1, #32
 80039be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2242      	movs	r2, #66	; 0x42
 80039c4:	2100      	movs	r1, #0
 80039c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	2100      	movs	r1, #0
 80039ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	0018      	movs	r0, r3
 80039d8:	46bd      	mov	sp, r7
 80039da:	b007      	add	sp, #28
 80039dc:	bd90      	pop	{r4, r7, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	80002400 	.word	0x80002400
 80039e4:	fe00e800 	.word	0xfe00e800

080039e8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b08a      	sub	sp, #40	; 0x28
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	230a      	movs	r3, #10
 80039f6:	18fb      	adds	r3, r7, r3
 80039f8:	1c0a      	adds	r2, r1, #0
 80039fa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2241      	movs	r2, #65	; 0x41
 8003a04:	5c9b      	ldrb	r3, [r3, r2]
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d000      	beq.n	8003a0e <HAL_I2C_IsDeviceReady+0x26>
 8003a0c:	e0fe      	b.n	8003c0c <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699a      	ldr	r2, [r3, #24]
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	401a      	ands	r2, r3
 8003a1a:	2380      	movs	r3, #128	; 0x80
 8003a1c:	021b      	lsls	r3, r3, #8
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d101      	bne.n	8003a26 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
 8003a24:	e0f3      	b.n	8003c0e <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2240      	movs	r2, #64	; 0x40
 8003a2a:	5c9b      	ldrb	r3, [r3, r2]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_I2C_IsDeviceReady+0x4c>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e0ec      	b.n	8003c0e <HAL_I2C_IsDeviceReady+0x226>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2240      	movs	r2, #64	; 0x40
 8003a38:	2101      	movs	r1, #1
 8003a3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2241      	movs	r2, #65	; 0x41
 8003a40:	2124      	movs	r1, #36	; 0x24
 8003a42:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d107      	bne.n	8003a62 <HAL_I2C_IsDeviceReady+0x7a>
 8003a52:	230a      	movs	r3, #10
 8003a54:	18fb      	adds	r3, r7, r3
 8003a56:	881b      	ldrh	r3, [r3, #0]
 8003a58:	059b      	lsls	r3, r3, #22
 8003a5a:	0d9b      	lsrs	r3, r3, #22
 8003a5c:	4a6e      	ldr	r2, [pc, #440]	; (8003c18 <HAL_I2C_IsDeviceReady+0x230>)
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	e007      	b.n	8003a72 <HAL_I2C_IsDeviceReady+0x8a>
 8003a62:	230a      	movs	r3, #10
 8003a64:	18fb      	adds	r3, r7, r3
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	059b      	lsls	r3, r3, #22
 8003a6a:	0d9b      	lsrs	r3, r3, #22
 8003a6c:	22a0      	movs	r2, #160	; 0xa0
 8003a6e:	0192      	lsls	r2, r2, #6
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003a78:	f7fe fc76 	bl	8002368 <HAL_GetTick>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2220      	movs	r2, #32
 8003a88:	4013      	ands	r3, r2
 8003a8a:	3b20      	subs	r3, #32
 8003a8c:	425a      	negs	r2, r3
 8003a8e:	4153      	adcs	r3, r2
 8003a90:	b2da      	uxtb	r2, r3
 8003a92:	231f      	movs	r3, #31
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	2210      	movs	r2, #16
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	3b10      	subs	r3, #16
 8003aa4:	425a      	negs	r2, r3
 8003aa6:	4153      	adcs	r3, r2
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	231e      	movs	r3, #30
 8003aac:	18fb      	adds	r3, r7, r3
 8003aae:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003ab0:	e035      	b.n	8003b1e <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	d01a      	beq.n	8003aee <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ab8:	f7fe fc56 	bl	8002368 <HAL_GetTick>
 8003abc:	0002      	movs	r2, r0
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d302      	bcc.n	8003ace <HAL_I2C_IsDeviceReady+0xe6>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10f      	bne.n	8003aee <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2241      	movs	r2, #65	; 0x41
 8003ad2:	2120      	movs	r1, #32
 8003ad4:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ada:	2220      	movs	r2, #32
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2240      	movs	r2, #64	; 0x40
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e08f      	b.n	8003c0e <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	2220      	movs	r2, #32
 8003af6:	4013      	ands	r3, r2
 8003af8:	3b20      	subs	r3, #32
 8003afa:	425a      	negs	r2, r3
 8003afc:	4153      	adcs	r3, r2
 8003afe:	b2da      	uxtb	r2, r3
 8003b00:	231f      	movs	r3, #31
 8003b02:	18fb      	adds	r3, r7, r3
 8003b04:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	2210      	movs	r2, #16
 8003b0e:	4013      	ands	r3, r2
 8003b10:	3b10      	subs	r3, #16
 8003b12:	425a      	negs	r2, r3
 8003b14:	4153      	adcs	r3, r2
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	231e      	movs	r3, #30
 8003b1a:	18fb      	adds	r3, r7, r3
 8003b1c:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003b1e:	231f      	movs	r3, #31
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d104      	bne.n	8003b32 <HAL_I2C_IsDeviceReady+0x14a>
 8003b28:	231e      	movs	r3, #30
 8003b2a:	18fb      	adds	r3, r7, r3
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0bf      	beq.n	8003ab2 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	2210      	movs	r2, #16
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d01a      	beq.n	8003b76 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	9300      	str	r3, [sp, #0]
 8003b48:	0013      	movs	r3, r2
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	2120      	movs	r1, #32
 8003b4e:	f000 f94d 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003b52:	1e03      	subs	r3, r0, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e059      	b.n	8003c0e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2241      	movs	r2, #65	; 0x41
 8003b66:	2120      	movs	r1, #32
 8003b68:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2240      	movs	r2, #64	; 0x40
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e04b      	b.n	8003c0e <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	0013      	movs	r3, r2
 8003b80:	2200      	movs	r2, #0
 8003b82:	2120      	movs	r1, #32
 8003b84:	f000 f932 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e03e      	b.n	8003c0e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2210      	movs	r2, #16
 8003b96:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d119      	bne.n	8003bdc <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2180      	movs	r1, #128	; 0x80
 8003bb4:	01c9      	lsls	r1, r1, #7
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003bba:	683a      	ldr	r2, [r7, #0]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	0013      	movs	r3, r2
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	f000 f910 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003bcc:	1e03      	subs	r3, r0, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e01c      	b.n	8003c0e <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	3301      	adds	r3, #1
 8003be0:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	687a      	ldr	r2, [r7, #4]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d900      	bls.n	8003bec <HAL_I2C_IsDeviceReady+0x204>
 8003bea:	e72e      	b.n	8003a4a <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2241      	movs	r2, #65	; 0x41
 8003bf0:	2120      	movs	r1, #32
 8003bf2:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2240      	movs	r2, #64	; 0x40
 8003c04:	2100      	movs	r1, #0
 8003c06:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
  }
}
 8003c0e:	0018      	movs	r0, r3
 8003c10:	46bd      	mov	sp, r7
 8003c12:	b008      	add	sp, #32
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	02002000 	.word	0x02002000

08003c1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b5b0      	push	{r4, r5, r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	000c      	movs	r4, r1
 8003c26:	0010      	movs	r0, r2
 8003c28:	0019      	movs	r1, r3
 8003c2a:	250a      	movs	r5, #10
 8003c2c:	197b      	adds	r3, r7, r5
 8003c2e:	1c22      	adds	r2, r4, #0
 8003c30:	801a      	strh	r2, [r3, #0]
 8003c32:	2308      	movs	r3, #8
 8003c34:	18fb      	adds	r3, r7, r3
 8003c36:	1c02      	adds	r2, r0, #0
 8003c38:	801a      	strh	r2, [r3, #0]
 8003c3a:	1dbb      	adds	r3, r7, #6
 8003c3c:	1c0a      	adds	r2, r1, #0
 8003c3e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c40:	1dbb      	adds	r3, r7, #6
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	2380      	movs	r3, #128	; 0x80
 8003c48:	045c      	lsls	r4, r3, #17
 8003c4a:	197b      	adds	r3, r7, r5
 8003c4c:	8819      	ldrh	r1, [r3, #0]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	4b23      	ldr	r3, [pc, #140]	; (8003ce0 <I2C_RequestMemoryWrite+0xc4>)
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	0023      	movs	r3, r4
 8003c56:	f000 f9e9 	bl	800402c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c5c:	6a39      	ldr	r1, [r7, #32]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	0018      	movs	r0, r3
 8003c62:	f000 f902 	bl	8003e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c66:	1e03      	subs	r3, r0, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e033      	b.n	8003cd6 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c6e:	1dbb      	adds	r3, r7, #6
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d107      	bne.n	8003c86 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c76:	2308      	movs	r3, #8
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28
 8003c84:	e019      	b.n	8003cba <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c86:	2308      	movs	r3, #8
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	b2da      	uxtb	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9a:	6a39      	ldr	r1, [r7, #32]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f000 f8e3 	bl	8003e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ca4:	1e03      	subs	r3, r0, #0
 8003ca6:	d001      	beq.n	8003cac <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e014      	b.n	8003cd6 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cac:	2308      	movs	r3, #8
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b2da      	uxtb	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cba:	6a3a      	ldr	r2, [r7, #32]
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	0013      	movs	r3, r2
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	f000 f890 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003ccc:	1e03      	subs	r3, r0, #0
 8003cce:	d001      	beq.n	8003cd4 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	0018      	movs	r0, r3
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b004      	add	sp, #16
 8003cdc:	bdb0      	pop	{r4, r5, r7, pc}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	80002000 	.word	0x80002000

08003ce4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce4:	b5b0      	push	{r4, r5, r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	000c      	movs	r4, r1
 8003cee:	0010      	movs	r0, r2
 8003cf0:	0019      	movs	r1, r3
 8003cf2:	250a      	movs	r5, #10
 8003cf4:	197b      	adds	r3, r7, r5
 8003cf6:	1c22      	adds	r2, r4, #0
 8003cf8:	801a      	strh	r2, [r3, #0]
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	1c02      	adds	r2, r0, #0
 8003d00:	801a      	strh	r2, [r3, #0]
 8003d02:	1dbb      	adds	r3, r7, #6
 8003d04:	1c0a      	adds	r2, r1, #0
 8003d06:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d08:	1dbb      	adds	r3, r7, #6
 8003d0a:	881b      	ldrh	r3, [r3, #0]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	197b      	adds	r3, r7, r5
 8003d10:	8819      	ldrh	r1, [r3, #0]
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	4b23      	ldr	r3, [pc, #140]	; (8003da4 <I2C_RequestMemoryRead+0xc0>)
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f000 f987 	bl	800402c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d20:	6a39      	ldr	r1, [r7, #32]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f000 f8a0 	bl	8003e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d2a:	1e03      	subs	r3, r0, #0
 8003d2c:	d001      	beq.n	8003d32 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e033      	b.n	8003d9a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d32:	1dbb      	adds	r3, r7, #6
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d107      	bne.n	8003d4a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	18fb      	adds	r3, r7, r3
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	629a      	str	r2, [r3, #40]	; 0x28
 8003d48:	e019      	b.n	8003d7e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	18fb      	adds	r3, r7, r3
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	0a1b      	lsrs	r3, r3, #8
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5e:	6a39      	ldr	r1, [r7, #32]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	0018      	movs	r0, r3
 8003d64:	f000 f881 	bl	8003e6a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d68:	1e03      	subs	r3, r0, #0
 8003d6a:	d001      	beq.n	8003d70 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e014      	b.n	8003d9a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d70:	2308      	movs	r3, #8
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7e:	6a3a      	ldr	r2, [r7, #32]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	0013      	movs	r3, r2
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2140      	movs	r1, #64	; 0x40
 8003d8c:	f000 f82e 	bl	8003dec <I2C_WaitOnFlagUntilTimeout>
 8003d90:	1e03      	subs	r3, r0, #0
 8003d92:	d001      	beq.n	8003d98 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b004      	add	sp, #16
 8003da0:	bdb0      	pop	{r4, r5, r7, pc}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	80002000 	.word	0x80002000

08003da8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2202      	movs	r2, #2
 8003db8:	4013      	ands	r3, r2
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d103      	bne.n	8003dc6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	4013      	ands	r3, r2
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d007      	beq.n	8003de4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699a      	ldr	r2, [r3, #24]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2101      	movs	r1, #1
 8003de0:	430a      	orrs	r2, r1
 8003de2:	619a      	str	r2, [r3, #24]
  }
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b002      	add	sp, #8
 8003dea:	bd80      	pop	{r7, pc}

08003dec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	1dfb      	adds	r3, r7, #7
 8003dfa:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dfc:	e021      	b.n	8003e42 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	3301      	adds	r3, #1
 8003e02:	d01e      	beq.n	8003e42 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e04:	f7fe fab0 	bl	8002368 <HAL_GetTick>
 8003e08:	0002      	movs	r2, r0
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d302      	bcc.n	8003e1a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d113      	bne.n	8003e42 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	2220      	movs	r2, #32
 8003e20:	431a      	orrs	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2241      	movs	r2, #65	; 0x41
 8003e2a:	2120      	movs	r1, #32
 8003e2c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2242      	movs	r2, #66	; 0x42
 8003e32:	2100      	movs	r1, #0
 8003e34:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2240      	movs	r2, #64	; 0x40
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e00f      	b.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	425a      	negs	r2, r3
 8003e52:	4153      	adcs	r3, r2
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	001a      	movs	r2, r3
 8003e58:	1dfb      	adds	r3, r7, #7
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d0ce      	beq.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	0018      	movs	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	b004      	add	sp, #16
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e76:	e02b      	b.n	8003ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	68b9      	ldr	r1, [r7, #8]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	0018      	movs	r0, r3
 8003e80:	f000 f86e 	bl	8003f60 <I2C_IsAcknowledgeFailed>
 8003e84:	1e03      	subs	r3, r0, #0
 8003e86:	d001      	beq.n	8003e8c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e029      	b.n	8003ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	d01e      	beq.n	8003ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e92:	f7fe fa69 	bl	8002368 <HAL_GetTick>
 8003e96:	0002      	movs	r2, r0
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d302      	bcc.n	8003ea8 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d113      	bne.n	8003ed0 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	2220      	movs	r2, #32
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2241      	movs	r2, #65	; 0x41
 8003eb8:	2120      	movs	r1, #32
 8003eba:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2242      	movs	r2, #66	; 0x42
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2240      	movs	r2, #64	; 0x40
 8003ec8:	2100      	movs	r1, #0
 8003eca:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e007      	b.n	8003ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2202      	movs	r2, #2
 8003ed8:	4013      	ands	r3, r2
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d1cc      	bne.n	8003e78 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b004      	add	sp, #16
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ef4:	e028      	b.n	8003f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	0018      	movs	r0, r3
 8003efe:	f000 f82f 	bl	8003f60 <I2C_IsAcknowledgeFailed>
 8003f02:	1e03      	subs	r3, r0, #0
 8003f04:	d001      	beq.n	8003f0a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e026      	b.n	8003f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f0a:	f7fe fa2d 	bl	8002368 <HAL_GetTick>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d302      	bcc.n	8003f20 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d113      	bne.n	8003f48 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	2220      	movs	r2, #32
 8003f26:	431a      	orrs	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2241      	movs	r2, #65	; 0x41
 8003f30:	2120      	movs	r1, #32
 8003f32:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2242      	movs	r2, #66	; 0x42
 8003f38:	2100      	movs	r1, #0
 8003f3a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2240      	movs	r2, #64	; 0x40
 8003f40:	2100      	movs	r1, #0
 8003f42:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e007      	b.n	8003f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b20      	cmp	r3, #32
 8003f54:	d1cf      	bne.n	8003ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f56:	2300      	movs	r3, #0
}
 8003f58:	0018      	movs	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b004      	add	sp, #16
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	2210      	movs	r2, #16
 8003f74:	4013      	ands	r3, r2
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d151      	bne.n	800401e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f7a:	e021      	b.n	8003fc0 <I2C_IsAcknowledgeFailed+0x60>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	d01e      	beq.n	8003fc0 <I2C_IsAcknowledgeFailed+0x60>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f82:	f7fe f9f1 	bl	8002368 <HAL_GetTick>
 8003f86:	0002      	movs	r2, r0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d302      	bcc.n	8003f98 <I2C_IsAcknowledgeFailed+0x38>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d113      	bne.n	8003fc0 <I2C_IsAcknowledgeFailed+0x60>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2241      	movs	r2, #65	; 0x41
 8003fa8:	2120      	movs	r1, #32
 8003faa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2242      	movs	r2, #66	; 0x42
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2240      	movs	r2, #64	; 0x40
 8003fb8:	2100      	movs	r1, #0
 8003fba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e02f      	b.n	8004020 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d1d6      	bne.n	8003f7c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2210      	movs	r2, #16
 8003fd4:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	f7ff fee1 	bl	8003da8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	490d      	ldr	r1, [pc, #52]	; (8004028 <I2C_IsAcknowledgeFailed+0xc8>)
 8003ff2:	400a      	ands	r2, r1
 8003ff4:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2241      	movs	r2, #65	; 0x41
 8004006:	2120      	movs	r1, #32
 8004008:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2242      	movs	r2, #66	; 0x42
 800400e:	2100      	movs	r1, #0
 8004010:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2240      	movs	r2, #64	; 0x40
 8004016:	2100      	movs	r1, #0
 8004018:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	0018      	movs	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	b004      	add	sp, #16
 8004026:	bd80      	pop	{r7, pc}
 8004028:	fe00e800 	.word	0xfe00e800

0800402c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800402c:	b590      	push	{r4, r7, lr}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	0008      	movs	r0, r1
 8004036:	0011      	movs	r1, r2
 8004038:	607b      	str	r3, [r7, #4]
 800403a:	240a      	movs	r4, #10
 800403c:	193b      	adds	r3, r7, r4
 800403e:	1c02      	adds	r2, r0, #0
 8004040:	801a      	strh	r2, [r3, #0]
 8004042:	2009      	movs	r0, #9
 8004044:	183b      	adds	r3, r7, r0
 8004046:	1c0a      	adds	r2, r1, #0
 8004048:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	6a3a      	ldr	r2, [r7, #32]
 8004052:	0d51      	lsrs	r1, r2, #21
 8004054:	2280      	movs	r2, #128	; 0x80
 8004056:	00d2      	lsls	r2, r2, #3
 8004058:	400a      	ands	r2, r1
 800405a:	490e      	ldr	r1, [pc, #56]	; (8004094 <I2C_TransferConfig+0x68>)
 800405c:	430a      	orrs	r2, r1
 800405e:	43d2      	mvns	r2, r2
 8004060:	401a      	ands	r2, r3
 8004062:	0011      	movs	r1, r2
 8004064:	193b      	adds	r3, r7, r4
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	059b      	lsls	r3, r3, #22
 800406a:	0d9a      	lsrs	r2, r3, #22
 800406c:	183b      	adds	r3, r7, r0
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	0418      	lsls	r0, r3, #16
 8004072:	23ff      	movs	r3, #255	; 0xff
 8004074:	041b      	lsls	r3, r3, #16
 8004076:	4003      	ands	r3, r0
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	431a      	orrs	r2, r3
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	431a      	orrs	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	46bd      	mov	sp, r7
 800408e:	b005      	add	sp, #20
 8004090:	bd90      	pop	{r4, r7, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	03ff63ff 	.word	0x03ff63ff

08004098 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2241      	movs	r2, #65	; 0x41
 80040a6:	5c9b      	ldrb	r3, [r3, r2]
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d138      	bne.n	8004120 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2240      	movs	r2, #64	; 0x40
 80040b2:	5c9b      	ldrb	r3, [r3, r2]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d101      	bne.n	80040bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040b8:	2302      	movs	r3, #2
 80040ba:	e032      	b.n	8004122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2240      	movs	r2, #64	; 0x40
 80040c0:	2101      	movs	r1, #1
 80040c2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2241      	movs	r2, #65	; 0x41
 80040c8:	2124      	movs	r1, #36	; 0x24
 80040ca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2101      	movs	r1, #1
 80040d8:	438a      	bics	r2, r1
 80040da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4911      	ldr	r1, [pc, #68]	; (800412c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80040e8:	400a      	ands	r2, r1
 80040ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6819      	ldr	r1, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2101      	movs	r1, #1
 8004108:	430a      	orrs	r2, r1
 800410a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2241      	movs	r2, #65	; 0x41
 8004110:	2120      	movs	r1, #32
 8004112:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2240      	movs	r2, #64	; 0x40
 8004118:	2100      	movs	r1, #0
 800411a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800411c:	2300      	movs	r3, #0
 800411e:	e000      	b.n	8004122 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004120:	2302      	movs	r3, #2
  }
}
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b002      	add	sp, #8
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	ffffefff 	.word	0xffffefff

08004130 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2241      	movs	r2, #65	; 0x41
 800413e:	5c9b      	ldrb	r3, [r3, r2]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b20      	cmp	r3, #32
 8004144:	d139      	bne.n	80041ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2240      	movs	r2, #64	; 0x40
 800414a:	5c9b      	ldrb	r3, [r3, r2]
 800414c:	2b01      	cmp	r3, #1
 800414e:	d101      	bne.n	8004154 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004150:	2302      	movs	r3, #2
 8004152:	e033      	b.n	80041bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2240      	movs	r2, #64	; 0x40
 8004158:	2101      	movs	r1, #1
 800415a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2241      	movs	r2, #65	; 0x41
 8004160:	2124      	movs	r1, #36	; 0x24
 8004162:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2101      	movs	r1, #1
 8004170:	438a      	bics	r2, r1
 8004172:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4a11      	ldr	r2, [pc, #68]	; (80041c4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004180:	4013      	ands	r3, r2
 8004182:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	2101      	movs	r1, #1
 80041a2:	430a      	orrs	r2, r1
 80041a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2241      	movs	r2, #65	; 0x41
 80041aa:	2120      	movs	r1, #32
 80041ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2240      	movs	r2, #64	; 0x40
 80041b2:	2100      	movs	r1, #0
 80041b4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80041b6:	2300      	movs	r3, #0
 80041b8:	e000      	b.n	80041bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041ba:	2302      	movs	r3, #2
  }
}
 80041bc:	0018      	movs	r0, r3
 80041be:	46bd      	mov	sp, r7
 80041c0:	b004      	add	sp, #16
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	fffff0ff 	.word	0xfffff0ff

080041c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80041d0:	4b19      	ldr	r3, [pc, #100]	; (8004238 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a19      	ldr	r2, [pc, #100]	; (800423c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80041d6:	4013      	ands	r3, r2
 80041d8:	0019      	movs	r1, r3
 80041da:	4b17      	ldr	r3, [pc, #92]	; (8004238 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	430a      	orrs	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	2380      	movs	r3, #128	; 0x80
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d11f      	bne.n	800422c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80041ec:	4b14      	ldr	r3, [pc, #80]	; (8004240 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	0013      	movs	r3, r2
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	189b      	adds	r3, r3, r2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	4912      	ldr	r1, [pc, #72]	; (8004244 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80041fa:	0018      	movs	r0, r3
 80041fc:	f7fb ff94 	bl	8000128 <__udivsi3>
 8004200:	0003      	movs	r3, r0
 8004202:	3301      	adds	r3, #1
 8004204:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004206:	e008      	b.n	800421a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3b01      	subs	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e001      	b.n	800421a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e009      	b.n	800422e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800421a:	4b07      	ldr	r3, [pc, #28]	; (8004238 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	2380      	movs	r3, #128	; 0x80
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	401a      	ands	r2, r3
 8004224:	2380      	movs	r3, #128	; 0x80
 8004226:	00db      	lsls	r3, r3, #3
 8004228:	429a      	cmp	r2, r3
 800422a:	d0ed      	beq.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	0018      	movs	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	b004      	add	sp, #16
 8004234:	bd80      	pop	{r7, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	40007000 	.word	0x40007000
 800423c:	fffff9ff 	.word	0xfffff9ff
 8004240:	20000008 	.word	0x20000008
 8004244:	000f4240 	.word	0x000f4240

08004248 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e304      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2201      	movs	r2, #1
 8004260:	4013      	ands	r3, r2
 8004262:	d100      	bne.n	8004266 <HAL_RCC_OscConfig+0x1e>
 8004264:	e07c      	b.n	8004360 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004266:	4bc3      	ldr	r3, [pc, #780]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2238      	movs	r2, #56	; 0x38
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004270:	4bc0      	ldr	r3, [pc, #768]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	2203      	movs	r2, #3
 8004276:	4013      	ands	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	2b10      	cmp	r3, #16
 800427e:	d102      	bne.n	8004286 <HAL_RCC_OscConfig+0x3e>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b03      	cmp	r3, #3
 8004284:	d002      	beq.n	800428c <HAL_RCC_OscConfig+0x44>
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	2b08      	cmp	r3, #8
 800428a:	d10b      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	4bb9      	ldr	r3, [pc, #740]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	2380      	movs	r3, #128	; 0x80
 8004292:	029b      	lsls	r3, r3, #10
 8004294:	4013      	ands	r3, r2
 8004296:	d062      	beq.n	800435e <HAL_RCC_OscConfig+0x116>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d15e      	bne.n	800435e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e2df      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	2380      	movs	r3, #128	; 0x80
 80042aa:	025b      	lsls	r3, r3, #9
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d107      	bne.n	80042c0 <HAL_RCC_OscConfig+0x78>
 80042b0:	4bb0      	ldr	r3, [pc, #704]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	4baf      	ldr	r3, [pc, #700]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80042b6:	2180      	movs	r1, #128	; 0x80
 80042b8:	0249      	lsls	r1, r1, #9
 80042ba:	430a      	orrs	r2, r1
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	e020      	b.n	8004302 <HAL_RCC_OscConfig+0xba>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	23a0      	movs	r3, #160	; 0xa0
 80042c6:	02db      	lsls	r3, r3, #11
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d10e      	bne.n	80042ea <HAL_RCC_OscConfig+0xa2>
 80042cc:	4ba9      	ldr	r3, [pc, #676]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	4ba8      	ldr	r3, [pc, #672]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80042d2:	2180      	movs	r1, #128	; 0x80
 80042d4:	02c9      	lsls	r1, r1, #11
 80042d6:	430a      	orrs	r2, r1
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	4ba6      	ldr	r3, [pc, #664]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	4ba5      	ldr	r3, [pc, #660]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80042e0:	2180      	movs	r1, #128	; 0x80
 80042e2:	0249      	lsls	r1, r1, #9
 80042e4:	430a      	orrs	r2, r1
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	e00b      	b.n	8004302 <HAL_RCC_OscConfig+0xba>
 80042ea:	4ba2      	ldr	r3, [pc, #648]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4ba1      	ldr	r3, [pc, #644]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80042f0:	49a1      	ldr	r1, [pc, #644]	; (8004578 <HAL_RCC_OscConfig+0x330>)
 80042f2:	400a      	ands	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	4b9f      	ldr	r3, [pc, #636]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	4b9e      	ldr	r3, [pc, #632]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80042fc:	499f      	ldr	r1, [pc, #636]	; (800457c <HAL_RCC_OscConfig+0x334>)
 80042fe:	400a      	ands	r2, r1
 8004300:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d014      	beq.n	8004334 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800430a:	f7fe f82d 	bl	8002368 <HAL_GetTick>
 800430e:	0003      	movs	r3, r0
 8004310:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004314:	f7fe f828 	bl	8002368 <HAL_GetTick>
 8004318:	0002      	movs	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	; 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e29e      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004326:	4b93      	ldr	r3, [pc, #588]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	2380      	movs	r3, #128	; 0x80
 800432c:	029b      	lsls	r3, r3, #10
 800432e:	4013      	ands	r3, r2
 8004330:	d0f0      	beq.n	8004314 <HAL_RCC_OscConfig+0xcc>
 8004332:	e015      	b.n	8004360 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004334:	f7fe f818 	bl	8002368 <HAL_GetTick>
 8004338:	0003      	movs	r3, r0
 800433a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800433e:	f7fe f813 	bl	8002368 <HAL_GetTick>
 8004342:	0002      	movs	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b64      	cmp	r3, #100	; 0x64
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e289      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004350:	4b88      	ldr	r3, [pc, #544]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	029b      	lsls	r3, r3, #10
 8004358:	4013      	ands	r3, r2
 800435a:	d1f0      	bne.n	800433e <HAL_RCC_OscConfig+0xf6>
 800435c:	e000      	b.n	8004360 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800435e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2202      	movs	r2, #2
 8004366:	4013      	ands	r3, r2
 8004368:	d100      	bne.n	800436c <HAL_RCC_OscConfig+0x124>
 800436a:	e099      	b.n	80044a0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800436c:	4b81      	ldr	r3, [pc, #516]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2238      	movs	r2, #56	; 0x38
 8004372:	4013      	ands	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004376:	4b7f      	ldr	r3, [pc, #508]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2203      	movs	r2, #3
 800437c:	4013      	ands	r3, r2
 800437e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004380:	69bb      	ldr	r3, [r7, #24]
 8004382:	2b10      	cmp	r3, #16
 8004384:	d102      	bne.n	800438c <HAL_RCC_OscConfig+0x144>
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b02      	cmp	r3, #2
 800438a:	d002      	beq.n	8004392 <HAL_RCC_OscConfig+0x14a>
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d135      	bne.n	80043fe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004392:	4b78      	ldr	r3, [pc, #480]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	2380      	movs	r3, #128	; 0x80
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4013      	ands	r3, r2
 800439c:	d005      	beq.n	80043aa <HAL_RCC_OscConfig+0x162>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e25c      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043aa:	4b72      	ldr	r3, [pc, #456]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	4a74      	ldr	r2, [pc, #464]	; (8004580 <HAL_RCC_OscConfig+0x338>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	0019      	movs	r1, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	021a      	lsls	r2, r3, #8
 80043ba:	4b6e      	ldr	r3, [pc, #440]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80043bc:	430a      	orrs	r2, r1
 80043be:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d112      	bne.n	80043ec <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043c6:	4b6b      	ldr	r3, [pc, #428]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6e      	ldr	r2, [pc, #440]	; (8004584 <HAL_RCC_OscConfig+0x33c>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	0019      	movs	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	4b67      	ldr	r3, [pc, #412]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80043d6:	430a      	orrs	r2, r1
 80043d8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80043da:	4b66      	ldr	r3, [pc, #408]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	0adb      	lsrs	r3, r3, #11
 80043e0:	2207      	movs	r2, #7
 80043e2:	4013      	ands	r3, r2
 80043e4:	4a68      	ldr	r2, [pc, #416]	; (8004588 <HAL_RCC_OscConfig+0x340>)
 80043e6:	40da      	lsrs	r2, r3
 80043e8:	4b68      	ldr	r3, [pc, #416]	; (800458c <HAL_RCC_OscConfig+0x344>)
 80043ea:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043ec:	4b68      	ldr	r3, [pc, #416]	; (8004590 <HAL_RCC_OscConfig+0x348>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7fd ff5d 	bl	80022b0 <HAL_InitTick>
 80043f6:	1e03      	subs	r3, r0, #0
 80043f8:	d051      	beq.n	800449e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e232      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d030      	beq.n	8004468 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004406:	4b5b      	ldr	r3, [pc, #364]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a5e      	ldr	r2, [pc, #376]	; (8004584 <HAL_RCC_OscConfig+0x33c>)
 800440c:	4013      	ands	r3, r2
 800440e:	0019      	movs	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	4b57      	ldr	r3, [pc, #348]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004416:	430a      	orrs	r2, r1
 8004418:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800441a:	4b56      	ldr	r3, [pc, #344]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	4b55      	ldr	r3, [pc, #340]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004420:	2180      	movs	r1, #128	; 0x80
 8004422:	0049      	lsls	r1, r1, #1
 8004424:	430a      	orrs	r2, r1
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fd ff9e 	bl	8002368 <HAL_GetTick>
 800442c:	0003      	movs	r3, r0
 800442e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004432:	f7fd ff99 	bl	8002368 <HAL_GetTick>
 8004436:	0002      	movs	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e20f      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004444:	4b4b      	ldr	r3, [pc, #300]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	2380      	movs	r3, #128	; 0x80
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4013      	ands	r3, r2
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004450:	4b48      	ldr	r3, [pc, #288]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4a4a      	ldr	r2, [pc, #296]	; (8004580 <HAL_RCC_OscConfig+0x338>)
 8004456:	4013      	ands	r3, r2
 8004458:	0019      	movs	r1, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	021a      	lsls	r2, r3, #8
 8004460:	4b44      	ldr	r3, [pc, #272]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004462:	430a      	orrs	r2, r1
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	e01b      	b.n	80044a0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004468:	4b42      	ldr	r3, [pc, #264]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	4b41      	ldr	r3, [pc, #260]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 800446e:	4949      	ldr	r1, [pc, #292]	; (8004594 <HAL_RCC_OscConfig+0x34c>)
 8004470:	400a      	ands	r2, r1
 8004472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fd ff78 	bl	8002368 <HAL_GetTick>
 8004478:	0003      	movs	r3, r0
 800447a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800447e:	f7fd ff73 	bl	8002368 <HAL_GetTick>
 8004482:	0002      	movs	r2, r0
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e1e9      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004490:	4b38      	ldr	r3, [pc, #224]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	2380      	movs	r3, #128	; 0x80
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	4013      	ands	r3, r2
 800449a:	d1f0      	bne.n	800447e <HAL_RCC_OscConfig+0x236>
 800449c:	e000      	b.n	80044a0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800449e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2208      	movs	r2, #8
 80044a6:	4013      	ands	r3, r2
 80044a8:	d047      	beq.n	800453a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80044aa:	4b32      	ldr	r3, [pc, #200]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2238      	movs	r2, #56	; 0x38
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b18      	cmp	r3, #24
 80044b4:	d10a      	bne.n	80044cc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80044b6:	4b2f      	ldr	r3, [pc, #188]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80044b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044ba:	2202      	movs	r2, #2
 80044bc:	4013      	ands	r3, r2
 80044be:	d03c      	beq.n	800453a <HAL_RCC_OscConfig+0x2f2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d138      	bne.n	800453a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e1cb      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d019      	beq.n	8004508 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80044d4:	4b27      	ldr	r3, [pc, #156]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80044d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044d8:	4b26      	ldr	r3, [pc, #152]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80044da:	2101      	movs	r1, #1
 80044dc:	430a      	orrs	r2, r1
 80044de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fd ff42 	bl	8002368 <HAL_GetTick>
 80044e4:	0003      	movs	r3, r0
 80044e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044e8:	e008      	b.n	80044fc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ea:	f7fd ff3d 	bl	8002368 <HAL_GetTick>
 80044ee:	0002      	movs	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d901      	bls.n	80044fc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	e1b3      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044fc:	4b1d      	ldr	r3, [pc, #116]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 80044fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004500:	2202      	movs	r2, #2
 8004502:	4013      	ands	r3, r2
 8004504:	d0f1      	beq.n	80044ea <HAL_RCC_OscConfig+0x2a2>
 8004506:	e018      	b.n	800453a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004508:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 800450a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800450c:	4b19      	ldr	r3, [pc, #100]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 800450e:	2101      	movs	r1, #1
 8004510:	438a      	bics	r2, r1
 8004512:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fd ff28 	bl	8002368 <HAL_GetTick>
 8004518:	0003      	movs	r3, r0
 800451a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800451e:	f7fd ff23 	bl	8002368 <HAL_GetTick>
 8004522:	0002      	movs	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e199      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004530:	4b10      	ldr	r3, [pc, #64]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004534:	2202      	movs	r2, #2
 8004536:	4013      	ands	r3, r2
 8004538:	d1f1      	bne.n	800451e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2204      	movs	r2, #4
 8004540:	4013      	ands	r3, r2
 8004542:	d100      	bne.n	8004546 <HAL_RCC_OscConfig+0x2fe>
 8004544:	e0c6      	b.n	80046d4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004546:	231f      	movs	r3, #31
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800454e:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2238      	movs	r2, #56	; 0x38
 8004554:	4013      	ands	r3, r2
 8004556:	2b20      	cmp	r3, #32
 8004558:	d11e      	bne.n	8004598 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800455a:	4b06      	ldr	r3, [pc, #24]	; (8004574 <HAL_RCC_OscConfig+0x32c>)
 800455c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800455e:	2202      	movs	r2, #2
 8004560:	4013      	ands	r3, r2
 8004562:	d100      	bne.n	8004566 <HAL_RCC_OscConfig+0x31e>
 8004564:	e0b6      	b.n	80046d4 <HAL_RCC_OscConfig+0x48c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d000      	beq.n	8004570 <HAL_RCC_OscConfig+0x328>
 800456e:	e0b1      	b.n	80046d4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e177      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
 8004574:	40021000 	.word	0x40021000
 8004578:	fffeffff 	.word	0xfffeffff
 800457c:	fffbffff 	.word	0xfffbffff
 8004580:	ffff80ff 	.word	0xffff80ff
 8004584:	ffffc7ff 	.word	0xffffc7ff
 8004588:	00f42400 	.word	0x00f42400
 800458c:	20000008 	.word	0x20000008
 8004590:	20000000 	.word	0x20000000
 8004594:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004598:	4bb4      	ldr	r3, [pc, #720]	; (800486c <HAL_RCC_OscConfig+0x624>)
 800459a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	055b      	lsls	r3, r3, #21
 80045a0:	4013      	ands	r3, r2
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_OscConfig+0x360>
 80045a4:	2301      	movs	r3, #1
 80045a6:	e000      	b.n	80045aa <HAL_RCC_OscConfig+0x362>
 80045a8:	2300      	movs	r3, #0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d011      	beq.n	80045d2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80045ae:	4baf      	ldr	r3, [pc, #700]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80045b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045b2:	4bae      	ldr	r3, [pc, #696]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80045b4:	2180      	movs	r1, #128	; 0x80
 80045b6:	0549      	lsls	r1, r1, #21
 80045b8:	430a      	orrs	r2, r1
 80045ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80045bc:	4bab      	ldr	r3, [pc, #684]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80045be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045c0:	2380      	movs	r3, #128	; 0x80
 80045c2:	055b      	lsls	r3, r3, #21
 80045c4:	4013      	ands	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
 80045c8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80045ca:	231f      	movs	r3, #31
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d2:	4ba7      	ldr	r3, [pc, #668]	; (8004870 <HAL_RCC_OscConfig+0x628>)
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	4013      	ands	r3, r2
 80045dc:	d11a      	bne.n	8004614 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045de:	4ba4      	ldr	r3, [pc, #656]	; (8004870 <HAL_RCC_OscConfig+0x628>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4ba3      	ldr	r3, [pc, #652]	; (8004870 <HAL_RCC_OscConfig+0x628>)
 80045e4:	2180      	movs	r1, #128	; 0x80
 80045e6:	0049      	lsls	r1, r1, #1
 80045e8:	430a      	orrs	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80045ec:	f7fd febc 	bl	8002368 <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045f6:	f7fd feb7 	bl	8002368 <HAL_GetTick>
 80045fa:	0002      	movs	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e12d      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004608:	4b99      	ldr	r3, [pc, #612]	; (8004870 <HAL_RCC_OscConfig+0x628>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	2380      	movs	r3, #128	; 0x80
 800460e:	005b      	lsls	r3, r3, #1
 8004610:	4013      	ands	r3, r2
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d106      	bne.n	800462a <HAL_RCC_OscConfig+0x3e2>
 800461c:	4b93      	ldr	r3, [pc, #588]	; (800486c <HAL_RCC_OscConfig+0x624>)
 800461e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004620:	4b92      	ldr	r3, [pc, #584]	; (800486c <HAL_RCC_OscConfig+0x624>)
 8004622:	2101      	movs	r1, #1
 8004624:	430a      	orrs	r2, r1
 8004626:	65da      	str	r2, [r3, #92]	; 0x5c
 8004628:	e01c      	b.n	8004664 <HAL_RCC_OscConfig+0x41c>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b05      	cmp	r3, #5
 8004630:	d10c      	bne.n	800464c <HAL_RCC_OscConfig+0x404>
 8004632:	4b8e      	ldr	r3, [pc, #568]	; (800486c <HAL_RCC_OscConfig+0x624>)
 8004634:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004636:	4b8d      	ldr	r3, [pc, #564]	; (800486c <HAL_RCC_OscConfig+0x624>)
 8004638:	2104      	movs	r1, #4
 800463a:	430a      	orrs	r2, r1
 800463c:	65da      	str	r2, [r3, #92]	; 0x5c
 800463e:	4b8b      	ldr	r3, [pc, #556]	; (800486c <HAL_RCC_OscConfig+0x624>)
 8004640:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004642:	4b8a      	ldr	r3, [pc, #552]	; (800486c <HAL_RCC_OscConfig+0x624>)
 8004644:	2101      	movs	r1, #1
 8004646:	430a      	orrs	r2, r1
 8004648:	65da      	str	r2, [r3, #92]	; 0x5c
 800464a:	e00b      	b.n	8004664 <HAL_RCC_OscConfig+0x41c>
 800464c:	4b87      	ldr	r3, [pc, #540]	; (800486c <HAL_RCC_OscConfig+0x624>)
 800464e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004650:	4b86      	ldr	r3, [pc, #536]	; (800486c <HAL_RCC_OscConfig+0x624>)
 8004652:	2101      	movs	r1, #1
 8004654:	438a      	bics	r2, r1
 8004656:	65da      	str	r2, [r3, #92]	; 0x5c
 8004658:	4b84      	ldr	r3, [pc, #528]	; (800486c <HAL_RCC_OscConfig+0x624>)
 800465a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800465c:	4b83      	ldr	r3, [pc, #524]	; (800486c <HAL_RCC_OscConfig+0x624>)
 800465e:	2104      	movs	r1, #4
 8004660:	438a      	bics	r2, r1
 8004662:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d014      	beq.n	8004696 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fd fe7c 	bl	8002368 <HAL_GetTick>
 8004670:	0003      	movs	r3, r0
 8004672:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004674:	e009      	b.n	800468a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004676:	f7fd fe77 	bl	8002368 <HAL_GetTick>
 800467a:	0002      	movs	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	4a7c      	ldr	r2, [pc, #496]	; (8004874 <HAL_RCC_OscConfig+0x62c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e0ec      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800468a:	4b78      	ldr	r3, [pc, #480]	; (800486c <HAL_RCC_OscConfig+0x624>)
 800468c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468e:	2202      	movs	r2, #2
 8004690:	4013      	ands	r3, r2
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x42e>
 8004694:	e013      	b.n	80046be <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004696:	f7fd fe67 	bl	8002368 <HAL_GetTick>
 800469a:	0003      	movs	r3, r0
 800469c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800469e:	e009      	b.n	80046b4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046a0:	f7fd fe62 	bl	8002368 <HAL_GetTick>
 80046a4:	0002      	movs	r2, r0
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	4a72      	ldr	r2, [pc, #456]	; (8004874 <HAL_RCC_OscConfig+0x62c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e0d7      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80046b4:	4b6d      	ldr	r3, [pc, #436]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80046b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b8:	2202      	movs	r2, #2
 80046ba:	4013      	ands	r3, r2
 80046bc:	d1f0      	bne.n	80046a0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80046be:	231f      	movs	r3, #31
 80046c0:	18fb      	adds	r3, r7, r3
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d105      	bne.n	80046d4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80046c8:	4b68      	ldr	r3, [pc, #416]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80046ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046cc:	4b67      	ldr	r3, [pc, #412]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80046ce:	496a      	ldr	r1, [pc, #424]	; (8004878 <HAL_RCC_OscConfig+0x630>)
 80046d0:	400a      	ands	r2, r1
 80046d2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d100      	bne.n	80046de <HAL_RCC_OscConfig+0x496>
 80046dc:	e0c1      	b.n	8004862 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046de:	4b63      	ldr	r3, [pc, #396]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2238      	movs	r2, #56	; 0x38
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b10      	cmp	r3, #16
 80046e8:	d100      	bne.n	80046ec <HAL_RCC_OscConfig+0x4a4>
 80046ea:	e081      	b.n	80047f0 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	69db      	ldr	r3, [r3, #28]
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d156      	bne.n	80047a2 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046f4:	4b5d      	ldr	r3, [pc, #372]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	4b5c      	ldr	r3, [pc, #368]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80046fa:	4960      	ldr	r1, [pc, #384]	; (800487c <HAL_RCC_OscConfig+0x634>)
 80046fc:	400a      	ands	r2, r1
 80046fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004700:	f7fd fe32 	bl	8002368 <HAL_GetTick>
 8004704:	0003      	movs	r3, r0
 8004706:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800470a:	f7fd fe2d 	bl	8002368 <HAL_GetTick>
 800470e:	0002      	movs	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0a3      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800471c:	4b53      	ldr	r3, [pc, #332]	; (800486c <HAL_RCC_OscConfig+0x624>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	049b      	lsls	r3, r3, #18
 8004724:	4013      	ands	r3, r2
 8004726:	d1f0      	bne.n	800470a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004728:	4b50      	ldr	r3, [pc, #320]	; (800486c <HAL_RCC_OscConfig+0x624>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4a54      	ldr	r2, [pc, #336]	; (8004880 <HAL_RCC_OscConfig+0x638>)
 800472e:	4013      	ands	r3, r2
 8004730:	0019      	movs	r1, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1a      	ldr	r2, [r3, #32]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	021b      	lsls	r3, r3, #8
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004754:	431a      	orrs	r2, r3
 8004756:	4b45      	ldr	r3, [pc, #276]	; (800486c <HAL_RCC_OscConfig+0x624>)
 8004758:	430a      	orrs	r2, r1
 800475a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800475c:	4b43      	ldr	r3, [pc, #268]	; (800486c <HAL_RCC_OscConfig+0x624>)
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	4b42      	ldr	r3, [pc, #264]	; (800486c <HAL_RCC_OscConfig+0x624>)
 8004762:	2180      	movs	r1, #128	; 0x80
 8004764:	0449      	lsls	r1, r1, #17
 8004766:	430a      	orrs	r2, r1
 8004768:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800476a:	4b40      	ldr	r3, [pc, #256]	; (800486c <HAL_RCC_OscConfig+0x624>)
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	4b3f      	ldr	r3, [pc, #252]	; (800486c <HAL_RCC_OscConfig+0x624>)
 8004770:	2180      	movs	r1, #128	; 0x80
 8004772:	0549      	lsls	r1, r1, #21
 8004774:	430a      	orrs	r2, r1
 8004776:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004778:	f7fd fdf6 	bl	8002368 <HAL_GetTick>
 800477c:	0003      	movs	r3, r0
 800477e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004780:	e008      	b.n	8004794 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004782:	f7fd fdf1 	bl	8002368 <HAL_GetTick>
 8004786:	0002      	movs	r2, r0
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d901      	bls.n	8004794 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e067      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004794:	4b35      	ldr	r3, [pc, #212]	; (800486c <HAL_RCC_OscConfig+0x624>)
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	049b      	lsls	r3, r3, #18
 800479c:	4013      	ands	r3, r2
 800479e:	d0f0      	beq.n	8004782 <HAL_RCC_OscConfig+0x53a>
 80047a0:	e05f      	b.n	8004862 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a2:	4b32      	ldr	r3, [pc, #200]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	4b31      	ldr	r3, [pc, #196]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80047a8:	4934      	ldr	r1, [pc, #208]	; (800487c <HAL_RCC_OscConfig+0x634>)
 80047aa:	400a      	ands	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80047ae:	4b2f      	ldr	r3, [pc, #188]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80047b4:	2103      	movs	r1, #3
 80047b6:	438a      	bics	r2, r1
 80047b8:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80047ba:	4b2c      	ldr	r3, [pc, #176]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	4b2b      	ldr	r3, [pc, #172]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80047c0:	4930      	ldr	r1, [pc, #192]	; (8004884 <HAL_RCC_OscConfig+0x63c>)
 80047c2:	400a      	ands	r2, r1
 80047c4:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fd fdcf 	bl	8002368 <HAL_GetTick>
 80047ca:	0003      	movs	r3, r0
 80047cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ce:	e008      	b.n	80047e2 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d0:	f7fd fdca 	bl	8002368 <HAL_GetTick>
 80047d4:	0002      	movs	r2, r0
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e040      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047e2:	4b22      	ldr	r3, [pc, #136]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	2380      	movs	r3, #128	; 0x80
 80047e8:	049b      	lsls	r3, r3, #18
 80047ea:	4013      	ands	r3, r2
 80047ec:	d1f0      	bne.n	80047d0 <HAL_RCC_OscConfig+0x588>
 80047ee:	e038      	b.n	8004862 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d101      	bne.n	80047fc <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 80047f8:	2301      	movs	r3, #1
 80047fa:	e033      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80047fc:	4b1b      	ldr	r3, [pc, #108]	; (800486c <HAL_RCC_OscConfig+0x624>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2203      	movs	r2, #3
 8004806:	401a      	ands	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a1b      	ldr	r3, [r3, #32]
 800480c:	429a      	cmp	r2, r3
 800480e:	d126      	bne.n	800485e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	2270      	movs	r2, #112	; 0x70
 8004814:	401a      	ands	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481a:	429a      	cmp	r2, r3
 800481c:	d11f      	bne.n	800485e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	23fe      	movs	r3, #254	; 0xfe
 8004822:	01db      	lsls	r3, r3, #7
 8004824:	401a      	ands	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d116      	bne.n	800485e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	23f8      	movs	r3, #248	; 0xf8
 8004834:	039b      	lsls	r3, r3, #14
 8004836:	401a      	ands	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d10e      	bne.n	800485e <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	23e0      	movs	r3, #224	; 0xe0
 8004844:	051b      	lsls	r3, r3, #20
 8004846:	401a      	ands	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d106      	bne.n	800485e <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	0f5b      	lsrs	r3, r3, #29
 8004854:	075a      	lsls	r2, r3, #29
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d001      	beq.n	8004862 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	0018      	movs	r0, r3
 8004866:	46bd      	mov	sp, r7
 8004868:	b008      	add	sp, #32
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40021000 	.word	0x40021000
 8004870:	40007000 	.word	0x40007000
 8004874:	00001388 	.word	0x00001388
 8004878:	efffffff 	.word	0xefffffff
 800487c:	feffffff 	.word	0xfeffffff
 8004880:	11c1808c 	.word	0x11c1808c
 8004884:	eefeffff 	.word	0xeefeffff

08004888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0e9      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800489c:	4b76      	ldr	r3, [pc, #472]	; (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2207      	movs	r2, #7
 80048a2:	4013      	ands	r3, r2
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d91e      	bls.n	80048e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048aa:	4b73      	ldr	r3, [pc, #460]	; (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2207      	movs	r2, #7
 80048b0:	4393      	bics	r3, r2
 80048b2:	0019      	movs	r1, r3
 80048b4:	4b70      	ldr	r3, [pc, #448]	; (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048bc:	f7fd fd54 	bl	8002368 <HAL_GetTick>
 80048c0:	0003      	movs	r3, r0
 80048c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048c4:	e009      	b.n	80048da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048c6:	f7fd fd4f 	bl	8002368 <HAL_GetTick>
 80048ca:	0002      	movs	r2, r0
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	4a6a      	ldr	r2, [pc, #424]	; (8004a7c <HAL_RCC_ClockConfig+0x1f4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e0ca      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048da:	4b67      	ldr	r3, [pc, #412]	; (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2207      	movs	r2, #7
 80048e0:	4013      	ands	r3, r2
 80048e2:	683a      	ldr	r2, [r7, #0]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d1ee      	bne.n	80048c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2202      	movs	r2, #2
 80048ee:	4013      	ands	r3, r2
 80048f0:	d015      	beq.n	800491e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2204      	movs	r2, #4
 80048f8:	4013      	ands	r3, r2
 80048fa:	d006      	beq.n	800490a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048fc:	4b60      	ldr	r3, [pc, #384]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	4b5f      	ldr	r3, [pc, #380]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 8004902:	21e0      	movs	r1, #224	; 0xe0
 8004904:	01c9      	lsls	r1, r1, #7
 8004906:	430a      	orrs	r2, r1
 8004908:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800490a:	4b5d      	ldr	r3, [pc, #372]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	4a5d      	ldr	r2, [pc, #372]	; (8004a84 <HAL_RCC_ClockConfig+0x1fc>)
 8004910:	4013      	ands	r3, r2
 8004912:	0019      	movs	r1, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	4b59      	ldr	r3, [pc, #356]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 800491a:	430a      	orrs	r2, r1
 800491c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2201      	movs	r2, #1
 8004924:	4013      	ands	r3, r2
 8004926:	d057      	beq.n	80049d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d107      	bne.n	8004940 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004930:	4b53      	ldr	r3, [pc, #332]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	2380      	movs	r3, #128	; 0x80
 8004936:	029b      	lsls	r3, r3, #10
 8004938:	4013      	ands	r3, r2
 800493a:	d12b      	bne.n	8004994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e097      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b02      	cmp	r3, #2
 8004946:	d107      	bne.n	8004958 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004948:	4b4d      	ldr	r3, [pc, #308]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	049b      	lsls	r3, r3, #18
 8004950:	4013      	ands	r3, r2
 8004952:	d11f      	bne.n	8004994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e08b      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d107      	bne.n	8004970 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004960:	4b47      	ldr	r3, [pc, #284]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	2380      	movs	r3, #128	; 0x80
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4013      	ands	r3, r2
 800496a:	d113      	bne.n	8004994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e07f      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b03      	cmp	r3, #3
 8004976:	d106      	bne.n	8004986 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004978:	4b41      	ldr	r3, [pc, #260]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 800497a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497c:	2202      	movs	r2, #2
 800497e:	4013      	ands	r3, r2
 8004980:	d108      	bne.n	8004994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e074      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004986:	4b3e      	ldr	r3, [pc, #248]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 8004988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800498a:	2202      	movs	r2, #2
 800498c:	4013      	ands	r3, r2
 800498e:	d101      	bne.n	8004994 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e06d      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004994:	4b3a      	ldr	r3, [pc, #232]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2207      	movs	r2, #7
 800499a:	4393      	bics	r3, r2
 800499c:	0019      	movs	r1, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	4b37      	ldr	r3, [pc, #220]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 80049a4:	430a      	orrs	r2, r1
 80049a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a8:	f7fd fcde 	bl	8002368 <HAL_GetTick>
 80049ac:	0003      	movs	r3, r0
 80049ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049b0:	e009      	b.n	80049c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049b2:	f7fd fcd9 	bl	8002368 <HAL_GetTick>
 80049b6:	0002      	movs	r2, r0
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	4a2f      	ldr	r2, [pc, #188]	; (8004a7c <HAL_RCC_ClockConfig+0x1f4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e054      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c6:	4b2e      	ldr	r3, [pc, #184]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	2238      	movs	r2, #56	; 0x38
 80049cc:	401a      	ands	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d1ec      	bne.n	80049b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049d8:	4b27      	ldr	r3, [pc, #156]	; (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2207      	movs	r2, #7
 80049de:	4013      	ands	r3, r2
 80049e0:	683a      	ldr	r2, [r7, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d21e      	bcs.n	8004a24 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e6:	4b24      	ldr	r3, [pc, #144]	; (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2207      	movs	r2, #7
 80049ec:	4393      	bics	r3, r2
 80049ee:	0019      	movs	r1, r3
 80049f0:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049f8:	f7fd fcb6 	bl	8002368 <HAL_GetTick>
 80049fc:	0003      	movs	r3, r0
 80049fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a00:	e009      	b.n	8004a16 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a02:	f7fd fcb1 	bl	8002368 <HAL_GetTick>
 8004a06:	0002      	movs	r2, r0
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	4a1b      	ldr	r2, [pc, #108]	; (8004a7c <HAL_RCC_ClockConfig+0x1f4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e02c      	b.n	8004a70 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a16:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <HAL_RCC_ClockConfig+0x1f0>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2207      	movs	r2, #7
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d1ee      	bne.n	8004a02 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2204      	movs	r2, #4
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a2e:	4b14      	ldr	r3, [pc, #80]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	4a15      	ldr	r2, [pc, #84]	; (8004a88 <HAL_RCC_ClockConfig+0x200>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	0019      	movs	r1, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	4b10      	ldr	r3, [pc, #64]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004a42:	f000 f829 	bl	8004a98 <HAL_RCC_GetSysClockFreq>
 8004a46:	0001      	movs	r1, r0
 8004a48:	4b0d      	ldr	r3, [pc, #52]	; (8004a80 <HAL_RCC_ClockConfig+0x1f8>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	0a1b      	lsrs	r3, r3, #8
 8004a4e:	220f      	movs	r2, #15
 8004a50:	401a      	ands	r2, r3
 8004a52:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <HAL_RCC_ClockConfig+0x204>)
 8004a54:	0092      	lsls	r2, r2, #2
 8004a56:	58d3      	ldr	r3, [r2, r3]
 8004a58:	221f      	movs	r2, #31
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	000a      	movs	r2, r1
 8004a5e:	40da      	lsrs	r2, r3
 8004a60:	4b0b      	ldr	r3, [pc, #44]	; (8004a90 <HAL_RCC_ClockConfig+0x208>)
 8004a62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a64:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <HAL_RCC_ClockConfig+0x20c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f7fd fc21 	bl	80022b0 <HAL_InitTick>
 8004a6e:	0003      	movs	r3, r0
}
 8004a70:	0018      	movs	r0, r3
 8004a72:	46bd      	mov	sp, r7
 8004a74:	b004      	add	sp, #16
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40022000 	.word	0x40022000
 8004a7c:	00001388 	.word	0x00001388
 8004a80:	40021000 	.word	0x40021000
 8004a84:	fffff0ff 	.word	0xfffff0ff
 8004a88:	ffff8fff 	.word	0xffff8fff
 8004a8c:	0800899c 	.word	0x0800899c
 8004a90:	20000008 	.word	0x20000008
 8004a94:	20000000 	.word	0x20000000

08004a98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b086      	sub	sp, #24
 8004a9c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a9e:	4b3c      	ldr	r3, [pc, #240]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	2238      	movs	r2, #56	; 0x38
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	d10f      	bne.n	8004ac8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004aa8:	4b39      	ldr	r3, [pc, #228]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	0adb      	lsrs	r3, r3, #11
 8004aae:	2207      	movs	r2, #7
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	409a      	lsls	r2, r3
 8004ab6:	0013      	movs	r3, r2
 8004ab8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004aba:	6839      	ldr	r1, [r7, #0]
 8004abc:	4835      	ldr	r0, [pc, #212]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004abe:	f7fb fb33 	bl	8000128 <__udivsi3>
 8004ac2:	0003      	movs	r3, r0
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	e05d      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac8:	4b31      	ldr	r3, [pc, #196]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2238      	movs	r2, #56	; 0x38
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d102      	bne.n	8004ada <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ad4:	4b30      	ldr	r3, [pc, #192]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ad6:	613b      	str	r3, [r7, #16]
 8004ad8:	e054      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ada:	4b2d      	ldr	r3, [pc, #180]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2238      	movs	r2, #56	; 0x38
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	2b10      	cmp	r3, #16
 8004ae4:	d138      	bne.n	8004b58 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004ae6:	4b2a      	ldr	r3, [pc, #168]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2203      	movs	r2, #3
 8004aec:	4013      	ands	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004af0:	4b27      	ldr	r3, [pc, #156]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	2207      	movs	r2, #7
 8004af8:	4013      	ands	r3, r2
 8004afa:	3301      	adds	r3, #1
 8004afc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b03      	cmp	r3, #3
 8004b02:	d10d      	bne.n	8004b20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	4824      	ldr	r0, [pc, #144]	; (8004b98 <HAL_RCC_GetSysClockFreq+0x100>)
 8004b08:	f7fb fb0e 	bl	8000128 <__udivsi3>
 8004b0c:	0003      	movs	r3, r0
 8004b0e:	0019      	movs	r1, r3
 8004b10:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	0a1b      	lsrs	r3, r3, #8
 8004b16:	227f      	movs	r2, #127	; 0x7f
 8004b18:	4013      	ands	r3, r2
 8004b1a:	434b      	muls	r3, r1
 8004b1c:	617b      	str	r3, [r7, #20]
        break;
 8004b1e:	e00d      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	481c      	ldr	r0, [pc, #112]	; (8004b94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004b24:	f7fb fb00 	bl	8000128 <__udivsi3>
 8004b28:	0003      	movs	r3, r0
 8004b2a:	0019      	movs	r1, r3
 8004b2c:	4b18      	ldr	r3, [pc, #96]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	0a1b      	lsrs	r3, r3, #8
 8004b32:	227f      	movs	r2, #127	; 0x7f
 8004b34:	4013      	ands	r3, r2
 8004b36:	434b      	muls	r3, r1
 8004b38:	617b      	str	r3, [r7, #20]
        break;
 8004b3a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004b3c:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	0f5b      	lsrs	r3, r3, #29
 8004b42:	2207      	movs	r2, #7
 8004b44:	4013      	ands	r3, r2
 8004b46:	3301      	adds	r3, #1
 8004b48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	6978      	ldr	r0, [r7, #20]
 8004b4e:	f7fb faeb 	bl	8000128 <__udivsi3>
 8004b52:	0003      	movs	r3, r0
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	e015      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b58:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	2238      	movs	r2, #56	; 0x38
 8004b5e:	4013      	ands	r3, r2
 8004b60:	2b20      	cmp	r3, #32
 8004b62:	d103      	bne.n	8004b6c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	021b      	lsls	r3, r3, #8
 8004b68:	613b      	str	r3, [r7, #16]
 8004b6a:	e00b      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b6c:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2238      	movs	r2, #56	; 0x38
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b18      	cmp	r3, #24
 8004b76:	d103      	bne.n	8004b80 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b78:	23fa      	movs	r3, #250	; 0xfa
 8004b7a:	01db      	lsls	r3, r3, #7
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	e001      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b84:	693b      	ldr	r3, [r7, #16]
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b006      	add	sp, #24
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	40021000 	.word	0x40021000
 8004b94:	00f42400 	.word	0x00f42400
 8004b98:	007a1200 	.word	0x007a1200

08004b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b086      	sub	sp, #24
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004ba4:	2313      	movs	r3, #19
 8004ba6:	18fb      	adds	r3, r7, r3
 8004ba8:	2200      	movs	r2, #0
 8004baa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bac:	2312      	movs	r3, #18
 8004bae:	18fb      	adds	r3, r7, r3
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	2380      	movs	r3, #128	; 0x80
 8004bba:	029b      	lsls	r3, r3, #10
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	d100      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004bc0:	e0a4      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bc2:	2311      	movs	r3, #17
 8004bc4:	18fb      	adds	r3, r7, r3
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bca:	4ba5      	ldr	r3, [pc, #660]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bcc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bce:	2380      	movs	r3, #128	; 0x80
 8004bd0:	055b      	lsls	r3, r3, #21
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	d111      	bne.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bd6:	4ba2      	ldr	r3, [pc, #648]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bda:	4ba1      	ldr	r3, [pc, #644]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004bdc:	2180      	movs	r1, #128	; 0x80
 8004bde:	0549      	lsls	r1, r1, #21
 8004be0:	430a      	orrs	r2, r1
 8004be2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004be4:	4b9e      	ldr	r3, [pc, #632]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004be6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	055b      	lsls	r3, r3, #21
 8004bec:	4013      	ands	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bf2:	2311      	movs	r3, #17
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bfa:	4b9a      	ldr	r3, [pc, #616]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b99      	ldr	r3, [pc, #612]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004c00:	2180      	movs	r1, #128	; 0x80
 8004c02:	0049      	lsls	r1, r1, #1
 8004c04:	430a      	orrs	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c08:	f7fd fbae 	bl	8002368 <HAL_GetTick>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c10:	e00b      	b.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c12:	f7fd fba9 	bl	8002368 <HAL_GetTick>
 8004c16:	0002      	movs	r2, r0
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d904      	bls.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8004c20:	2313      	movs	r3, #19
 8004c22:	18fb      	adds	r3, r7, r3
 8004c24:	2203      	movs	r2, #3
 8004c26:	701a      	strb	r2, [r3, #0]
        break;
 8004c28:	e005      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c2a:	4b8e      	ldr	r3, [pc, #568]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	2380      	movs	r3, #128	; 0x80
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	4013      	ands	r3, r2
 8004c34:	d0ed      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8004c36:	2313      	movs	r3, #19
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d154      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c40:	4b87      	ldr	r3, [pc, #540]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c44:	23c0      	movs	r3, #192	; 0xc0
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4013      	ands	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d019      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d014      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c5c:	4b80      	ldr	r3, [pc, #512]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c60:	4a81      	ldr	r2, [pc, #516]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c66:	4b7e      	ldr	r3, [pc, #504]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c6a:	4b7d      	ldr	r3, [pc, #500]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c6c:	2180      	movs	r1, #128	; 0x80
 8004c6e:	0249      	lsls	r1, r1, #9
 8004c70:	430a      	orrs	r2, r1
 8004c72:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c74:	4b7a      	ldr	r3, [pc, #488]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c78:	4b79      	ldr	r3, [pc, #484]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c7a:	497c      	ldr	r1, [pc, #496]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c80:	4b77      	ldr	r3, [pc, #476]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	d016      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fd fb6b 	bl	8002368 <HAL_GetTick>
 8004c92:	0003      	movs	r3, r0
 8004c94:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c96:	e00c      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c98:	f7fd fb66 	bl	8002368 <HAL_GetTick>
 8004c9c:	0002      	movs	r2, r0
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	4a73      	ldr	r2, [pc, #460]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d904      	bls.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8004ca8:	2313      	movs	r3, #19
 8004caa:	18fb      	adds	r3, r7, r3
 8004cac:	2203      	movs	r2, #3
 8004cae:	701a      	strb	r2, [r3, #0]
            break;
 8004cb0:	e004      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cb2:	4b6b      	ldr	r3, [pc, #428]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	2202      	movs	r2, #2
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d0ed      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8004cbc:	2313      	movs	r3, #19
 8004cbe:	18fb      	adds	r3, r7, r3
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10a      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cc6:	4b66      	ldr	r3, [pc, #408]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cca:	4a67      	ldr	r2, [pc, #412]	; (8004e68 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	0019      	movs	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd4:	4b62      	ldr	r3, [pc, #392]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cda:	e00c      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cdc:	2312      	movs	r3, #18
 8004cde:	18fb      	adds	r3, r7, r3
 8004ce0:	2213      	movs	r2, #19
 8004ce2:	18ba      	adds	r2, r7, r2
 8004ce4:	7812      	ldrb	r2, [r2, #0]
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	e005      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cea:	2312      	movs	r3, #18
 8004cec:	18fb      	adds	r3, r7, r3
 8004cee:	2213      	movs	r2, #19
 8004cf0:	18ba      	adds	r2, r7, r2
 8004cf2:	7812      	ldrb	r2, [r2, #0]
 8004cf4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cf6:	2311      	movs	r3, #17
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d105      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d00:	4b57      	ldr	r3, [pc, #348]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d04:	4b56      	ldr	r3, [pc, #344]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d06:	495b      	ldr	r1, [pc, #364]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004d08:	400a      	ands	r2, r1
 8004d0a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2201      	movs	r2, #1
 8004d12:	4013      	ands	r3, r2
 8004d14:	d009      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d16:	4b52      	ldr	r3, [pc, #328]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	4393      	bics	r3, r2
 8004d1e:	0019      	movs	r1, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	4b4e      	ldr	r3, [pc, #312]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d26:	430a      	orrs	r2, r1
 8004d28:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2210      	movs	r2, #16
 8004d30:	4013      	ands	r3, r2
 8004d32:	d009      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d34:	4b4a      	ldr	r3, [pc, #296]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d38:	4a4f      	ldr	r2, [pc, #316]	; (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	0019      	movs	r1, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	4b47      	ldr	r3, [pc, #284]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d44:	430a      	orrs	r2, r1
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	4013      	ands	r3, r2
 8004d52:	d009      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d54:	4b42      	ldr	r3, [pc, #264]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d58:	4a48      	ldr	r2, [pc, #288]	; (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	4b3f      	ldr	r3, [pc, #252]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d64:	430a      	orrs	r2, r1
 8004d66:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	4013      	ands	r3, r2
 8004d72:	d009      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d74:	4b3a      	ldr	r3, [pc, #232]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	4a41      	ldr	r2, [pc, #260]	; (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	0019      	movs	r1, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699a      	ldr	r2, [r3, #24]
 8004d82:	4b37      	ldr	r3, [pc, #220]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d84:	430a      	orrs	r2, r1
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2220      	movs	r2, #32
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d009      	beq.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d92:	4b33      	ldr	r3, [pc, #204]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	4a3b      	ldr	r2, [pc, #236]	; (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	4b2f      	ldr	r3, [pc, #188]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004da2:	430a      	orrs	r2, r1
 8004da4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	2380      	movs	r3, #128	; 0x80
 8004dac:	01db      	lsls	r3, r3, #7
 8004dae:	4013      	ands	r3, r2
 8004db0:	d015      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004db2:	4b2b      	ldr	r3, [pc, #172]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	0899      	lsrs	r1, r3, #2
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69da      	ldr	r2, [r3, #28]
 8004dbe:	4b28      	ldr	r3, [pc, #160]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69da      	ldr	r2, [r3, #28]
 8004dc8:	2380      	movs	r3, #128	; 0x80
 8004dca:	05db      	lsls	r3, r3, #23
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d106      	bne.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004dd0:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dd6:	2180      	movs	r1, #128	; 0x80
 8004dd8:	0249      	lsls	r1, r1, #9
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	039b      	lsls	r3, r3, #14
 8004de6:	4013      	ands	r3, r2
 8004de8:	d016      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004dea:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	4a26      	ldr	r2, [pc, #152]	; (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004df0:	4013      	ands	r3, r2
 8004df2:	0019      	movs	r1, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a1a      	ldr	r2, [r3, #32]
 8004df8:	4b19      	ldr	r3, [pc, #100]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1a      	ldr	r2, [r3, #32]
 8004e02:	2380      	movs	r3, #128	; 0x80
 8004e04:	03db      	lsls	r3, r3, #15
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d106      	bne.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004e0a:	4b15      	ldr	r3, [pc, #84]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	4b14      	ldr	r3, [pc, #80]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e10:	2180      	movs	r1, #128	; 0x80
 8004e12:	0449      	lsls	r1, r1, #17
 8004e14:	430a      	orrs	r2, r1
 8004e16:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	2380      	movs	r3, #128	; 0x80
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	4013      	ands	r3, r2
 8004e22:	d016      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004e24:	4b0e      	ldr	r3, [pc, #56]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	0019      	movs	r1, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691a      	ldr	r2, [r3, #16]
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e34:	430a      	orrs	r2, r1
 8004e36:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691a      	ldr	r2, [r3, #16]
 8004e3c:	2380      	movs	r3, #128	; 0x80
 8004e3e:	01db      	lsls	r3, r3, #7
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d106      	bne.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004e4a:	2180      	movs	r1, #128	; 0x80
 8004e4c:	0249      	lsls	r1, r1, #9
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004e52:	2312      	movs	r3, #18
 8004e54:	18fb      	adds	r3, r7, r3
 8004e56:	781b      	ldrb	r3, [r3, #0]
}
 8004e58:	0018      	movs	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b006      	add	sp, #24
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	40021000 	.word	0x40021000
 8004e64:	40007000 	.word	0x40007000
 8004e68:	fffffcff 	.word	0xfffffcff
 8004e6c:	fffeffff 	.word	0xfffeffff
 8004e70:	00001388 	.word	0x00001388
 8004e74:	efffffff 	.word	0xefffffff
 8004e78:	fffff3ff 	.word	0xfffff3ff
 8004e7c:	fff3ffff 	.word	0xfff3ffff
 8004e80:	ffcfffff 	.word	0xffcfffff
 8004e84:	ffffcfff 	.word	0xffffcfff
 8004e88:	ffbfffff 	.word	0xffbfffff
 8004e8c:	ffff3fff 	.word	0xffff3fff

08004e90 <BQ27441_G1_ParseFlags>:
\param [out] bq27441_g1 Initialized variable of type bq27441_g1_t
\param [in] regval Flag register value
*/

void BQ27441_G1_ParseFlags(bq27441_g1_t *bq27441_g1, uint16_t regval)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	000a      	movs	r2, r1
 8004e9a:	1cbb      	adds	r3, r7, #2
 8004e9c:	801a      	strh	r2, [r3, #0]
	//low byte
	bq27441_g1->flags.dsg = (regval & 0x01);
 8004e9e:	1cbb      	adds	r3, r7, #2
 8004ea0:	881b      	ldrh	r3, [r3, #0]
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	749a      	strb	r2, [r3, #18]
	bq27441_g1->flags.socf = (regval & 0x02) >> 1;
 8004eae:	1cbb      	adds	r3, r7, #2
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	105b      	asrs	r3, r3, #1
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	4013      	ands	r3, r2
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	745a      	strb	r2, [r3, #17]
	bq27441_g1->flags.soc1 = (regval & 0x04) >> 2;
 8004ec0:	1cbb      	adds	r3, r7, #2
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	109b      	asrs	r3, r3, #2
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2201      	movs	r2, #1
 8004eca:	4013      	ands	r3, r2
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	741a      	strb	r2, [r3, #16]
	bq27441_g1->flags.bat_det = (regval & 0x08) >> 3;
 8004ed2:	1cbb      	adds	r3, r7, #2
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	10db      	asrs	r3, r3, #3
 8004ed8:	b2db      	uxtb	r3, r3
 8004eda:	2201      	movs	r2, #1
 8004edc:	4013      	ands	r3, r2
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	73da      	strb	r2, [r3, #15]
	bq27441_g1->flags.cfgupmode = (regval & 0x10) >> 4;
 8004ee4:	1cbb      	adds	r3, r7, #2
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	111b      	asrs	r3, r3, #4
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2201      	movs	r2, #1
 8004eee:	4013      	ands	r3, r2
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	739a      	strb	r2, [r3, #14]
	bq27441_g1->flags.itpor = (regval & 0x20) >> 5;
 8004ef6:	1cbb      	adds	r3, r7, #2
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	115b      	asrs	r3, r3, #5
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2201      	movs	r2, #1
 8004f00:	4013      	ands	r3, r2
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	735a      	strb	r2, [r3, #13]
	bq27441_g1->flags.ocvtaken = (regval & 0x80) >> 7;
 8004f08:	1cbb      	adds	r3, r7, #2
 8004f0a:	881b      	ldrh	r3, [r3, #0]
 8004f0c:	11db      	asrs	r3, r3, #7
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	2201      	movs	r2, #1
 8004f12:	4013      	ands	r3, r2
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	731a      	strb	r2, [r3, #12]

	//high byte
	bq27441_g1->flags.chg = (regval & 0x100) >> 8;
 8004f1a:	1cbb      	adds	r3, r7, #2
 8004f1c:	881b      	ldrh	r3, [r3, #0]
 8004f1e:	121b      	asrs	r3, r3, #8
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	2201      	movs	r2, #1
 8004f24:	4013      	ands	r3, r2
 8004f26:	b2da      	uxtb	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	72da      	strb	r2, [r3, #11]
	bq27441_g1->flags.fc = (regval & 0x200) >> 9;
 8004f2c:	1cbb      	adds	r3, r7, #2
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	125b      	asrs	r3, r3, #9
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2201      	movs	r2, #1
 8004f36:	4013      	ands	r3, r2
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	729a      	strb	r2, [r3, #10]
	bq27441_g1->flags.ut = (regval & 0x4000) >> 14;
 8004f3e:	1cbb      	adds	r3, r7, #2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	139b      	asrs	r3, r3, #14
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2201      	movs	r2, #1
 8004f48:	4013      	ands	r3, r2
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	725a      	strb	r2, [r3, #9]
	bq27441_g1->flags.ot = (regval & 0x8000) >> 15;
 8004f50:	1cbb      	adds	r3, r7, #2
 8004f52:	881b      	ldrh	r3, [r3, #0]
 8004f54:	0bdb      	lsrs	r3, r3, #15
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	721a      	strb	r2, [r3, #8]
}
 8004f5e:	46c0      	nop			; (mov r8, r8)
 8004f60:	46bd      	mov	sp, r7
 8004f62:	b002      	add	sp, #8
 8004f64:	bd80      	pop	{r7, pc}
	...

08004f68 <BQ27441_G1_GetTemperature>:
\param [in] bq27441_g1 Initialized variable of type bq27441_g1_t
\return Value of temperature in Celsius
*/

float BQ27441_G1_GetTemperature(bq27441_g1_t *bq27441_g1)
{
 8004f68:	b5b0      	push	{r4, r5, r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	float result = 0;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]

	uint16_t buffer;
	buffer = bq27441_g1->Read(BQ27441_G1_ADDR, BQ27441_G1_TEMPERATURE_CMD);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	250a      	movs	r5, #10
 8004f7a:	197c      	adds	r4, r7, r5
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	2055      	movs	r0, #85	; 0x55
 8004f80:	4798      	blx	r3
 8004f82:	0003      	movs	r3, r0
 8004f84:	8023      	strh	r3, [r4, #0]

	//Kelvin to Celsius
	result = ((float)buffer * 0.1) - 273;
 8004f86:	197b      	adds	r3, r7, r5
 8004f88:	881b      	ldrh	r3, [r3, #0]
 8004f8a:	0018      	movs	r0, r3
 8004f8c:	f7fb fa9e 	bl	80004cc <__aeabi_ui2f>
 8004f90:	1c03      	adds	r3, r0, #0
 8004f92:	1c18      	adds	r0, r3, #0
 8004f94:	f7fd f878 	bl	8002088 <__aeabi_f2d>
 8004f98:	4a0c      	ldr	r2, [pc, #48]	; (8004fcc <BQ27441_G1_GetTemperature+0x64>)
 8004f9a:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <BQ27441_G1_GetTemperature+0x68>)
 8004f9c:	f7fc f9fc 	bl	8001398 <__aeabi_dmul>
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	000c      	movs	r4, r1
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	0021      	movs	r1, r4
 8004fa8:	2200      	movs	r2, #0
 8004faa:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <BQ27441_G1_GetTemperature+0x6c>)
 8004fac:	f7fc fc66 	bl	800187c <__aeabi_dsub>
 8004fb0:	0003      	movs	r3, r0
 8004fb2:	000c      	movs	r4, r1
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	0021      	movs	r1, r4
 8004fb8:	f7fd f8b8 	bl	800212c <__aeabi_d2f>
 8004fbc:	1c03      	adds	r3, r0, #0
 8004fbe:	60fb      	str	r3, [r7, #12]

	return result;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
}
 8004fc2:	1c18      	adds	r0, r3, #0
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	b004      	add	sp, #16
 8004fc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004fca:	46c0      	nop			; (mov r8, r8)
 8004fcc:	9999999a 	.word	0x9999999a
 8004fd0:	3fb99999 	.word	0x3fb99999
 8004fd4:	40711000 	.word	0x40711000

08004fd8 <BQ27441_G1_GetVoltage>:
\param [in] bq27441_g1 Initialized variable of type bq27441_g1_t
\return Value of voltage in mV
*/

uint16_t BQ27441_G1_GetVoltage(bq27441_g1_t *bq27441_g1)
{
 8004fd8:	b5b0      	push	{r4, r5, r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
	uint16_t buffer;
	buffer = bq27441_g1->Read(BQ27441_G1_ADDR, BQ27441_G1_VOLTAGE_CMD);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	250e      	movs	r5, #14
 8004fe6:	197c      	adds	r4, r7, r5
 8004fe8:	2104      	movs	r1, #4
 8004fea:	2055      	movs	r0, #85	; 0x55
 8004fec:	4798      	blx	r3
 8004fee:	0003      	movs	r3, r0
 8004ff0:	8023      	strh	r3, [r4, #0]
	return buffer;
 8004ff2:	197b      	adds	r3, r7, r5
 8004ff4:	881b      	ldrh	r3, [r3, #0]
}
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	b004      	add	sp, #16
 8004ffc:	bdb0      	pop	{r4, r5, r7, pc}

08004ffe <BQ27441_G1_GetFlags>:
\param [in] bq27441_g1 Initialized variable of type bq27441_g1_t
\return Value of Flag Register
*/

uint16_t BQ27441_G1_GetFlags(bq27441_g1_t *bq27441_g1)
{
 8004ffe:	b5b0      	push	{r4, r5, r7, lr}
 8005000:	b084      	sub	sp, #16
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
	uint16_t buffer;
	buffer = bq27441_g1->Read(BQ27441_G1_ADDR, BQ27441_G1_FLAGS_CMD);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	250e      	movs	r5, #14
 800500c:	197c      	adds	r4, r7, r5
 800500e:	2106      	movs	r1, #6
 8005010:	2055      	movs	r0, #85	; 0x55
 8005012:	4798      	blx	r3
 8005014:	0003      	movs	r3, r0
 8005016:	8023      	strh	r3, [r4, #0]
	BQ27441_G1_ParseFlags(bq27441_g1, buffer);
 8005018:	197b      	adds	r3, r7, r5
 800501a:	881a      	ldrh	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	0011      	movs	r1, r2
 8005020:	0018      	movs	r0, r3
 8005022:	f7ff ff35 	bl	8004e90 <BQ27441_G1_ParseFlags>
	return buffer;
 8005026:	197b      	adds	r3, r7, r5
 8005028:	881b      	ldrh	r3, [r3, #0]
}
 800502a:	0018      	movs	r0, r3
 800502c:	46bd      	mov	sp, r7
 800502e:	b004      	add	sp, #16
 8005030:	bdb0      	pop	{r4, r5, r7, pc}

08005032 <BQ27441_G1_GetAverageCurrent>:
\param [in] bq27441_g1 Initialized variable of type bq27441_g1_t
\return Value of current in mA
*/

int16_t BQ27441_G1_GetAverageCurrent(bq27441_g1_t *bq27441_g1)
{
 8005032:	b5b0      	push	{r4, r5, r7, lr}
 8005034:	b084      	sub	sp, #16
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
	uint16_t buffer;
	buffer = bq27441_g1->Read(BQ27441_G1_ADDR, BQ27441_G1_AVERAGE_CURRENT_CMD);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	250e      	movs	r5, #14
 8005040:	197c      	adds	r4, r7, r5
 8005042:	2110      	movs	r1, #16
 8005044:	2055      	movs	r0, #85	; 0x55
 8005046:	4798      	blx	r3
 8005048:	0003      	movs	r3, r0
 800504a:	8023      	strh	r3, [r4, #0]
	return buffer;
 800504c:	197b      	adds	r3, r7, r5
 800504e:	2200      	movs	r2, #0
 8005050:	5e9b      	ldrsh	r3, [r3, r2]
}
 8005052:	0018      	movs	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	b004      	add	sp, #16
 8005058:	bdb0      	pop	{r4, r5, r7, pc}

0800505a <BQ27441_G1_GetAveragePower>:
\param [in] bq27441_g1 Initialized variable of type bq27441_g1_t
\return Value of power in mW
*/

int16_t BQ27441_G1_GetAveragePower(bq27441_g1_t *bq27441_g1)
{
 800505a:	b5b0      	push	{r4, r5, r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
	uint16_t buffer;
	buffer = bq27441_g1->Read(BQ27441_G1_ADDR, BQ27441_G1_AVERAGE_POWER_CMD);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	250e      	movs	r5, #14
 8005068:	197c      	adds	r4, r7, r5
 800506a:	2118      	movs	r1, #24
 800506c:	2055      	movs	r0, #85	; 0x55
 800506e:	4798      	blx	r3
 8005070:	0003      	movs	r3, r0
 8005072:	8023      	strh	r3, [r4, #0]
	return buffer;
 8005074:	197b      	adds	r3, r7, r5
 8005076:	2200      	movs	r2, #0
 8005078:	5e9b      	ldrsh	r3, [r3, r2]
}
 800507a:	0018      	movs	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	b004      	add	sp, #16
 8005080:	bdb0      	pop	{r4, r5, r7, pc}

08005082 <BQ27441_G1_GetRemainingCapacityUnfiltered>:
\param [in] bq27441_g1 Initialized variable of type bq27441_g1_t
\return Value of capacity in mAh
*/

uint16_t BQ27441_G1_GetRemainingCapacityUnfiltered(bq27441_g1_t *bq27441_g1)
{
 8005082:	b5b0      	push	{r4, r5, r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
	uint16_t buffer;
	buffer = bq27441_g1->Read(BQ27441_G1_ADDR, BQ27441_G1_REMAINING_CAPACITY_UNFILTERED_CMD);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	250e      	movs	r5, #14
 8005090:	197c      	adds	r4, r7, r5
 8005092:	2128      	movs	r1, #40	; 0x28
 8005094:	2055      	movs	r0, #85	; 0x55
 8005096:	4798      	blx	r3
 8005098:	0003      	movs	r3, r0
 800509a:	8023      	strh	r3, [r4, #0]
	return buffer;
 800509c:	197b      	adds	r3, r7, r5
 800509e:	881b      	ldrh	r3, [r3, #0]
}
 80050a0:	0018      	movs	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b004      	add	sp, #16
 80050a6:	bdb0      	pop	{r4, r5, r7, pc}

080050a8 <BQ27441_G1_GetFullChargeCapacityUnfiltered>:
\param [in] bq27441_g1 Initialized variable of type bq27441_g1_t
\return Value of capacity in mAh
*/

uint16_t BQ27441_G1_GetFullChargeCapacityUnfiltered(bq27441_g1_t *bq27441_g1)
{
 80050a8:	b5b0      	push	{r4, r5, r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
	uint16_t buffer;
	buffer = bq27441_g1->Read(BQ27441_G1_ADDR, BQ27441_G1_FULL_CHARGE_CAPACITY_UNFILTERED_CMD);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	250e      	movs	r5, #14
 80050b6:	197c      	adds	r4, r7, r5
 80050b8:	212c      	movs	r1, #44	; 0x2c
 80050ba:	2055      	movs	r0, #85	; 0x55
 80050bc:	4798      	blx	r3
 80050be:	0003      	movs	r3, r0
 80050c0:	8023      	strh	r3, [r4, #0]
	return buffer;
 80050c2:	197b      	adds	r3, r7, r5
 80050c4:	881b      	ldrh	r3, [r3, #0]
}
 80050c6:	0018      	movs	r0, r3
 80050c8:	46bd      	mov	sp, r7
 80050ca:	b004      	add	sp, #16
 80050cc:	bdb0      	pop	{r4, r5, r7, pc}

080050ce <BQ27441_G1_GetStateOfChargeUnfiltered>:
\param [in] bq27441_g1 Initialized variable of type bq27441_g1_t
\return Value of SOC in %
*/

uint16_t BQ27441_G1_GetStateOfChargeUnfiltered(bq27441_g1_t *bq27441_g1)
{
 80050ce:	b5b0      	push	{r4, r5, r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
	uint16_t buffer;
	buffer = bq27441_g1->Read(BQ27441_G1_ADDR, BQ27441_G1_STATE_OF_CHARGE_UNFILTERED_CMD);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	250e      	movs	r5, #14
 80050dc:	197c      	adds	r4, r7, r5
 80050de:	2130      	movs	r1, #48	; 0x30
 80050e0:	2055      	movs	r0, #85	; 0x55
 80050e2:	4798      	blx	r3
 80050e4:	0003      	movs	r3, r0
 80050e6:	8023      	strh	r3, [r4, #0]
	return buffer;
 80050e8:	197b      	adds	r3, r7, r5
 80050ea:	881b      	ldrh	r3, [r3, #0]
}
 80050ec:	0018      	movs	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b004      	add	sp, #16
 80050f2:	bdb0      	pop	{r4, r5, r7, pc}

080050f4 <BQ27441_G1_SetCfgUpdate>:
\brief Instructs the fuel gauge to enter CONFIG UPDATE mode
\param [in] bq27441_g1 Initialized variable of type bq27441_g1_t
*/

void BQ27441_G1_SetCfgUpdate(bq27441_g1_t *bq27441_g1)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	bq27441_g1->Write(BQ27441_G1_ADDR, BQ27441_G1_CONTROL_CMD, BQ27441_G1_SET_CFGUPDATE_SUBCMD);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2213      	movs	r2, #19
 8005102:	2100      	movs	r1, #0
 8005104:	2055      	movs	r0, #85	; 0x55
 8005106:	4798      	blx	r3
}
 8005108:	46c0      	nop			; (mov r8, r8)
 800510a:	46bd      	mov	sp, r7
 800510c:	b002      	add	sp, #8
 800510e:	bd80      	pop	{r7, pc}

08005110 <BQ27441_G1_SetSealed>:
\brief Instructs the fuel gauge to  transition from UNSEALED state to SEALED state
\param [in] bq27441_g1 Initialized variable of type bq27441_g1_t
*/

void BQ27441_G1_SetSealed(bq27441_g1_t *bq27441_g1)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
	bq27441_g1->Write(BQ27441_G1_ADDR, BQ27441_G1_CONTROL_CMD, BQ27441_G1_SEALED_SUBCMD);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2220      	movs	r2, #32
 800511e:	2100      	movs	r1, #0
 8005120:	2055      	movs	r0, #85	; 0x55
 8005122:	4798      	blx	r3
}
 8005124:	46c0      	nop			; (mov r8, r8)
 8005126:	46bd      	mov	sp, r7
 8005128:	b002      	add	sp, #8
 800512a:	bd80      	pop	{r7, pc}

0800512c <BQ27441_G1_SoftReset>:
\brief Performs a partial (soft) reset from any mode with an OCV (open-circuit voltage) measurement
\param [in] bq27441_g1 Initialized variable of type bq27441_g1_t
*/

void BQ27441_G1_SoftReset(bq27441_g1_t *bq27441_g1)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
	bq27441_g1->Write(BQ27441_G1_ADDR, BQ27441_G1_CONTROL_CMD, BQ27441_G1_SOFT_RESET_SUBCMD);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2242      	movs	r2, #66	; 0x42
 800513a:	2100      	movs	r1, #0
 800513c:	2055      	movs	r0, #85	; 0x55
 800513e:	4798      	blx	r3
}
 8005140:	46c0      	nop			; (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	b002      	add	sp, #8
 8005146:	bd80      	pop	{r7, pc}

08005148 <BQ27441_G1_GetDesignCapacity>:
\param [in] bq27441_g1 Initialized variable of type bq27441_g1_t
\return Value of the capacity in mAh
*/

uint16_t BQ27441_G1_GetDesignCapacity(bq27441_g1_t *bq27441_g1)
{
 8005148:	b5b0      	push	{r4, r5, r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
	uint16_t buffer;
	buffer = bq27441_g1->Read(BQ27441_G1_ADDR, BQ27441_G1_DESIGN_CAPACITY_CMD);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	250e      	movs	r5, #14
 8005156:	197c      	adds	r4, r7, r5
 8005158:	213c      	movs	r1, #60	; 0x3c
 800515a:	2055      	movs	r0, #85	; 0x55
 800515c:	4798      	blx	r3
 800515e:	0003      	movs	r3, r0
 8005160:	8023      	strh	r3, [r4, #0]
	return buffer;
 8005162:	197b      	adds	r3, r7, r5
 8005164:	881b      	ldrh	r3, [r3, #0]
}
 8005166:	0018      	movs	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	b004      	add	sp, #16
 800516c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005170 <BQ27441_G1_Setup>:

	bq27441_g1->Write(BQ27441_G1_ADDR, BQ27441_G1_BLOCK_DATA_CONTROL_CMD, 0x00);
}

void BQ27441_G1_Setup(bq27441_g1_t *bq27441_g1, uint16_t capacity, uint16_t tVoltage)
{
 8005170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005172:	b08f      	sub	sp, #60	; 0x3c
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	0008      	movs	r0, r1
 800517a:	0011      	movs	r1, r2
 800517c:	1cbb      	adds	r3, r7, #2
 800517e:	1c02      	adds	r2, r0, #0
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	003b      	movs	r3, r7
 8005184:	1c0a      	adds	r2, r1, #0
 8005186:	801a      	strh	r2, [r3, #0]

	BQ27441_G1_GetFlags(bq27441_g1);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	0018      	movs	r0, r3
 800518c:	f7ff ff37 	bl	8004ffe <BQ27441_G1_GetFlags>
	if (!bq27441_g1->flags.itpor) {
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	7b5b      	ldrb	r3, [r3, #13]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d100      	bne.n	800519a <BQ27441_G1_Setup+0x2a>
 8005198:	e18a      	b.n	80054b0 <BQ27441_G1_Setup+0x340>
		return;
	}

	uint16_t designEnergy = 3.7 * capacity;
 800519a:	1cbb      	adds	r3, r7, #2
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	0018      	movs	r0, r3
 80051a0:	f7fc ff06 	bl	8001fb0 <__aeabi_i2d>
 80051a4:	4ac4      	ldr	r2, [pc, #784]	; (80054b8 <BQ27441_G1_Setup+0x348>)
 80051a6:	4bc5      	ldr	r3, [pc, #788]	; (80054bc <BQ27441_G1_Setup+0x34c>)
 80051a8:	f7fc f8f6 	bl	8001398 <__aeabi_dmul>
 80051ac:	0003      	movs	r3, r0
 80051ae:	000c      	movs	r4, r1
 80051b0:	001a      	movs	r2, r3
 80051b2:	0023      	movs	r3, r4
 80051b4:	2036      	movs	r0, #54	; 0x36
 80051b6:	183c      	adds	r4, r7, r0
 80051b8:	0010      	movs	r0, r2
 80051ba:	0019      	movs	r1, r3
 80051bc:	f7fb f968 	bl	8000490 <__aeabi_d2uiz>
 80051c0:	0003      	movs	r3, r0
 80051c2:	8023      	strh	r3, [r4, #0]
	// Taper current of BQ24075 is 1A, so 0.1*1A + 10% or more => 130mA
	// Taper rate = DesignCapacity / (0.1 * Taper current)
	uint16_t taperRate = capacity / 13;
 80051c4:	2234      	movs	r2, #52	; 0x34
 80051c6:	18bc      	adds	r4, r7, r2
 80051c8:	1cbb      	adds	r3, r7, #2
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	210d      	movs	r1, #13
 80051ce:	0018      	movs	r0, r3
 80051d0:	f7fa ffaa 	bl	8000128 <__udivsi3>
 80051d4:	0003      	movs	r3, r0
 80051d6:	8023      	strh	r3, [r4, #0]

	volatile HAL_StatusTypeDef result;

	// Unseal
	uint8_t unseal_code[2] = {0x00, 0x80};
 80051d8:	2530      	movs	r5, #48	; 0x30
 80051da:	197b      	adds	r3, r7, r5
 80051dc:	2200      	movs	r2, #0
 80051de:	701a      	strb	r2, [r3, #0]
 80051e0:	197b      	adds	r3, r7, r5
 80051e2:	2280      	movs	r2, #128	; 0x80
 80051e4:	705a      	strb	r2, [r3, #1]
	result = i2c_write(BQ27441_G1_ADDR, 0x00, unseal_code, 2);
 80051e6:	197a      	adds	r2, r7, r5
 80051e8:	2302      	movs	r3, #2
 80051ea:	2100      	movs	r1, #0
 80051ec:	2055      	movs	r0, #85	; 0x55
 80051ee:	f000 f9ed 	bl	80055cc <i2c_write>
 80051f2:	0003      	movs	r3, r0
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	2433      	movs	r4, #51	; 0x33
 80051f8:	193b      	adds	r3, r7, r4
 80051fa:	701a      	strb	r2, [r3, #0]
	HAL_Delay(10);
 80051fc:	200a      	movs	r0, #10
 80051fe:	f7fd f8bd 	bl	800237c <HAL_Delay>
	result = i2c_write(BQ27441_G1_ADDR, 0x00, unseal_code, 2);
 8005202:	197a      	adds	r2, r7, r5
 8005204:	2302      	movs	r3, #2
 8005206:	2100      	movs	r1, #0
 8005208:	2055      	movs	r0, #85	; 0x55
 800520a:	f000 f9df 	bl	80055cc <i2c_write>
 800520e:	0003      	movs	r3, r0
 8005210:	b2da      	uxtb	r2, r3
 8005212:	193b      	adds	r3, r7, r4
 8005214:	701a      	strb	r2, [r3, #0]

	BQ27441_G1_SetCfgUpdate(bq27441_g1);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	0018      	movs	r0, r3
 800521a:	f7ff ff6b 	bl	80050f4 <BQ27441_G1_SetCfgUpdate>
	HAL_Delay(1500);
 800521e:	4ba8      	ldr	r3, [pc, #672]	; (80054c0 <BQ27441_G1_Setup+0x350>)
 8005220:	0018      	movs	r0, r3
 8005222:	f7fd f8ab 	bl	800237c <HAL_Delay>
	BQ27441_G1_GetFlags(bq27441_g1);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	0018      	movs	r0, r3
 800522a:	f7ff fee8 	bl	8004ffe <BQ27441_G1_GetFlags>

	uint8_t tempval = 0x00;
 800522e:	252f      	movs	r5, #47	; 0x2f
 8005230:	197b      	adds	r3, r7, r5
 8005232:	2200      	movs	r2, #0
 8005234:	701a      	strb	r2, [r3, #0]
	result = i2c_write(BQ27441_G1_ADDR, 0x61, &tempval, 1);
 8005236:	197a      	adds	r2, r7, r5
 8005238:	2301      	movs	r3, #1
 800523a:	2161      	movs	r1, #97	; 0x61
 800523c:	2055      	movs	r0, #85	; 0x55
 800523e:	f000 f9c5 	bl	80055cc <i2c_write>
 8005242:	0003      	movs	r3, r0
 8005244:	b2da      	uxtb	r2, r3
 8005246:	193b      	adds	r3, r7, r4
 8005248:	701a      	strb	r2, [r3, #0]

	tempval = 0x52;
 800524a:	197b      	adds	r3, r7, r5
 800524c:	2252      	movs	r2, #82	; 0x52
 800524e:	701a      	strb	r2, [r3, #0]
	result = i2c_write(BQ27441_G1_ADDR, 0x3E, &tempval, 1);
 8005250:	197a      	adds	r2, r7, r5
 8005252:	2301      	movs	r3, #1
 8005254:	213e      	movs	r1, #62	; 0x3e
 8005256:	2055      	movs	r0, #85	; 0x55
 8005258:	f000 f9b8 	bl	80055cc <i2c_write>
 800525c:	0003      	movs	r3, r0
 800525e:	b2da      	uxtb	r2, r3
 8005260:	193b      	adds	r3, r7, r4
 8005262:	701a      	strb	r2, [r3, #0]

	tempval = 0x00;
 8005264:	197b      	adds	r3, r7, r5
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
	result = i2c_write(BQ27441_G1_ADDR, 0x3F, &tempval, 1);
 800526a:	197a      	adds	r2, r7, r5
 800526c:	2301      	movs	r3, #1
 800526e:	213f      	movs	r1, #63	; 0x3f
 8005270:	2055      	movs	r0, #85	; 0x55
 8005272:	f000 f9ab 	bl	80055cc <i2c_write>
 8005276:	0003      	movs	r3, r0
 8005278:	b2da      	uxtb	r2, r3
 800527a:	193b      	adds	r3, r7, r4
 800527c:	701a      	strb	r2, [r3, #0]

	volatile uint8_t old_csum[2] = {0};
 800527e:	212c      	movs	r1, #44	; 0x2c
 8005280:	187b      	adds	r3, r7, r1
 8005282:	2200      	movs	r2, #0
 8005284:	801a      	strh	r2, [r3, #0]
	i2c_read(BQ27441_G1_ADDR, 0x60, old_csum, 2);
 8005286:	187a      	adds	r2, r7, r1
 8005288:	2302      	movs	r3, #2
 800528a:	2160      	movs	r1, #96	; 0x60
 800528c:	2055      	movs	r0, #85	; 0x55
 800528e:	f000 f971 	bl	8005574 <i2c_read>
	uint8_t old_designCap[2] = {0};
 8005292:	2528      	movs	r5, #40	; 0x28
 8005294:	197b      	adds	r3, r7, r5
 8005296:	2200      	movs	r2, #0
 8005298:	801a      	strh	r2, [r3, #0]
	i2c_read(BQ27441_G1_ADDR, 0x4A, old_designCap, 2);
 800529a:	197a      	adds	r2, r7, r5
 800529c:	2302      	movs	r3, #2
 800529e:	214a      	movs	r1, #74	; 0x4a
 80052a0:	2055      	movs	r0, #85	; 0x55
 80052a2:	f000 f967 	bl	8005574 <i2c_read>
	uint8_t old_designEnergy[2] = {0};
 80052a6:	2624      	movs	r6, #36	; 0x24
 80052a8:	19bb      	adds	r3, r7, r6
 80052aa:	2200      	movs	r2, #0
 80052ac:	801a      	strh	r2, [r3, #0]
	i2c_read(BQ27441_G1_ADDR, 0x4C, old_designEnergy, 2);
 80052ae:	19ba      	adds	r2, r7, r6
 80052b0:	2302      	movs	r3, #2
 80052b2:	214c      	movs	r1, #76	; 0x4c
 80052b4:	2055      	movs	r0, #85	; 0x55
 80052b6:	f000 f95d 	bl	8005574 <i2c_read>
	uint8_t old_terminateVolage[2] = {0};
 80052ba:	2120      	movs	r1, #32
 80052bc:	187b      	adds	r3, r7, r1
 80052be:	2200      	movs	r2, #0
 80052c0:	801a      	strh	r2, [r3, #0]
	i2c_read(BQ27441_G1_ADDR, 0x50, old_terminateVolage, 2);
 80052c2:	187a      	adds	r2, r7, r1
 80052c4:	2302      	movs	r3, #2
 80052c6:	2150      	movs	r1, #80	; 0x50
 80052c8:	2055      	movs	r0, #85	; 0x55
 80052ca:	f000 f953 	bl	8005574 <i2c_read>
	uint8_t old_taperRate[2] = {0};
 80052ce:	201c      	movs	r0, #28
 80052d0:	183b      	adds	r3, r7, r0
 80052d2:	2200      	movs	r2, #0
 80052d4:	801a      	strh	r2, [r3, #0]
	i2c_read(BQ27441_G1_ADDR, 0x5B, old_taperRate, 2);
 80052d6:	183a      	adds	r2, r7, r0
 80052d8:	2302      	movs	r3, #2
 80052da:	215b      	movs	r1, #91	; 0x5b
 80052dc:	2055      	movs	r0, #85	; 0x55
 80052de:	f000 f949 	bl	8005574 <i2c_read>


	uint8_t newCap_mod[2] = {(capacity >> 8) & 0x00FF, capacity & 0x00FF};
 80052e2:	1cbb      	adds	r3, r7, #2
 80052e4:	881b      	ldrh	r3, [r3, #0]
 80052e6:	0a1b      	lsrs	r3, r3, #8
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	b2da      	uxtb	r2, r3
 80052ec:	2318      	movs	r3, #24
 80052ee:	0018      	movs	r0, r3
 80052f0:	18fb      	adds	r3, r7, r3
 80052f2:	701a      	strb	r2, [r3, #0]
 80052f4:	1cbb      	adds	r3, r7, #2
 80052f6:	881b      	ldrh	r3, [r3, #0]
 80052f8:	b2da      	uxtb	r2, r3
 80052fa:	0003      	movs	r3, r0
 80052fc:	0018      	movs	r0, r3
 80052fe:	18fb      	adds	r3, r7, r3
 8005300:	705a      	strb	r2, [r3, #1]
	result = i2c_write(BQ27441_G1_ADDR, 0x4A, newCap_mod, 2);
 8005302:	0003      	movs	r3, r0
 8005304:	18fa      	adds	r2, r7, r3
 8005306:	2302      	movs	r3, #2
 8005308:	214a      	movs	r1, #74	; 0x4a
 800530a:	2055      	movs	r0, #85	; 0x55
 800530c:	f000 f95e 	bl	80055cc <i2c_write>
 8005310:	0003      	movs	r3, r0
 8005312:	b2da      	uxtb	r2, r3
 8005314:	193b      	adds	r3, r7, r4
 8005316:	701a      	strb	r2, [r3, #0]

	uint8_t newNrgy_mod[2] = {(designEnergy >> 8) & 0x00FF, designEnergy & 0x00FF};
 8005318:	2336      	movs	r3, #54	; 0x36
 800531a:	0018      	movs	r0, r3
 800531c:	18fb      	adds	r3, r7, r3
 800531e:	881b      	ldrh	r3, [r3, #0]
 8005320:	0a1b      	lsrs	r3, r3, #8
 8005322:	b29b      	uxth	r3, r3
 8005324:	b2da      	uxtb	r2, r3
 8005326:	2314      	movs	r3, #20
 8005328:	0019      	movs	r1, r3
 800532a:	18fb      	adds	r3, r7, r3
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	0003      	movs	r3, r0
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	881b      	ldrh	r3, [r3, #0]
 8005334:	b2da      	uxtb	r2, r3
 8005336:	000b      	movs	r3, r1
 8005338:	0018      	movs	r0, r3
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	705a      	strb	r2, [r3, #1]
	result = i2c_write(BQ27441_G1_ADDR, 0x4C, newNrgy_mod, 2);
 800533e:	0003      	movs	r3, r0
 8005340:	18fa      	adds	r2, r7, r3
 8005342:	2302      	movs	r3, #2
 8005344:	214c      	movs	r1, #76	; 0x4c
 8005346:	2055      	movs	r0, #85	; 0x55
 8005348:	f000 f940 	bl	80055cc <i2c_write>
 800534c:	0003      	movs	r3, r0
 800534e:	b2da      	uxtb	r2, r3
 8005350:	193b      	adds	r3, r7, r4
 8005352:	701a      	strb	r2, [r3, #0]

	uint8_t newTermV_mod[2] = {(tVoltage >> 8) & 0x00FF, tVoltage & 0x00FF};
 8005354:	003b      	movs	r3, r7
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	0a1b      	lsrs	r3, r3, #8
 800535a:	b29b      	uxth	r3, r3
 800535c:	b2da      	uxtb	r2, r3
 800535e:	2310      	movs	r3, #16
 8005360:	0018      	movs	r0, r3
 8005362:	18fb      	adds	r3, r7, r3
 8005364:	701a      	strb	r2, [r3, #0]
 8005366:	003b      	movs	r3, r7
 8005368:	881b      	ldrh	r3, [r3, #0]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	0003      	movs	r3, r0
 800536e:	0018      	movs	r0, r3
 8005370:	18fb      	adds	r3, r7, r3
 8005372:	705a      	strb	r2, [r3, #1]
	result = i2c_write(BQ27441_G1_ADDR, 0x50, newTermV_mod, 2);
 8005374:	0003      	movs	r3, r0
 8005376:	18fa      	adds	r2, r7, r3
 8005378:	2302      	movs	r3, #2
 800537a:	2150      	movs	r1, #80	; 0x50
 800537c:	2055      	movs	r0, #85	; 0x55
 800537e:	f000 f925 	bl	80055cc <i2c_write>
 8005382:	0003      	movs	r3, r0
 8005384:	b2da      	uxtb	r2, r3
 8005386:	193b      	adds	r3, r7, r4
 8005388:	701a      	strb	r2, [r3, #0]

	uint8_t newTaper_mod[2] = {(taperRate >> 8) & 0x00FF, taperRate & 0x00FF};
 800538a:	2234      	movs	r2, #52	; 0x34
 800538c:	0010      	movs	r0, r2
 800538e:	18bb      	adds	r3, r7, r2
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	0a1b      	lsrs	r3, r3, #8
 8005394:	b29b      	uxth	r3, r3
 8005396:	b2da      	uxtb	r2, r3
 8005398:	230c      	movs	r3, #12
 800539a:	0019      	movs	r1, r3
 800539c:	18fb      	adds	r3, r7, r3
 800539e:	701a      	strb	r2, [r3, #0]
 80053a0:	0003      	movs	r3, r0
 80053a2:	18fb      	adds	r3, r7, r3
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b2da      	uxtb	r2, r3
 80053a8:	000b      	movs	r3, r1
 80053aa:	0018      	movs	r0, r3
 80053ac:	18fb      	adds	r3, r7, r3
 80053ae:	705a      	strb	r2, [r3, #1]
	result = i2c_write(BQ27441_G1_ADDR, 0x5B, newTaper_mod, 2);
 80053b0:	0002      	movs	r2, r0
 80053b2:	18ba      	adds	r2, r7, r2
 80053b4:	2302      	movs	r3, #2
 80053b6:	215b      	movs	r1, #91	; 0x5b
 80053b8:	2055      	movs	r0, #85	; 0x55
 80053ba:	f000 f907 	bl	80055cc <i2c_write>
 80053be:	0003      	movs	r3, r0
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	193b      	adds	r3, r7, r4
 80053c4:	701a      	strb	r2, [r3, #0]

	volatile uint8_t chkTemp = (255 - old_csum[0] - old_designCap[0] - old_designCap[1] - old_designEnergy[0] - old_designEnergy[1] - old_terminateVolage[0] - old_terminateVolage[1] - old_taperRate[0] - old_taperRate[1]) % 256;
 80053c6:	232c      	movs	r3, #44	; 0x2c
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	001a      	movs	r2, r3
 80053d0:	23ff      	movs	r3, #255	; 0xff
 80053d2:	1a9b      	subs	r3, r3, r2
 80053d4:	197a      	adds	r2, r7, r5
 80053d6:	7812      	ldrb	r2, [r2, #0]
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	197a      	adds	r2, r7, r5
 80053dc:	7852      	ldrb	r2, [r2, #1]
 80053de:	1a9b      	subs	r3, r3, r2
 80053e0:	19ba      	adds	r2, r7, r6
 80053e2:	7812      	ldrb	r2, [r2, #0]
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	19ba      	adds	r2, r7, r6
 80053e8:	7852      	ldrb	r2, [r2, #1]
 80053ea:	1a9b      	subs	r3, r3, r2
 80053ec:	2120      	movs	r1, #32
 80053ee:	187a      	adds	r2, r7, r1
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	187a      	adds	r2, r7, r1
 80053f6:	7852      	ldrb	r2, [r2, #1]
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	201c      	movs	r0, #28
 80053fc:	0001      	movs	r1, r0
 80053fe:	183a      	adds	r2, r7, r0
 8005400:	7812      	ldrb	r2, [r2, #0]
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	187a      	adds	r2, r7, r1
 8005406:	7852      	ldrb	r2, [r2, #1]
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	4a2e      	ldr	r2, [pc, #184]	; (80054c4 <BQ27441_G1_Setup+0x354>)
 800540c:	4013      	ands	r3, r2
 800540e:	d503      	bpl.n	8005418 <BQ27441_G1_Setup+0x2a8>
 8005410:	3b01      	subs	r3, #1
 8005412:	4a2d      	ldr	r2, [pc, #180]	; (80054c8 <BQ27441_G1_Setup+0x358>)
 8005414:	4313      	orrs	r3, r2
 8005416:	3301      	adds	r3, #1
 8005418:	b2da      	uxtb	r2, r3
 800541a:	210b      	movs	r1, #11
 800541c:	187b      	adds	r3, r7, r1
 800541e:	701a      	strb	r2, [r3, #0]
	volatile uint8_t new_checksum = 255 - ((chkTemp + newCap_mod[0] + newCap_mod[1] + newNrgy_mod[0] + newNrgy_mod[1] + newTermV_mod[0] + newTermV_mod[1] + newTaper_mod[0] + newTaper_mod[1]) % 256);
 8005420:	187b      	adds	r3, r7, r1
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	001a      	movs	r2, r3
 8005428:	2118      	movs	r1, #24
 800542a:	187b      	adds	r3, r7, r1
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	18d3      	adds	r3, r2, r3
 8005430:	187a      	adds	r2, r7, r1
 8005432:	7852      	ldrb	r2, [r2, #1]
 8005434:	189b      	adds	r3, r3, r2
 8005436:	2114      	movs	r1, #20
 8005438:	187a      	adds	r2, r7, r1
 800543a:	7812      	ldrb	r2, [r2, #0]
 800543c:	189b      	adds	r3, r3, r2
 800543e:	187a      	adds	r2, r7, r1
 8005440:	7852      	ldrb	r2, [r2, #1]
 8005442:	189b      	adds	r3, r3, r2
 8005444:	2110      	movs	r1, #16
 8005446:	187a      	adds	r2, r7, r1
 8005448:	7812      	ldrb	r2, [r2, #0]
 800544a:	189b      	adds	r3, r3, r2
 800544c:	187a      	adds	r2, r7, r1
 800544e:	7852      	ldrb	r2, [r2, #1]
 8005450:	189b      	adds	r3, r3, r2
 8005452:	210c      	movs	r1, #12
 8005454:	187a      	adds	r2, r7, r1
 8005456:	7812      	ldrb	r2, [r2, #0]
 8005458:	189b      	adds	r3, r3, r2
 800545a:	187a      	adds	r2, r7, r1
 800545c:	7852      	ldrb	r2, [r2, #1]
 800545e:	189b      	adds	r3, r3, r2
 8005460:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <BQ27441_G1_Setup+0x354>)
 8005462:	4013      	ands	r3, r2
 8005464:	d503      	bpl.n	800546e <BQ27441_G1_Setup+0x2fe>
 8005466:	3b01      	subs	r3, #1
 8005468:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <BQ27441_G1_Setup+0x358>)
 800546a:	4313      	orrs	r3, r2
 800546c:	3301      	adds	r3, #1
 800546e:	b2db      	uxtb	r3, r3
 8005470:	43db      	mvns	r3, r3
 8005472:	b2da      	uxtb	r2, r3
 8005474:	210a      	movs	r1, #10
 8005476:	187b      	adds	r3, r7, r1
 8005478:	701a      	strb	r2, [r3, #0]
	result = i2c_write(BQ27441_G1_ADDR, 0x60, &new_checksum, 1);
 800547a:	187a      	adds	r2, r7, r1
 800547c:	2301      	movs	r3, #1
 800547e:	2160      	movs	r1, #96	; 0x60
 8005480:	2055      	movs	r0, #85	; 0x55
 8005482:	f000 f8a3 	bl	80055cc <i2c_write>
 8005486:	0003      	movs	r3, r0
 8005488:	b2da      	uxtb	r2, r3
 800548a:	2333      	movs	r3, #51	; 0x33
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	701a      	strb	r2, [r3, #0]
	BQ27441_G1_SoftReset(bq27441_g1);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	0018      	movs	r0, r3
 8005494:	f7ff fe4a 	bl	800512c <BQ27441_G1_SoftReset>
	HAL_Delay(1500);
 8005498:	4b09      	ldr	r3, [pc, #36]	; (80054c0 <BQ27441_G1_Setup+0x350>)
 800549a:	0018      	movs	r0, r3
 800549c:	f7fc ff6e 	bl	800237c <HAL_Delay>
	BQ27441_G1_SetSealed(bq27441_g1);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	0018      	movs	r0, r3
 80054a4:	f7ff fe34 	bl	8005110 <BQ27441_G1_SetSealed>
	HAL_Delay(20);
 80054a8:	2014      	movs	r0, #20
 80054aa:	f7fc ff67 	bl	800237c <HAL_Delay>
 80054ae:	e000      	b.n	80054b2 <BQ27441_G1_Setup+0x342>
		return;
 80054b0:	46c0      	nop			; (mov r8, r8)
}
 80054b2:	46bd      	mov	sp, r7
 80054b4:	b00f      	add	sp, #60	; 0x3c
 80054b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054b8:	9999999a 	.word	0x9999999a
 80054bc:	400d9999 	.word	0x400d9999
 80054c0:	000005dc 	.word	0x000005dc
 80054c4:	800000ff 	.word	0x800000ff
 80054c8:	ffffff00 	.word	0xffffff00

080054cc <i2cReadRegister>:




uint16_t i2cReadRegister(uint16_t addr,uint8_t regOffset)
{
 80054cc:	b5b0      	push	{r4, r5, r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	0002      	movs	r2, r0
 80054d4:	1dbb      	adds	r3, r7, #6
 80054d6:	801a      	strh	r2, [r3, #0]
 80054d8:	1d7b      	adds	r3, r7, #5
 80054da:	1c0a      	adds	r2, r1, #0
 80054dc:	701a      	strb	r2, [r3, #0]
	uint16_t result = 0x00;
 80054de:	250e      	movs	r5, #14
 80054e0:	197b      	adds	r3, r7, r5
 80054e2:	2200      	movs	r2, #0
 80054e4:	801a      	strh	r2, [r3, #0]

	uint8_t dataArray[2] = {0};
 80054e6:	210c      	movs	r1, #12
 80054e8:	187b      	adds	r3, r7, r1
 80054ea:	2200      	movs	r2, #0
 80054ec:	801a      	strh	r2, [r3, #0]

	i2c_read(addr, regOffset, dataArray, 2);
 80054ee:	1dbb      	adds	r3, r7, #6
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	b2d8      	uxtb	r0, r3
 80054f4:	000c      	movs	r4, r1
 80054f6:	187a      	adds	r2, r7, r1
 80054f8:	1d7b      	adds	r3, r7, #5
 80054fa:	7819      	ldrb	r1, [r3, #0]
 80054fc:	2302      	movs	r3, #2
 80054fe:	f000 f839 	bl	8005574 <i2c_read>

	result = (dataArray[1] << 8) | (dataArray[0]);
 8005502:	0021      	movs	r1, r4
 8005504:	187b      	adds	r3, r7, r1
 8005506:	785b      	ldrb	r3, [r3, #1]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	b21a      	sxth	r2, r3
 800550c:	187b      	adds	r3, r7, r1
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	b21b      	sxth	r3, r3
 8005512:	4313      	orrs	r3, r2
 8005514:	b21a      	sxth	r2, r3
 8005516:	197b      	adds	r3, r7, r5
 8005518:	801a      	strh	r2, [r3, #0]
	return result;
 800551a:	197b      	adds	r3, r7, r5
 800551c:	881b      	ldrh	r3, [r3, #0]
	// return dataArray[0];
}
 800551e:	0018      	movs	r0, r3
 8005520:	46bd      	mov	sp, r7
 8005522:	b004      	add	sp, #16
 8005524:	bdb0      	pop	{r4, r5, r7, pc}

08005526 <i2cWriteRegister>:
	// return dataArray[0];
}


void i2cWriteRegister(uint16_t addr,uint8_t regOffset, uint8_t writeData)
{
 8005526:	b590      	push	{r4, r7, lr}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	0004      	movs	r4, r0
 800552e:	0008      	movs	r0, r1
 8005530:	0011      	movs	r1, r2
 8005532:	1dbb      	adds	r3, r7, #6
 8005534:	1c22      	adds	r2, r4, #0
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	1d7b      	adds	r3, r7, #5
 800553a:	1c02      	adds	r2, r0, #0
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	1d3b      	adds	r3, r7, #4
 8005540:	1c0a      	adds	r2, r1, #0
 8005542:	701a      	strb	r2, [r3, #0]
	uint8_t cmdArray[1];
	uint8_t dataArray[2];

	cmdArray[0] = regOffset;
 8005544:	230c      	movs	r3, #12
 8005546:	18fb      	adds	r3, r7, r3
 8005548:	1d7a      	adds	r2, r7, #5
 800554a:	7812      	ldrb	r2, [r2, #0]
 800554c:	701a      	strb	r2, [r3, #0]
	dataArray[0] = writeData;
 800554e:	2108      	movs	r1, #8
 8005550:	187b      	adds	r3, r7, r1
 8005552:	1d3a      	adds	r2, r7, #4
 8005554:	7812      	ldrb	r2, [r2, #0]
 8005556:	701a      	strb	r2, [r3, #0]
	i2c_write(addr, regOffset, dataArray, 2);
 8005558:	1dbb      	adds	r3, r7, #6
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	b2d8      	uxtb	r0, r3
 800555e:	187a      	adds	r2, r7, r1
 8005560:	1d7b      	adds	r3, r7, #5
 8005562:	7819      	ldrb	r1, [r3, #0]
 8005564:	2302      	movs	r3, #2
 8005566:	f000 f831 	bl	80055cc <i2c_write>
}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	46bd      	mov	sp, r7
 800556e:	b005      	add	sp, #20
 8005570:	bd90      	pop	{r4, r7, pc}
	...

08005574 <i2c_read>:



int8_t i2c_read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b087      	sub	sp, #28
 8005578:	af04      	add	r7, sp, #16
 800557a:	0004      	movs	r4, r0
 800557c:	0008      	movs	r0, r1
 800557e:	603a      	str	r2, [r7, #0]
 8005580:	0019      	movs	r1, r3
 8005582:	1dfb      	adds	r3, r7, #7
 8005584:	1c22      	adds	r2, r4, #0
 8005586:	701a      	strb	r2, [r3, #0]
 8005588:	1dbb      	adds	r3, r7, #6
 800558a:	1c02      	adds	r2, r0, #0
 800558c:	701a      	strb	r2, [r3, #0]
 800558e:	1d3b      	adds	r3, r7, #4
 8005590:	1c0a      	adds	r2, r1, #0
 8005592:	801a      	strh	r2, [r3, #0]
	return HAL_I2C_Mem_Read(&hi2c1, dev_addr<<1, reg_addr, 1, data, len, 10);
 8005594:	1dfb      	adds	r3, r7, #7
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	b29b      	uxth	r3, r3
 800559a:	18db      	adds	r3, r3, r3
 800559c:	b299      	uxth	r1, r3
 800559e:	1dbb      	adds	r3, r7, #6
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	4808      	ldr	r0, [pc, #32]	; (80055c8 <i2c_read+0x54>)
 80055a6:	230a      	movs	r3, #10
 80055a8:	9302      	str	r3, [sp, #8]
 80055aa:	1d3b      	adds	r3, r7, #4
 80055ac:	881b      	ldrh	r3, [r3, #0]
 80055ae:	9301      	str	r3, [sp, #4]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	2301      	movs	r3, #1
 80055b6:	f7fe f8e3 	bl	8003780 <HAL_I2C_Mem_Read>
 80055ba:	0003      	movs	r3, r0
 80055bc:	b25b      	sxtb	r3, r3

}
 80055be:	0018      	movs	r0, r3
 80055c0:	46bd      	mov	sp, r7
 80055c2:	b003      	add	sp, #12
 80055c4:	bd90      	pop	{r4, r7, pc}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	2000044c 	.word	0x2000044c

080055cc <i2c_write>:

int8_t i2c_write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 80055cc:	b590      	push	{r4, r7, lr}
 80055ce:	b089      	sub	sp, #36	; 0x24
 80055d0:	af04      	add	r7, sp, #16
 80055d2:	0004      	movs	r4, r0
 80055d4:	0008      	movs	r0, r1
 80055d6:	603a      	str	r2, [r7, #0]
 80055d8:	0019      	movs	r1, r3
 80055da:	1dfb      	adds	r3, r7, #7
 80055dc:	1c22      	adds	r2, r4, #0
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	1dbb      	adds	r3, r7, #6
 80055e2:	1c02      	adds	r2, r0, #0
 80055e4:	701a      	strb	r2, [r3, #0]
 80055e6:	1d3b      	adds	r3, r7, #4
 80055e8:	1c0a      	adds	r2, r1, #0
 80055ea:	801a      	strh	r2, [r3, #0]
	int8_t res;
	res =  HAL_I2C_Mem_Write(&hi2c1, dev_addr<<1, reg_addr, 1, data, len, 10);
 80055ec:	1dfb      	adds	r3, r7, #7
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	18db      	adds	r3, r3, r3
 80055f4:	b299      	uxth	r1, r3
 80055f6:	1dbb      	adds	r3, r7, #6
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	480c      	ldr	r0, [pc, #48]	; (8005630 <i2c_write+0x64>)
 80055fe:	230a      	movs	r3, #10
 8005600:	9302      	str	r3, [sp, #8]
 8005602:	1d3b      	adds	r3, r7, #4
 8005604:	881b      	ldrh	r3, [r3, #0]
 8005606:	9301      	str	r3, [sp, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	9300      	str	r3, [sp, #0]
 800560c:	2301      	movs	r3, #1
 800560e:	f7fd ff89 	bl	8003524 <HAL_I2C_Mem_Write>
 8005612:	0003      	movs	r3, r0
 8005614:	001a      	movs	r2, r3
 8005616:	240f      	movs	r4, #15
 8005618:	193b      	adds	r3, r7, r4
 800561a:	701a      	strb	r2, [r3, #0]
	HAL_Delay(40);
 800561c:	2028      	movs	r0, #40	; 0x28
 800561e:	f7fc fead 	bl	800237c <HAL_Delay>
	return res;
 8005622:	193b      	adds	r3, r7, r4
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	b25b      	sxtb	r3, r3

}
 8005628:	0018      	movs	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	b005      	add	sp, #20
 800562e:	bd90      	pop	{r4, r7, pc}
 8005630:	2000044c 	.word	0x2000044c

08005634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005634:	b590      	push	{r4, r7, lr}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800563a:	f7fc fe19 	bl	8002270 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800563e:	f000 f875 	bl	800572c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005642:	f000 f9db 	bl	80059fc <MX_GPIO_Init>
  MX_ADC1_Init();
 8005646:	f000 f8ed 	bl	8005824 <MX_ADC1_Init>
  MX_I2C1_Init();
 800564a:	f000 f957 	bl	80058fc <MX_I2C1_Init>
  MX_I2C2_Init();
 800564e:	f000 f995 	bl	800597c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 8005652:	2064      	movs	r0, #100	; 0x64
 8005654:	f7fc fe92 	bl	800237c <HAL_Delay>
  SSD1306_Init();
 8005658:	f000 fd28 	bl	80060ac <SSD1306_Init>
  // HAL_Delay(100);
  SSD1306_ON();
 800565c:	f000 ff60 	bl	8006520 <SSD1306_ON>
  SSD1306_Fill(0);
 8005660:	2000      	movs	r0, #0
 8005662:	f000 fe15 	bl	8006290 <SSD1306_Fill>
  SSD1306_UpdateScreen();
 8005666:	f000 fddf 	bl	8006228 <SSD1306_UpdateScreen>

  bq27441_g1.Read = i2cReadRegister;
 800566a:	4b28      	ldr	r3, [pc, #160]	; (800570c <main+0xd8>)
 800566c:	4a28      	ldr	r2, [pc, #160]	; (8005710 <main+0xdc>)
 800566e:	605a      	str	r2, [r3, #4]
  bq27441_g1.Write = i2cWriteRegister;
 8005670:	4b26      	ldr	r3, [pc, #152]	; (800570c <main+0xd8>)
 8005672:	4a28      	ldr	r2, [pc, #160]	; (8005714 <main+0xe0>)
 8005674:	601a      	str	r2, [r3, #0]


  char msg[] = "bat config ...";
 8005676:	003b      	movs	r3, r7
 8005678:	4a27      	ldr	r2, [pc, #156]	; (8005718 <main+0xe4>)
 800567a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800567c:	c313      	stmia	r3!, {r0, r1, r4}
 800567e:	8811      	ldrh	r1, [r2, #0]
 8005680:	8019      	strh	r1, [r3, #0]
 8005682:	7892      	ldrb	r2, [r2, #2]
 8005684:	709a      	strb	r2, [r3, #2]
  SSD1306_Fill(0);
 8005686:	2000      	movs	r0, #0
 8005688:	f000 fe02 	bl	8006290 <SSD1306_Fill>
  SSD1306_GotoXY(0, 10);
 800568c:	210a      	movs	r1, #10
 800568e:	2000      	movs	r0, #0
 8005690:	f000 fe86 	bl	80063a0 <SSD1306_GotoXY>
  SSD1306_Puts(msg, &Font_7x10, 1);
 8005694:	4921      	ldr	r1, [pc, #132]	; (800571c <main+0xe8>)
 8005696:	003b      	movs	r3, r7
 8005698:	2201      	movs	r2, #1
 800569a:	0018      	movs	r0, r3
 800569c:	f000 ff1a 	bl	80064d4 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80056a0:	f000 fdc2 	bl	8006228 <SSD1306_UpdateScreen>

  BQ27441_G1_Setup(&bq27441_g1, 3400, 3200);
 80056a4:	23c8      	movs	r3, #200	; 0xc8
 80056a6:	011a      	lsls	r2, r3, #4
 80056a8:	491d      	ldr	r1, [pc, #116]	; (8005720 <main+0xec>)
 80056aa:	4b18      	ldr	r3, [pc, #96]	; (800570c <main+0xd8>)
 80056ac:	0018      	movs	r0, r3
 80056ae:	f7ff fd5f 	bl	8005170 <BQ27441_G1_Setup>
  while (1)
  {


    // Execute visualization mode
    SSD1306_Fill(0);
 80056b2:	2000      	movs	r0, #0
 80056b4:	f000 fdec 	bl	8006290 <SSD1306_Fill>
    showHeader();
 80056b8:	f000 fa5e 	bl	8005b78 <showHeader>
    switch (mode)
 80056bc:	4b19      	ldr	r3, [pc, #100]	; (8005724 <main+0xf0>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b07      	cmp	r3, #7
 80056c2:	d819      	bhi.n	80056f8 <main+0xc4>
 80056c4:	009a      	lsls	r2, r3, #2
 80056c6:	4b18      	ldr	r3, [pc, #96]	; (8005728 <main+0xf4>)
 80056c8:	18d3      	adds	r3, r2, r3
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	469f      	mov	pc, r3
    {
    case 1:
      showAverageCurrent();
 80056ce:	f000 fa9b 	bl	8005c08 <showAverageCurrent>
      break;
 80056d2:	e012      	b.n	80056fa <main+0xc6>
    case 2:
      showAveragePower();
 80056d4:	f000 fac2 	bl	8005c5c <showAveragePower>
      break;
 80056d8:	e00f      	b.n	80056fa <main+0xc6>
    case 3:
      showRemainingCapacity();
 80056da:	f000 fb67 	bl	8005dac <showRemainingCapacity>
      break;
 80056de:	e00c      	b.n	80056fa <main+0xc6>
    case 4:
      showVoltage();
 80056e0:	f000 fa20 	bl	8005b24 <showVoltage>
      break;
 80056e4:	e009      	b.n	80056fa <main+0xc6>
    case 5:
      showDesignCapacity();
 80056e6:	f000 fb0d 	bl	8005d04 <showDesignCapacity>
      break;
 80056ea:	e006      	b.n	80056fa <main+0xc6>
    case 6:
      showFullChargeCapacity();
 80056ec:	f000 fb34 	bl	8005d58 <showFullChargeCapacity>
      break;
 80056f0:	e003      	b.n	80056fa <main+0xc6>
    case 7:
      showSOH();
 80056f2:	f000 fadd 	bl	8005cb0 <showSOH>
      break;
 80056f6:	e000      	b.n	80056fa <main+0xc6>
    default:
      break;
 80056f8:	46c0      	nop			; (mov r8, r8)
    }

    SSD1306_UpdateScreen();
 80056fa:	f000 fd95 	bl	8006228 <SSD1306_UpdateScreen>

    HAL_Delay(500);
 80056fe:	23fa      	movs	r3, #250	; 0xfa
 8005700:	005b      	lsls	r3, r3, #1
 8005702:	0018      	movs	r0, r3
 8005704:	f7fc fe3a 	bl	800237c <HAL_Delay>
    SSD1306_Fill(0);
 8005708:	e7d3      	b.n	80056b2 <main+0x7e>
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	20000424 	.word	0x20000424
 8005710:	080054cd 	.word	0x080054cd
 8005714:	08005527 	.word	0x08005527
 8005718:	08008890 	.word	0x08008890
 800571c:	2000000c 	.word	0x2000000c
 8005720:	00000d48 	.word	0x00000d48
 8005724:	20000005 	.word	0x20000005
 8005728:	0800897c 	.word	0x0800897c

0800572c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800572c:	b590      	push	{r4, r7, lr}
 800572e:	b09d      	sub	sp, #116	; 0x74
 8005730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005732:	2438      	movs	r4, #56	; 0x38
 8005734:	193b      	adds	r3, r7, r4
 8005736:	0018      	movs	r0, r3
 8005738:	2338      	movs	r3, #56	; 0x38
 800573a:	001a      	movs	r2, r3
 800573c:	2100      	movs	r1, #0
 800573e:	f001 f813 	bl	8006768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005742:	2328      	movs	r3, #40	; 0x28
 8005744:	18fb      	adds	r3, r7, r3
 8005746:	0018      	movs	r0, r3
 8005748:	2310      	movs	r3, #16
 800574a:	001a      	movs	r2, r3
 800574c:	2100      	movs	r1, #0
 800574e:	f001 f80b 	bl	8006768 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005752:	003b      	movs	r3, r7
 8005754:	0018      	movs	r0, r3
 8005756:	2328      	movs	r3, #40	; 0x28
 8005758:	001a      	movs	r2, r3
 800575a:	2100      	movs	r1, #0
 800575c:	f001 f804 	bl	8006768 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005760:	2380      	movs	r3, #128	; 0x80
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	0018      	movs	r0, r3
 8005766:	f7fe fd2f 	bl	80041c8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800576a:	193b      	adds	r3, r7, r4
 800576c:	2202      	movs	r2, #2
 800576e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005770:	193b      	adds	r3, r7, r4
 8005772:	2280      	movs	r2, #128	; 0x80
 8005774:	0052      	lsls	r2, r2, #1
 8005776:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8005778:	0021      	movs	r1, r4
 800577a:	187b      	adds	r3, r7, r1
 800577c:	2200      	movs	r2, #0
 800577e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005780:	187b      	adds	r3, r7, r1
 8005782:	2240      	movs	r2, #64	; 0x40
 8005784:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005786:	187b      	adds	r3, r7, r1
 8005788:	2202      	movs	r2, #2
 800578a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800578c:	187b      	adds	r3, r7, r1
 800578e:	2202      	movs	r2, #2
 8005790:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8005792:	187b      	adds	r3, r7, r1
 8005794:	2200      	movs	r2, #0
 8005796:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005798:	187b      	adds	r3, r7, r1
 800579a:	2208      	movs	r2, #8
 800579c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800579e:	187b      	adds	r3, r7, r1
 80057a0:	2280      	movs	r2, #128	; 0x80
 80057a2:	0292      	lsls	r2, r2, #10
 80057a4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80057a6:	187b      	adds	r3, r7, r1
 80057a8:	2280      	movs	r2, #128	; 0x80
 80057aa:	0492      	lsls	r2, r2, #18
 80057ac:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80057ae:	187b      	adds	r3, r7, r1
 80057b0:	2280      	movs	r2, #128	; 0x80
 80057b2:	0592      	lsls	r2, r2, #22
 80057b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057b6:	187b      	adds	r3, r7, r1
 80057b8:	0018      	movs	r0, r3
 80057ba:	f7fe fd45 	bl	8004248 <HAL_RCC_OscConfig>
 80057be:	1e03      	subs	r3, r0, #0
 80057c0:	d001      	beq.n	80057c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80057c2:	f000 fb1d 	bl	8005e00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80057c6:	2128      	movs	r1, #40	; 0x28
 80057c8:	187b      	adds	r3, r7, r1
 80057ca:	2207      	movs	r2, #7
 80057cc:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057ce:	187b      	adds	r3, r7, r1
 80057d0:	2202      	movs	r2, #2
 80057d2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80057d4:	187b      	adds	r3, r7, r1
 80057d6:	2290      	movs	r2, #144	; 0x90
 80057d8:	0112      	lsls	r2, r2, #4
 80057da:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80057dc:	187b      	adds	r3, r7, r1
 80057de:	2200      	movs	r2, #0
 80057e0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80057e2:	187b      	adds	r3, r7, r1
 80057e4:	2100      	movs	r1, #0
 80057e6:	0018      	movs	r0, r3
 80057e8:	f7ff f84e 	bl	8004888 <HAL_RCC_ClockConfig>
 80057ec:	1e03      	subs	r3, r0, #0
 80057ee:	d001      	beq.n	80057f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80057f0:	f000 fb06 	bl	8005e00 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_ADC;
 80057f4:	003b      	movs	r3, r7
 80057f6:	4a0a      	ldr	r2, [pc, #40]	; (8005820 <SystemClock_Config+0xf4>)
 80057f8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80057fa:	003b      	movs	r3, r7
 80057fc:	2200      	movs	r2, #0
 80057fe:	60da      	str	r2, [r3, #12]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8005800:	003b      	movs	r3, r7
 8005802:	2200      	movs	r2, #0
 8005804:	61da      	str	r2, [r3, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005806:	003b      	movs	r3, r7
 8005808:	0018      	movs	r0, r3
 800580a:	f7ff f9c7 	bl	8004b9c <HAL_RCCEx_PeriphCLKConfig>
 800580e:	1e03      	subs	r3, r0, #0
 8005810:	d001      	beq.n	8005816 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005812:	f000 faf5 	bl	8005e00 <Error_Handler>
  }
}
 8005816:	46c0      	nop			; (mov r8, r8)
 8005818:	46bd      	mov	sp, r7
 800581a:	b01d      	add	sp, #116	; 0x74
 800581c:	bd90      	pop	{r4, r7, pc}
 800581e:	46c0      	nop			; (mov r8, r8)
 8005820:	00004020 	.word	0x00004020

08005824 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b084      	sub	sp, #16
 8005828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800582a:	1d3b      	adds	r3, r7, #4
 800582c:	0018      	movs	r0, r3
 800582e:	230c      	movs	r3, #12
 8005830:	001a      	movs	r2, r3
 8005832:	2100      	movs	r1, #0
 8005834:	f000 ff98 	bl	8006768 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8005838:	4b2d      	ldr	r3, [pc, #180]	; (80058f0 <MX_ADC1_Init+0xcc>)
 800583a:	4a2e      	ldr	r2, [pc, #184]	; (80058f4 <MX_ADC1_Init+0xd0>)
 800583c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800583e:	4b2c      	ldr	r3, [pc, #176]	; (80058f0 <MX_ADC1_Init+0xcc>)
 8005840:	2280      	movs	r2, #128	; 0x80
 8005842:	05d2      	lsls	r2, r2, #23
 8005844:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005846:	4b2a      	ldr	r3, [pc, #168]	; (80058f0 <MX_ADC1_Init+0xcc>)
 8005848:	2200      	movs	r2, #0
 800584a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800584c:	4b28      	ldr	r3, [pc, #160]	; (80058f0 <MX_ADC1_Init+0xcc>)
 800584e:	2200      	movs	r2, #0
 8005850:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005852:	4b27      	ldr	r3, [pc, #156]	; (80058f0 <MX_ADC1_Init+0xcc>)
 8005854:	2200      	movs	r2, #0
 8005856:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005858:	4b25      	ldr	r3, [pc, #148]	; (80058f0 <MX_ADC1_Init+0xcc>)
 800585a:	2204      	movs	r2, #4
 800585c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800585e:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <MX_ADC1_Init+0xcc>)
 8005860:	2200      	movs	r2, #0
 8005862:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8005864:	4b22      	ldr	r3, [pc, #136]	; (80058f0 <MX_ADC1_Init+0xcc>)
 8005866:	2200      	movs	r2, #0
 8005868:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800586a:	4b21      	ldr	r3, [pc, #132]	; (80058f0 <MX_ADC1_Init+0xcc>)
 800586c:	2200      	movs	r2, #0
 800586e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8005870:	4b1f      	ldr	r3, [pc, #124]	; (80058f0 <MX_ADC1_Init+0xcc>)
 8005872:	2201      	movs	r2, #1
 8005874:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005876:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <MX_ADC1_Init+0xcc>)
 8005878:	2220      	movs	r2, #32
 800587a:	2100      	movs	r1, #0
 800587c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800587e:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <MX_ADC1_Init+0xcc>)
 8005880:	2200      	movs	r2, #0
 8005882:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005884:	4b1a      	ldr	r3, [pc, #104]	; (80058f0 <MX_ADC1_Init+0xcc>)
 8005886:	2200      	movs	r2, #0
 8005888:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800588a:	4b19      	ldr	r3, [pc, #100]	; (80058f0 <MX_ADC1_Init+0xcc>)
 800588c:	222c      	movs	r2, #44	; 0x2c
 800588e:	2100      	movs	r1, #0
 8005890:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8005892:	4b17      	ldr	r3, [pc, #92]	; (80058f0 <MX_ADC1_Init+0xcc>)
 8005894:	2200      	movs	r2, #0
 8005896:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8005898:	4b15      	ldr	r3, [pc, #84]	; (80058f0 <MX_ADC1_Init+0xcc>)
 800589a:	2200      	movs	r2, #0
 800589c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800589e:	4b14      	ldr	r3, [pc, #80]	; (80058f0 <MX_ADC1_Init+0xcc>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80058a4:	4b12      	ldr	r3, [pc, #72]	; (80058f0 <MX_ADC1_Init+0xcc>)
 80058a6:	223c      	movs	r2, #60	; 0x3c
 80058a8:	2100      	movs	r1, #0
 80058aa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80058ac:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <MX_ADC1_Init+0xcc>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80058b2:	4b0f      	ldr	r3, [pc, #60]	; (80058f0 <MX_ADC1_Init+0xcc>)
 80058b4:	0018      	movs	r0, r3
 80058b6:	f7fc fe6b 	bl	8002590 <HAL_ADC_Init>
 80058ba:	1e03      	subs	r3, r0, #0
 80058bc:	d001      	beq.n	80058c2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80058be:	f000 fa9f 	bl	8005e00 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80058c2:	1d3b      	adds	r3, r7, #4
 80058c4:	4a0c      	ldr	r2, [pc, #48]	; (80058f8 <MX_ADC1_Init+0xd4>)
 80058c6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80058c8:	1d3b      	adds	r3, r7, #4
 80058ca:	2200      	movs	r2, #0
 80058cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80058ce:	1d3b      	adds	r3, r7, #4
 80058d0:	2200      	movs	r2, #0
 80058d2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80058d4:	1d3a      	adds	r2, r7, #4
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <MX_ADC1_Init+0xcc>)
 80058d8:	0011      	movs	r1, r2
 80058da:	0018      	movs	r0, r3
 80058dc:	f7fd f834 	bl	8002948 <HAL_ADC_ConfigChannel>
 80058e0:	1e03      	subs	r3, r0, #0
 80058e2:	d001      	beq.n	80058e8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80058e4:	f000 fa8c 	bl	8005e00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80058e8:	46c0      	nop			; (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	b004      	add	sp, #16
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	200004e4 	.word	0x200004e4
 80058f4:	40012400 	.word	0x40012400
 80058f8:	24000200 	.word	0x24000200

080058fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005900:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <MX_I2C1_Init+0x74>)
 8005902:	4a1c      	ldr	r2, [pc, #112]	; (8005974 <MX_I2C1_Init+0x78>)
 8005904:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8005906:	4b1a      	ldr	r3, [pc, #104]	; (8005970 <MX_I2C1_Init+0x74>)
 8005908:	4a1b      	ldr	r2, [pc, #108]	; (8005978 <MX_I2C1_Init+0x7c>)
 800590a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800590c:	4b18      	ldr	r3, [pc, #96]	; (8005970 <MX_I2C1_Init+0x74>)
 800590e:	2200      	movs	r2, #0
 8005910:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005912:	4b17      	ldr	r3, [pc, #92]	; (8005970 <MX_I2C1_Init+0x74>)
 8005914:	2201      	movs	r2, #1
 8005916:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005918:	4b15      	ldr	r3, [pc, #84]	; (8005970 <MX_I2C1_Init+0x74>)
 800591a:	2200      	movs	r2, #0
 800591c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800591e:	4b14      	ldr	r3, [pc, #80]	; (8005970 <MX_I2C1_Init+0x74>)
 8005920:	2200      	movs	r2, #0
 8005922:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005924:	4b12      	ldr	r3, [pc, #72]	; (8005970 <MX_I2C1_Init+0x74>)
 8005926:	2200      	movs	r2, #0
 8005928:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800592a:	4b11      	ldr	r3, [pc, #68]	; (8005970 <MX_I2C1_Init+0x74>)
 800592c:	2200      	movs	r2, #0
 800592e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005930:	4b0f      	ldr	r3, [pc, #60]	; (8005970 <MX_I2C1_Init+0x74>)
 8005932:	2200      	movs	r2, #0
 8005934:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005936:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <MX_I2C1_Init+0x74>)
 8005938:	0018      	movs	r0, r3
 800593a:	f7fd fc55 	bl	80031e8 <HAL_I2C_Init>
 800593e:	1e03      	subs	r3, r0, #0
 8005940:	d001      	beq.n	8005946 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8005942:	f000 fa5d 	bl	8005e00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005946:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <MX_I2C1_Init+0x74>)
 8005948:	2100      	movs	r1, #0
 800594a:	0018      	movs	r0, r3
 800594c:	f7fe fba4 	bl	8004098 <HAL_I2CEx_ConfigAnalogFilter>
 8005950:	1e03      	subs	r3, r0, #0
 8005952:	d001      	beq.n	8005958 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005954:	f000 fa54 	bl	8005e00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <MX_I2C1_Init+0x74>)
 800595a:	2100      	movs	r1, #0
 800595c:	0018      	movs	r0, r3
 800595e:	f7fe fbe7 	bl	8004130 <HAL_I2CEx_ConfigDigitalFilter>
 8005962:	1e03      	subs	r3, r0, #0
 8005964:	d001      	beq.n	800596a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005966:	f000 fa4b 	bl	8005e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	2000044c 	.word	0x2000044c
 8005974:	40005400 	.word	0x40005400
 8005978:	00303d5b 	.word	0x00303d5b

0800597c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005980:	4b1b      	ldr	r3, [pc, #108]	; (80059f0 <MX_I2C2_Init+0x74>)
 8005982:	4a1c      	ldr	r2, [pc, #112]	; (80059f4 <MX_I2C2_Init+0x78>)
 8005984:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010061A;
 8005986:	4b1a      	ldr	r3, [pc, #104]	; (80059f0 <MX_I2C2_Init+0x74>)
 8005988:	4a1b      	ldr	r2, [pc, #108]	; (80059f8 <MX_I2C2_Init+0x7c>)
 800598a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800598c:	4b18      	ldr	r3, [pc, #96]	; (80059f0 <MX_I2C2_Init+0x74>)
 800598e:	2200      	movs	r2, #0
 8005990:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005992:	4b17      	ldr	r3, [pc, #92]	; (80059f0 <MX_I2C2_Init+0x74>)
 8005994:	2201      	movs	r2, #1
 8005996:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005998:	4b15      	ldr	r3, [pc, #84]	; (80059f0 <MX_I2C2_Init+0x74>)
 800599a:	2200      	movs	r2, #0
 800599c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800599e:	4b14      	ldr	r3, [pc, #80]	; (80059f0 <MX_I2C2_Init+0x74>)
 80059a0:	2200      	movs	r2, #0
 80059a2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80059a4:	4b12      	ldr	r3, [pc, #72]	; (80059f0 <MX_I2C2_Init+0x74>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80059aa:	4b11      	ldr	r3, [pc, #68]	; (80059f0 <MX_I2C2_Init+0x74>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80059b0:	4b0f      	ldr	r3, [pc, #60]	; (80059f0 <MX_I2C2_Init+0x74>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80059b6:	4b0e      	ldr	r3, [pc, #56]	; (80059f0 <MX_I2C2_Init+0x74>)
 80059b8:	0018      	movs	r0, r3
 80059ba:	f7fd fc15 	bl	80031e8 <HAL_I2C_Init>
 80059be:	1e03      	subs	r3, r0, #0
 80059c0:	d001      	beq.n	80059c6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80059c2:	f000 fa1d 	bl	8005e00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80059c6:	4b0a      	ldr	r3, [pc, #40]	; (80059f0 <MX_I2C2_Init+0x74>)
 80059c8:	2100      	movs	r1, #0
 80059ca:	0018      	movs	r0, r3
 80059cc:	f7fe fb64 	bl	8004098 <HAL_I2CEx_ConfigAnalogFilter>
 80059d0:	1e03      	subs	r3, r0, #0
 80059d2:	d001      	beq.n	80059d8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80059d4:	f000 fa14 	bl	8005e00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80059d8:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <MX_I2C2_Init+0x74>)
 80059da:	2100      	movs	r1, #0
 80059dc:	0018      	movs	r0, r3
 80059de:	f7fe fba7 	bl	8004130 <HAL_I2CEx_ConfigDigitalFilter>
 80059e2:	1e03      	subs	r3, r0, #0
 80059e4:	d001      	beq.n	80059ea <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80059e6:	f000 fa0b 	bl	8005e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000498 	.word	0x20000498
 80059f4:	40005800 	.word	0x40005800
 80059f8:	0010061a 	.word	0x0010061a

080059fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b089      	sub	sp, #36	; 0x24
 8005a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a02:	240c      	movs	r4, #12
 8005a04:	193b      	adds	r3, r7, r4
 8005a06:	0018      	movs	r0, r3
 8005a08:	2314      	movs	r3, #20
 8005a0a:	001a      	movs	r2, r3
 8005a0c:	2100      	movs	r1, #0
 8005a0e:	f000 feab 	bl	8006768 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a12:	4b28      	ldr	r3, [pc, #160]	; (8005ab4 <MX_GPIO_Init+0xb8>)
 8005a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a16:	4b27      	ldr	r3, [pc, #156]	; (8005ab4 <MX_GPIO_Init+0xb8>)
 8005a18:	2104      	movs	r1, #4
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	635a      	str	r2, [r3, #52]	; 0x34
 8005a1e:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <MX_GPIO_Init+0xb8>)
 8005a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a22:	2204      	movs	r2, #4
 8005a24:	4013      	ands	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]
 8005a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a2a:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <MX_GPIO_Init+0xb8>)
 8005a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a2e:	4b21      	ldr	r3, [pc, #132]	; (8005ab4 <MX_GPIO_Init+0xb8>)
 8005a30:	2101      	movs	r1, #1
 8005a32:	430a      	orrs	r2, r1
 8005a34:	635a      	str	r2, [r3, #52]	; 0x34
 8005a36:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <MX_GPIO_Init+0xb8>)
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	607b      	str	r3, [r7, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a42:	4b1c      	ldr	r3, [pc, #112]	; (8005ab4 <MX_GPIO_Init+0xb8>)
 8005a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a46:	4b1b      	ldr	r3, [pc, #108]	; (8005ab4 <MX_GPIO_Init+0xb8>)
 8005a48:	2102      	movs	r1, #2
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	635a      	str	r2, [r3, #52]	; 0x34
 8005a4e:	4b19      	ldr	r3, [pc, #100]	; (8005ab4 <MX_GPIO_Init+0xb8>)
 8005a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a52:	2202      	movs	r2, #2
 8005a54:	4013      	ands	r3, r2
 8005a56:	603b      	str	r3, [r7, #0]
 8005a58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005a5a:	193b      	adds	r3, r7, r4
 8005a5c:	2280      	movs	r2, #128	; 0x80
 8005a5e:	01d2      	lsls	r2, r2, #7
 8005a60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005a62:	193b      	adds	r3, r7, r4
 8005a64:	4a14      	ldr	r2, [pc, #80]	; (8005ab8 <MX_GPIO_Init+0xbc>)
 8005a66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a68:	193b      	adds	r3, r7, r4
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a6e:	193b      	adds	r3, r7, r4
 8005a70:	4a12      	ldr	r2, [pc, #72]	; (8005abc <MX_GPIO_Init+0xc0>)
 8005a72:	0019      	movs	r1, r3
 8005a74:	0010      	movs	r0, r2
 8005a76:	f7fd fa1f 	bl	8002eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005a7a:	0021      	movs	r1, r4
 8005a7c:	187b      	adds	r3, r7, r1
 8005a7e:	2208      	movs	r2, #8
 8005a80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005a82:	187b      	adds	r3, r7, r1
 8005a84:	4a0e      	ldr	r2, [pc, #56]	; (8005ac0 <MX_GPIO_Init+0xc4>)
 8005a86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a88:	187b      	adds	r3, r7, r1
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a8e:	187a      	adds	r2, r7, r1
 8005a90:	23a0      	movs	r3, #160	; 0xa0
 8005a92:	05db      	lsls	r3, r3, #23
 8005a94:	0011      	movs	r1, r2
 8005a96:	0018      	movs	r0, r3
 8005a98:	f7fd fa0e 	bl	8002eb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2100      	movs	r1, #0
 8005aa0:	2006      	movs	r0, #6
 8005aa2:	f7fd f9d7 	bl	8002e54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8005aa6:	2006      	movs	r0, #6
 8005aa8:	f7fd f9e9 	bl	8002e7e <HAL_NVIC_EnableIRQ>
}
 8005aac:	46c0      	nop			; (mov r8, r8)
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	b009      	add	sp, #36	; 0x24
 8005ab2:	bd90      	pop	{r4, r7, pc}
 8005ab4:	40021000 	.word	0x40021000
 8005ab8:	10110000 	.word	0x10110000
 8005abc:	50000800 	.word	0x50000800
 8005ac0:	10210000 	.word	0x10210000

08005ac4 <HAL_GPIO_EXTI_Falling_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	0002      	movs	r2, r0
 8005acc:	1dbb      	adds	r3, r7, #6
 8005ace:	801a      	strh	r2, [r3, #0]
  if (GPIO_Pin == GPIO_PIN_3)
 8005ad0:	1dbb      	adds	r3, r7, #6
 8005ad2:	881b      	ldrh	r3, [r3, #0]
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d11d      	bne.n	8005b14 <HAL_GPIO_EXTI_Falling_Callback+0x50>
  {

    // Check clock ticks between interrupts
    // to avoid bounce effect
    uint32_t tick = HAL_GetTick();
 8005ad8:	f7fc fc46 	bl	8002368 <HAL_GetTick>
 8005adc:	0003      	movs	r3, r0
 8005ade:	60fb      	str	r3, [r7, #12]
    uint32_t diff = tick - lastTick;
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	60bb      	str	r3, [r7, #8]
    if (diff > 300)
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	2396      	movs	r3, #150	; 0x96
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d90c      	bls.n	8005b0e <HAL_GPIO_EXTI_Falling_Callback+0x4a>
    {

      mode++;
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	3301      	adds	r3, #1
 8005afa:	b2da      	uxtb	r2, r3
 8005afc:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8005afe:	701a      	strb	r2, [r3, #0]
      if (mode > 7)
 8005b00:	4b07      	ldr	r3, [pc, #28]	; (8005b20 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	2b07      	cmp	r3, #7
 8005b06:	d902      	bls.n	8005b0e <HAL_GPIO_EXTI_Falling_Callback+0x4a>
      {
        mode = 1;
 8005b08:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <HAL_GPIO_EXTI_Falling_Callback+0x5c>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
      }
    }

    lastTick = tick;
 8005b0e:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <HAL_GPIO_EXTI_Falling_Callback+0x58>)
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	601a      	str	r2, [r3, #0]
  }
}
 8005b14:	46c0      	nop			; (mov r8, r8)
 8005b16:	46bd      	mov	sp, r7
 8005b18:	b004      	add	sp, #16
 8005b1a:	bd80      	pop	{r7, pc}
 8005b1c:	20000208 	.word	0x20000208
 8005b20:	20000005 	.word	0x20000005

08005b24 <showVoltage>:

void showVoltage()
{
 8005b24:	b5b0      	push	{r4, r5, r7, lr}
 8005b26:	b086      	sub	sp, #24
 8005b28:	af00      	add	r7, sp, #0
  uint16_t voltage = 0;
 8005b2a:	2516      	movs	r5, #22
 8005b2c:	197b      	adds	r3, r7, r5
 8005b2e:	2200      	movs	r2, #0
 8005b30:	801a      	strh	r2, [r3, #0]
  voltage = BQ27441_G1_GetVoltage(&bq27441_g1);
 8005b32:	197c      	adds	r4, r7, r5
 8005b34:	4b0d      	ldr	r3, [pc, #52]	; (8005b6c <showVoltage+0x48>)
 8005b36:	0018      	movs	r0, r3
 8005b38:	f7ff fa4e 	bl	8004fd8 <BQ27441_G1_GetVoltage>
 8005b3c:	0003      	movs	r3, r0
 8005b3e:	8023      	strh	r3, [r4, #0]

  char tmp[20];
  sprintf(tmp, "V: %d mV", voltage);
 8005b40:	197b      	adds	r3, r7, r5
 8005b42:	881a      	ldrh	r2, [r3, #0]
 8005b44:	490a      	ldr	r1, [pc, #40]	; (8005b70 <showVoltage+0x4c>)
 8005b46:	003b      	movs	r3, r7
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f001 fa73 	bl	8007034 <siprintf>
  SSD1306_GotoXY(0, 13);
 8005b4e:	210d      	movs	r1, #13
 8005b50:	2000      	movs	r0, #0
 8005b52:	f000 fc25 	bl	80063a0 <SSD1306_GotoXY>
  SSD1306_Puts(tmp, &Font_11x18, 1);
 8005b56:	4907      	ldr	r1, [pc, #28]	; (8005b74 <showVoltage+0x50>)
 8005b58:	003b      	movs	r3, r7
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f000 fcb9 	bl	80064d4 <SSD1306_Puts>
}
 8005b62:	46c0      	nop			; (mov r8, r8)
 8005b64:	46bd      	mov	sp, r7
 8005b66:	b006      	add	sp, #24
 8005b68:	bdb0      	pop	{r4, r5, r7, pc}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	20000424 	.word	0x20000424
 8005b70:	080088a0 	.word	0x080088a0
 8005b74:	20000014 	.word	0x20000014

08005b78 <showHeader>:
void showHeader()
{
 8005b78:	b5b0      	push	{r4, r5, r7, lr}
 8005b7a:	b086      	sub	sp, #24
 8005b7c:	af00      	add	r7, sp, #0
  uint16_t soc = 0;
 8005b7e:	2516      	movs	r5, #22
 8005b80:	197b      	adds	r3, r7, r5
 8005b82:	2200      	movs	r2, #0
 8005b84:	801a      	strh	r2, [r3, #0]
  float temp = 0;
 8005b86:	2300      	movs	r3, #0
 8005b88:	613b      	str	r3, [r7, #16]
  soc = BQ27441_G1_GetStateOfChargeUnfiltered(&bq27441_g1);
 8005b8a:	197c      	adds	r4, r7, r5
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <showHeader+0x80>)
 8005b8e:	0018      	movs	r0, r3
 8005b90:	f7ff fa9d 	bl	80050ce <BQ27441_G1_GetStateOfChargeUnfiltered>
 8005b94:	0003      	movs	r3, r0
 8005b96:	8023      	strh	r3, [r4, #0]
  temp = BQ27441_G1_GetTemperature(&bq27441_g1);
 8005b98:	4b17      	ldr	r3, [pc, #92]	; (8005bf8 <showHeader+0x80>)
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f7ff f9e4 	bl	8004f68 <BQ27441_G1_GetTemperature>
 8005ba0:	1c03      	adds	r3, r0, #0
 8005ba2:	613b      	str	r3, [r7, #16]

  char temperature[9];
  sprintf(temperature, "%.1f ^C", temp);
 8005ba4:	6938      	ldr	r0, [r7, #16]
 8005ba6:	f7fc fa6f 	bl	8002088 <__aeabi_f2d>
 8005baa:	0003      	movs	r3, r0
 8005bac:	000c      	movs	r4, r1
 8005bae:	4913      	ldr	r1, [pc, #76]	; (8005bfc <showHeader+0x84>)
 8005bb0:	1d38      	adds	r0, r7, #4
 8005bb2:	001a      	movs	r2, r3
 8005bb4:	0023      	movs	r3, r4
 8005bb6:	f001 fa3d 	bl	8007034 <siprintf>
  SSD1306_GotoXY(0, 0);
 8005bba:	2100      	movs	r1, #0
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f000 fbef 	bl	80063a0 <SSD1306_GotoXY>
  SSD1306_Puts(temperature, &Font_7x10, 1);
 8005bc2:	490f      	ldr	r1, [pc, #60]	; (8005c00 <showHeader+0x88>)
 8005bc4:	1d3b      	adds	r3, r7, #4
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f000 fc83 	bl	80064d4 <SSD1306_Puts>

  char remain[4];
  sprintf(remain, "%d%%", soc);
 8005bce:	197b      	adds	r3, r7, r5
 8005bd0:	881a      	ldrh	r2, [r3, #0]
 8005bd2:	490c      	ldr	r1, [pc, #48]	; (8005c04 <showHeader+0x8c>)
 8005bd4:	003b      	movs	r3, r7
 8005bd6:	0018      	movs	r0, r3
 8005bd8:	f001 fa2c 	bl	8007034 <siprintf>
  SSD1306_GotoXY(98, 0);
 8005bdc:	2100      	movs	r1, #0
 8005bde:	2062      	movs	r0, #98	; 0x62
 8005be0:	f000 fbde 	bl	80063a0 <SSD1306_GotoXY>
  SSD1306_Puts(remain, &Font_7x10, 1);
 8005be4:	4906      	ldr	r1, [pc, #24]	; (8005c00 <showHeader+0x88>)
 8005be6:	003b      	movs	r3, r7
 8005be8:	2201      	movs	r2, #1
 8005bea:	0018      	movs	r0, r3
 8005bec:	f000 fc72 	bl	80064d4 <SSD1306_Puts>
}
 8005bf0:	46c0      	nop			; (mov r8, r8)
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b006      	add	sp, #24
 8005bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8005bf8:	20000424 	.word	0x20000424
 8005bfc:	080088ac 	.word	0x080088ac
 8005c00:	2000000c 	.word	0x2000000c
 8005c04:	080088b4 	.word	0x080088b4

08005c08 <showAverageCurrent>:
void showAverageCurrent()
{
 8005c08:	b5b0      	push	{r4, r5, r7, lr}
 8005c0a:	b088      	sub	sp, #32
 8005c0c:	af00      	add	r7, sp, #0
  int16_t avgCur = 0;
 8005c0e:	251e      	movs	r5, #30
 8005c10:	197b      	adds	r3, r7, r5
 8005c12:	2200      	movs	r2, #0
 8005c14:	801a      	strh	r2, [r3, #0]
  avgCur = BQ27441_G1_GetAverageCurrent(&bq27441_g1);
 8005c16:	197c      	adds	r4, r7, r5
 8005c18:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <showAverageCurrent+0x48>)
 8005c1a:	0018      	movs	r0, r3
 8005c1c:	f7ff fa09 	bl	8005032 <BQ27441_G1_GetAverageCurrent>
 8005c20:	0003      	movs	r3, r0
 8005c22:	8023      	strh	r3, [r4, #0]

  char tmp[30];
  sprintf(tmp, "C:%d mA", avgCur);
 8005c24:	197b      	adds	r3, r7, r5
 8005c26:	2200      	movs	r2, #0
 8005c28:	5e9a      	ldrsh	r2, [r3, r2]
 8005c2a:	490a      	ldr	r1, [pc, #40]	; (8005c54 <showAverageCurrent+0x4c>)
 8005c2c:	003b      	movs	r3, r7
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f001 fa00 	bl	8007034 <siprintf>
  SSD1306_GotoXY(0, 13);
 8005c34:	210d      	movs	r1, #13
 8005c36:	2000      	movs	r0, #0
 8005c38:	f000 fbb2 	bl	80063a0 <SSD1306_GotoXY>
  SSD1306_Puts(tmp, &Font_11x18, 1);
 8005c3c:	4906      	ldr	r1, [pc, #24]	; (8005c58 <showAverageCurrent+0x50>)
 8005c3e:	003b      	movs	r3, r7
 8005c40:	2201      	movs	r2, #1
 8005c42:	0018      	movs	r0, r3
 8005c44:	f000 fc46 	bl	80064d4 <SSD1306_Puts>
}
 8005c48:	46c0      	nop			; (mov r8, r8)
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	b008      	add	sp, #32
 8005c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c50:	20000424 	.word	0x20000424
 8005c54:	080088bc 	.word	0x080088bc
 8005c58:	20000014 	.word	0x20000014

08005c5c <showAveragePower>:

void showAveragePower()
{
 8005c5c:	b5b0      	push	{r4, r5, r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af00      	add	r7, sp, #0

  int16_t avgPwr = 0;
 8005c62:	251e      	movs	r5, #30
 8005c64:	197b      	adds	r3, r7, r5
 8005c66:	2200      	movs	r2, #0
 8005c68:	801a      	strh	r2, [r3, #0]
  avgPwr = BQ27441_G1_GetAveragePower(&bq27441_g1);
 8005c6a:	197c      	adds	r4, r7, r5
 8005c6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <showAveragePower+0x48>)
 8005c6e:	0018      	movs	r0, r3
 8005c70:	f7ff f9f3 	bl	800505a <BQ27441_G1_GetAveragePower>
 8005c74:	0003      	movs	r3, r0
 8005c76:	8023      	strh	r3, [r4, #0]

  char tmp[30];
  sprintf(tmp, "P:%d mW", avgPwr);
 8005c78:	197b      	adds	r3, r7, r5
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	5e9a      	ldrsh	r2, [r3, r2]
 8005c7e:	490a      	ldr	r1, [pc, #40]	; (8005ca8 <showAveragePower+0x4c>)
 8005c80:	003b      	movs	r3, r7
 8005c82:	0018      	movs	r0, r3
 8005c84:	f001 f9d6 	bl	8007034 <siprintf>
  SSD1306_GotoXY(0, 13);
 8005c88:	210d      	movs	r1, #13
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	f000 fb88 	bl	80063a0 <SSD1306_GotoXY>
  SSD1306_Puts(tmp, &Font_11x18, 1);
 8005c90:	4906      	ldr	r1, [pc, #24]	; (8005cac <showAveragePower+0x50>)
 8005c92:	003b      	movs	r3, r7
 8005c94:	2201      	movs	r2, #1
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 fc1c 	bl	80064d4 <SSD1306_Puts>
}
 8005c9c:	46c0      	nop			; (mov r8, r8)
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	b008      	add	sp, #32
 8005ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ca4:	20000424 	.word	0x20000424
 8005ca8:	080088c4 	.word	0x080088c4
 8005cac:	20000014 	.word	0x20000014

08005cb0 <showSOH>:

void showSOH()
{
 8005cb0:	b590      	push	{r4, r7, lr}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
  uint8_t soh = 0;
 8005cb6:	2117      	movs	r1, #23
 8005cb8:	187b      	adds	r3, r7, r1
 8005cba:	2200      	movs	r2, #0
 8005cbc:	701a      	strb	r2, [r3, #0]
  i2c_read(0x55, 0x20, &soh, 1);
 8005cbe:	000c      	movs	r4, r1
 8005cc0:	187a      	adds	r2, r7, r1
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	2120      	movs	r1, #32
 8005cc6:	2055      	movs	r0, #85	; 0x55
 8005cc8:	f7ff fc54 	bl	8005574 <i2c_read>

  char tmp[20];
  sprintf(tmp, "HLTH: %d%%", soh);
 8005ccc:	0021      	movs	r1, r4
 8005cce:	187b      	adds	r3, r7, r1
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	001a      	movs	r2, r3
 8005cd4:	4909      	ldr	r1, [pc, #36]	; (8005cfc <showSOH+0x4c>)
 8005cd6:	003b      	movs	r3, r7
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f001 f9ab 	bl	8007034 <siprintf>
  SSD1306_GotoXY(0, 13);
 8005cde:	210d      	movs	r1, #13
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	f000 fb5d 	bl	80063a0 <SSD1306_GotoXY>
  SSD1306_Puts(tmp, &Font_11x18, 1);
 8005ce6:	4906      	ldr	r1, [pc, #24]	; (8005d00 <showSOH+0x50>)
 8005ce8:	003b      	movs	r3, r7
 8005cea:	2201      	movs	r2, #1
 8005cec:	0018      	movs	r0, r3
 8005cee:	f000 fbf1 	bl	80064d4 <SSD1306_Puts>
}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b007      	add	sp, #28
 8005cf8:	bd90      	pop	{r4, r7, pc}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	080088cc 	.word	0x080088cc
 8005d00:	20000014 	.word	0x20000014

08005d04 <showDesignCapacity>:
void showDesignCapacity()
{
 8005d04:	b5b0      	push	{r4, r5, r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
  uint16_t descap = 0;
 8005d0a:	2516      	movs	r5, #22
 8005d0c:	197b      	adds	r3, r7, r5
 8005d0e:	2200      	movs	r2, #0
 8005d10:	801a      	strh	r2, [r3, #0]
  descap = BQ27441_G1_GetDesignCapacity(&bq27441_g1);
 8005d12:	197c      	adds	r4, r7, r5
 8005d14:	4b0d      	ldr	r3, [pc, #52]	; (8005d4c <showDesignCapacity+0x48>)
 8005d16:	0018      	movs	r0, r3
 8005d18:	f7ff fa16 	bl	8005148 <BQ27441_G1_GetDesignCapacity>
 8005d1c:	0003      	movs	r3, r0
 8005d1e:	8023      	strh	r3, [r4, #0]

  char tmp[20];
  sprintf(tmp, "D.C:%d mA", descap);
 8005d20:	197b      	adds	r3, r7, r5
 8005d22:	881a      	ldrh	r2, [r3, #0]
 8005d24:	490a      	ldr	r1, [pc, #40]	; (8005d50 <showDesignCapacity+0x4c>)
 8005d26:	003b      	movs	r3, r7
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f001 f983 	bl	8007034 <siprintf>
  SSD1306_GotoXY(0, 13);
 8005d2e:	210d      	movs	r1, #13
 8005d30:	2000      	movs	r0, #0
 8005d32:	f000 fb35 	bl	80063a0 <SSD1306_GotoXY>
  SSD1306_Puts(tmp, &Font_11x18, 1);
 8005d36:	4907      	ldr	r1, [pc, #28]	; (8005d54 <showDesignCapacity+0x50>)
 8005d38:	003b      	movs	r3, r7
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f000 fbc9 	bl	80064d4 <SSD1306_Puts>
}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	46bd      	mov	sp, r7
 8005d46:	b006      	add	sp, #24
 8005d48:	bdb0      	pop	{r4, r5, r7, pc}
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	20000424 	.word	0x20000424
 8005d50:	080088d8 	.word	0x080088d8
 8005d54:	20000014 	.word	0x20000014

08005d58 <showFullChargeCapacity>:
void showFullChargeCapacity()
{
 8005d58:	b5b0      	push	{r4, r5, r7, lr}
 8005d5a:	b086      	sub	sp, #24
 8005d5c:	af00      	add	r7, sp, #0
  uint16_t fullcap = 0;
 8005d5e:	2516      	movs	r5, #22
 8005d60:	197b      	adds	r3, r7, r5
 8005d62:	2200      	movs	r2, #0
 8005d64:	801a      	strh	r2, [r3, #0]
  fullcap = BQ27441_G1_GetFullChargeCapacityUnfiltered(&bq27441_g1);
 8005d66:	197c      	adds	r4, r7, r5
 8005d68:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <showFullChargeCapacity+0x48>)
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f7ff f99c 	bl	80050a8 <BQ27441_G1_GetFullChargeCapacityUnfiltered>
 8005d70:	0003      	movs	r3, r0
 8005d72:	8023      	strh	r3, [r4, #0]

  char tmp[20];
  sprintf(tmp, "F.C:%d mA", fullcap);
 8005d74:	197b      	adds	r3, r7, r5
 8005d76:	881a      	ldrh	r2, [r3, #0]
 8005d78:	490a      	ldr	r1, [pc, #40]	; (8005da4 <showFullChargeCapacity+0x4c>)
 8005d7a:	003b      	movs	r3, r7
 8005d7c:	0018      	movs	r0, r3
 8005d7e:	f001 f959 	bl	8007034 <siprintf>
  SSD1306_GotoXY(0, 13);
 8005d82:	210d      	movs	r1, #13
 8005d84:	2000      	movs	r0, #0
 8005d86:	f000 fb0b 	bl	80063a0 <SSD1306_GotoXY>
  SSD1306_Puts(tmp, &Font_11x18, 1);
 8005d8a:	4907      	ldr	r1, [pc, #28]	; (8005da8 <showFullChargeCapacity+0x50>)
 8005d8c:	003b      	movs	r3, r7
 8005d8e:	2201      	movs	r2, #1
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 fb9f 	bl	80064d4 <SSD1306_Puts>
}
 8005d96:	46c0      	nop			; (mov r8, r8)
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	b006      	add	sp, #24
 8005d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8005d9e:	46c0      	nop			; (mov r8, r8)
 8005da0:	20000424 	.word	0x20000424
 8005da4:	080088e4 	.word	0x080088e4
 8005da8:	20000014 	.word	0x20000014

08005dac <showRemainingCapacity>:
void showRemainingCapacity()
{
 8005dac:	b5b0      	push	{r4, r5, r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
  uint16_t remcap = 0;
 8005db2:	2516      	movs	r5, #22
 8005db4:	197b      	adds	r3, r7, r5
 8005db6:	2200      	movs	r2, #0
 8005db8:	801a      	strh	r2, [r3, #0]
  remcap = BQ27441_G1_GetRemainingCapacityUnfiltered(&bq27441_g1);
 8005dba:	197c      	adds	r4, r7, r5
 8005dbc:	4b0d      	ldr	r3, [pc, #52]	; (8005df4 <showRemainingCapacity+0x48>)
 8005dbe:	0018      	movs	r0, r3
 8005dc0:	f7ff f95f 	bl	8005082 <BQ27441_G1_GetRemainingCapacityUnfiltered>
 8005dc4:	0003      	movs	r3, r0
 8005dc6:	8023      	strh	r3, [r4, #0]

  char tmp[20];
  sprintf(tmp, "R.C:%d mA", remcap);
 8005dc8:	197b      	adds	r3, r7, r5
 8005dca:	881a      	ldrh	r2, [r3, #0]
 8005dcc:	490a      	ldr	r1, [pc, #40]	; (8005df8 <showRemainingCapacity+0x4c>)
 8005dce:	003b      	movs	r3, r7
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f001 f92f 	bl	8007034 <siprintf>
  SSD1306_GotoXY(0, 13);
 8005dd6:	210d      	movs	r1, #13
 8005dd8:	2000      	movs	r0, #0
 8005dda:	f000 fae1 	bl	80063a0 <SSD1306_GotoXY>
  SSD1306_Puts(tmp, &Font_11x18, 1);
 8005dde:	4907      	ldr	r1, [pc, #28]	; (8005dfc <showRemainingCapacity+0x50>)
 8005de0:	003b      	movs	r3, r7
 8005de2:	2201      	movs	r2, #1
 8005de4:	0018      	movs	r0, r3
 8005de6:	f000 fb75 	bl	80064d4 <SSD1306_Puts>
}
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	46bd      	mov	sp, r7
 8005dee:	b006      	add	sp, #24
 8005df0:	bdb0      	pop	{r4, r5, r7, pc}
 8005df2:	46c0      	nop			; (mov r8, r8)
 8005df4:	20000424 	.word	0x20000424
 8005df8:	080088f0 	.word	0x080088f0
 8005dfc:	20000014 	.word	0x20000014

08005e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005e04:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005e06:	e7fe      	b.n	8005e06 <Error_Handler+0x6>

08005e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005e0e:	4b0f      	ldr	r3, [pc, #60]	; (8005e4c <HAL_MspInit+0x44>)
 8005e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e12:	4b0e      	ldr	r3, [pc, #56]	; (8005e4c <HAL_MspInit+0x44>)
 8005e14:	2101      	movs	r1, #1
 8005e16:	430a      	orrs	r2, r1
 8005e18:	641a      	str	r2, [r3, #64]	; 0x40
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <HAL_MspInit+0x44>)
 8005e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e1e:	2201      	movs	r2, #1
 8005e20:	4013      	ands	r3, r2
 8005e22:	607b      	str	r3, [r7, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e26:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <HAL_MspInit+0x44>)
 8005e28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e2a:	4b08      	ldr	r3, [pc, #32]	; (8005e4c <HAL_MspInit+0x44>)
 8005e2c:	2180      	movs	r1, #128	; 0x80
 8005e2e:	0549      	lsls	r1, r1, #21
 8005e30:	430a      	orrs	r2, r1
 8005e32:	63da      	str	r2, [r3, #60]	; 0x3c
 8005e34:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <HAL_MspInit+0x44>)
 8005e36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e38:	2380      	movs	r3, #128	; 0x80
 8005e3a:	055b      	lsls	r3, r3, #21
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	46bd      	mov	sp, r7
 8005e46:	b002      	add	sp, #8
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	46c0      	nop			; (mov r8, r8)
 8005e4c:	40021000 	.word	0x40021000

08005e50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08a      	sub	sp, #40	; 0x28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e58:	2314      	movs	r3, #20
 8005e5a:	18fb      	adds	r3, r7, r3
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	2314      	movs	r3, #20
 8005e60:	001a      	movs	r2, r3
 8005e62:	2100      	movs	r1, #0
 8005e64:	f000 fc80 	bl	8006768 <memset>
  if(hadc->Instance==ADC1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a18      	ldr	r2, [pc, #96]	; (8005ed0 <HAL_ADC_MspInit+0x80>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d129      	bne.n	8005ec6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8005e72:	4b18      	ldr	r3, [pc, #96]	; (8005ed4 <HAL_ADC_MspInit+0x84>)
 8005e74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e76:	4b17      	ldr	r3, [pc, #92]	; (8005ed4 <HAL_ADC_MspInit+0x84>)
 8005e78:	2180      	movs	r1, #128	; 0x80
 8005e7a:	0349      	lsls	r1, r1, #13
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40
 8005e80:	4b14      	ldr	r3, [pc, #80]	; (8005ed4 <HAL_ADC_MspInit+0x84>)
 8005e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e84:	2380      	movs	r3, #128	; 0x80
 8005e86:	035b      	lsls	r3, r3, #13
 8005e88:	4013      	ands	r3, r2
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e8e:	4b11      	ldr	r3, [pc, #68]	; (8005ed4 <HAL_ADC_MspInit+0x84>)
 8005e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e92:	4b10      	ldr	r3, [pc, #64]	; (8005ed4 <HAL_ADC_MspInit+0x84>)
 8005e94:	2102      	movs	r1, #2
 8005e96:	430a      	orrs	r2, r1
 8005e98:	635a      	str	r2, [r3, #52]	; 0x34
 8005e9a:	4b0e      	ldr	r3, [pc, #56]	; (8005ed4 <HAL_ADC_MspInit+0x84>)
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005ea6:	2114      	movs	r1, #20
 8005ea8:	187b      	adds	r3, r7, r1
 8005eaa:	2202      	movs	r2, #2
 8005eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005eae:	187b      	adds	r3, r7, r1
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eb4:	187b      	adds	r3, r7, r1
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eba:	187b      	adds	r3, r7, r1
 8005ebc:	4a06      	ldr	r2, [pc, #24]	; (8005ed8 <HAL_ADC_MspInit+0x88>)
 8005ebe:	0019      	movs	r1, r3
 8005ec0:	0010      	movs	r0, r2
 8005ec2:	f7fc fff9 	bl	8002eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	b00a      	add	sp, #40	; 0x28
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	40012400 	.word	0x40012400
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	50000400 	.word	0x50000400

08005edc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b08c      	sub	sp, #48	; 0x30
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ee4:	231c      	movs	r3, #28
 8005ee6:	18fb      	adds	r3, r7, r3
 8005ee8:	0018      	movs	r0, r3
 8005eea:	2314      	movs	r3, #20
 8005eec:	001a      	movs	r2, r3
 8005eee:	2100      	movs	r1, #0
 8005ef0:	f000 fc3a 	bl	8006768 <memset>
  if(hi2c->Instance==I2C1)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a37      	ldr	r2, [pc, #220]	; (8005fd8 <HAL_I2C_MspInit+0xfc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d130      	bne.n	8005f60 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005efe:	4b37      	ldr	r3, [pc, #220]	; (8005fdc <HAL_I2C_MspInit+0x100>)
 8005f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f02:	4b36      	ldr	r3, [pc, #216]	; (8005fdc <HAL_I2C_MspInit+0x100>)
 8005f04:	2102      	movs	r1, #2
 8005f06:	430a      	orrs	r2, r1
 8005f08:	635a      	str	r2, [r3, #52]	; 0x34
 8005f0a:	4b34      	ldr	r3, [pc, #208]	; (8005fdc <HAL_I2C_MspInit+0x100>)
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0e:	2202      	movs	r2, #2
 8005f10:	4013      	ands	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
 8005f14:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f16:	211c      	movs	r1, #28
 8005f18:	187b      	adds	r3, r7, r1
 8005f1a:	22c0      	movs	r2, #192	; 0xc0
 8005f1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f1e:	187b      	adds	r3, r7, r1
 8005f20:	2212      	movs	r2, #18
 8005f22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f24:	187b      	adds	r3, r7, r1
 8005f26:	2201      	movs	r2, #1
 8005f28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f2a:	187b      	adds	r3, r7, r1
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8005f30:	187b      	adds	r3, r7, r1
 8005f32:	2206      	movs	r2, #6
 8005f34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f36:	187b      	adds	r3, r7, r1
 8005f38:	4a29      	ldr	r2, [pc, #164]	; (8005fe0 <HAL_I2C_MspInit+0x104>)
 8005f3a:	0019      	movs	r1, r3
 8005f3c:	0010      	movs	r0, r2
 8005f3e:	f7fc ffbb 	bl	8002eb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005f42:	4b26      	ldr	r3, [pc, #152]	; (8005fdc <HAL_I2C_MspInit+0x100>)
 8005f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f46:	4b25      	ldr	r3, [pc, #148]	; (8005fdc <HAL_I2C_MspInit+0x100>)
 8005f48:	2180      	movs	r1, #128	; 0x80
 8005f4a:	0389      	lsls	r1, r1, #14
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f50:	4b22      	ldr	r3, [pc, #136]	; (8005fdc <HAL_I2C_MspInit+0x100>)
 8005f52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f54:	2380      	movs	r3, #128	; 0x80
 8005f56:	039b      	lsls	r3, r3, #14
 8005f58:	4013      	ands	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005f5e:	e036      	b.n	8005fce <HAL_I2C_MspInit+0xf2>
  else if(hi2c->Instance==I2C2)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a1f      	ldr	r2, [pc, #124]	; (8005fe4 <HAL_I2C_MspInit+0x108>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d131      	bne.n	8005fce <HAL_I2C_MspInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f6a:	4b1c      	ldr	r3, [pc, #112]	; (8005fdc <HAL_I2C_MspInit+0x100>)
 8005f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f6e:	4b1b      	ldr	r3, [pc, #108]	; (8005fdc <HAL_I2C_MspInit+0x100>)
 8005f70:	2101      	movs	r1, #1
 8005f72:	430a      	orrs	r2, r1
 8005f74:	635a      	str	r2, [r3, #52]	; 0x34
 8005f76:	4b19      	ldr	r3, [pc, #100]	; (8005fdc <HAL_I2C_MspInit+0x100>)
 8005f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
 8005f80:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005f82:	211c      	movs	r1, #28
 8005f84:	187b      	adds	r3, r7, r1
 8005f86:	22c0      	movs	r2, #192	; 0xc0
 8005f88:	0152      	lsls	r2, r2, #5
 8005f8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f8c:	187b      	adds	r3, r7, r1
 8005f8e:	2212      	movs	r2, #18
 8005f90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005f92:	187b      	adds	r3, r7, r1
 8005f94:	2201      	movs	r2, #1
 8005f96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f98:	187b      	adds	r3, r7, r1
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8005f9e:	187b      	adds	r3, r7, r1
 8005fa0:	2206      	movs	r2, #6
 8005fa2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fa4:	187a      	adds	r2, r7, r1
 8005fa6:	23a0      	movs	r3, #160	; 0xa0
 8005fa8:	05db      	lsls	r3, r3, #23
 8005faa:	0011      	movs	r1, r2
 8005fac:	0018      	movs	r0, r3
 8005fae:	f7fc ff83 	bl	8002eb8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005fb2:	4b0a      	ldr	r3, [pc, #40]	; (8005fdc <HAL_I2C_MspInit+0x100>)
 8005fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fb6:	4b09      	ldr	r3, [pc, #36]	; (8005fdc <HAL_I2C_MspInit+0x100>)
 8005fb8:	2180      	movs	r1, #128	; 0x80
 8005fba:	03c9      	lsls	r1, r1, #15
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <HAL_I2C_MspInit+0x100>)
 8005fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fc4:	2380      	movs	r3, #128	; 0x80
 8005fc6:	03db      	lsls	r3, r3, #15
 8005fc8:	4013      	ands	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
}
 8005fce:	46c0      	nop			; (mov r8, r8)
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	b00c      	add	sp, #48	; 0x30
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	46c0      	nop			; (mov r8, r8)
 8005fd8:	40005400 	.word	0x40005400
 8005fdc:	40021000 	.word	0x40021000
 8005fe0:	50000400 	.word	0x50000400
 8005fe4:	40005800 	.word	0x40005800

08005fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005fec:	e7fe      	b.n	8005fec <NMI_Handler+0x4>

08005fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ff2:	e7fe      	b.n	8005ff2 <HardFault_Handler+0x4>

08005ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8005ff8:	46c0      	nop			; (mov r8, r8)
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800600c:	f7fc f99a 	bl	8002344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006010:	46c0      	nop			; (mov r8, r8)
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800601a:	2008      	movs	r0, #8
 800601c:	f7fd f8b0 	bl	8003180 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8006020:	46c0      	nop			; (mov r8, r8)
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
	...

08006028 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b086      	sub	sp, #24
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006030:	4a14      	ldr	r2, [pc, #80]	; (8006084 <_sbrk+0x5c>)
 8006032:	4b15      	ldr	r3, [pc, #84]	; (8006088 <_sbrk+0x60>)
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800603c:	4b13      	ldr	r3, [pc, #76]	; (800608c <_sbrk+0x64>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d102      	bne.n	800604a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006044:	4b11      	ldr	r3, [pc, #68]	; (800608c <_sbrk+0x64>)
 8006046:	4a12      	ldr	r2, [pc, #72]	; (8006090 <_sbrk+0x68>)
 8006048:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800604a:	4b10      	ldr	r3, [pc, #64]	; (800608c <_sbrk+0x64>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	18d3      	adds	r3, r2, r3
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	429a      	cmp	r2, r3
 8006056:	d207      	bcs.n	8006068 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006058:	f000 fb5c 	bl	8006714 <__errno>
 800605c:	0003      	movs	r3, r0
 800605e:	220c      	movs	r2, #12
 8006060:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006062:	2301      	movs	r3, #1
 8006064:	425b      	negs	r3, r3
 8006066:	e009      	b.n	800607c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006068:	4b08      	ldr	r3, [pc, #32]	; (800608c <_sbrk+0x64>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800606e:	4b07      	ldr	r3, [pc, #28]	; (800608c <_sbrk+0x64>)
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	18d2      	adds	r2, r2, r3
 8006076:	4b05      	ldr	r3, [pc, #20]	; (800608c <_sbrk+0x64>)
 8006078:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800607a:	68fb      	ldr	r3, [r7, #12]
}
 800607c:	0018      	movs	r0, r3
 800607e:	46bd      	mov	sp, r7
 8006080:	b006      	add	sp, #24
 8006082:	bd80      	pop	{r7, pc}
 8006084:	20002000 	.word	0x20002000
 8006088:	00000400 	.word	0x00000400
 800608c:	2000020c 	.word	0x2000020c
 8006090:	20000550 	.word	0x20000550

08006094 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006098:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <SystemInit+0x14>)
 800609a:	2280      	movs	r2, #128	; 0x80
 800609c:	0512      	lsls	r2, r2, #20
 800609e:	609a      	str	r2, [r3, #8]
#endif
}
 80060a0:	46c0      	nop			; (mov r8, r8)
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	46c0      	nop			; (mov r8, r8)
 80060a8:	e000ed00 	.word	0xe000ed00

080060ac <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80060b2:	f000 fa49 	bl	8006548 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, HAL_MAX_DELAY) != HAL_OK) {
 80060b6:	2301      	movs	r3, #1
 80060b8:	425b      	negs	r3, r3
 80060ba:	4858      	ldr	r0, [pc, #352]	; (800621c <SSD1306_Init+0x170>)
 80060bc:	2201      	movs	r2, #1
 80060be:	2178      	movs	r1, #120	; 0x78
 80060c0:	f7fd fc92 	bl	80039e8 <HAL_I2C_IsDeviceReady>
 80060c4:	1e03      	subs	r3, r0, #0
 80060c6:	d001      	beq.n	80060cc <SSD1306_Init+0x20>
		/* Return false */
		return 0;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e0a3      	b.n	8006214 <SSD1306_Init+0x168>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80060cc:	4b54      	ldr	r3, [pc, #336]	; (8006220 <SSD1306_Init+0x174>)
 80060ce:	607b      	str	r3, [r7, #4]
	while(p>0)
 80060d0:	e002      	b.n	80060d8 <SSD1306_Init+0x2c>
		p--;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3b01      	subs	r3, #1
 80060d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f9      	bne.n	80060d2 <SSD1306_Init+0x26>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80060de:	22ae      	movs	r2, #174	; 0xae
 80060e0:	2100      	movs	r1, #0
 80060e2:	2078      	movs	r0, #120	; 0x78
 80060e4:	f000 fac2 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80060e8:	2220      	movs	r2, #32
 80060ea:	2100      	movs	r1, #0
 80060ec:	2078      	movs	r0, #120	; 0x78
 80060ee:	f000 fabd 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80060f2:	2210      	movs	r2, #16
 80060f4:	2100      	movs	r1, #0
 80060f6:	2078      	movs	r0, #120	; 0x78
 80060f8:	f000 fab8 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80060fc:	22b0      	movs	r2, #176	; 0xb0
 80060fe:	2100      	movs	r1, #0
 8006100:	2078      	movs	r0, #120	; 0x78
 8006102:	f000 fab3 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8006106:	22c8      	movs	r2, #200	; 0xc8
 8006108:	2100      	movs	r1, #0
 800610a:	2078      	movs	r0, #120	; 0x78
 800610c:	f000 faae 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8006110:	2200      	movs	r2, #0
 8006112:	2100      	movs	r1, #0
 8006114:	2078      	movs	r0, #120	; 0x78
 8006116:	f000 faa9 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800611a:	2210      	movs	r2, #16
 800611c:	2100      	movs	r1, #0
 800611e:	2078      	movs	r0, #120	; 0x78
 8006120:	f000 faa4 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8006124:	2240      	movs	r2, #64	; 0x40
 8006126:	2100      	movs	r1, #0
 8006128:	2078      	movs	r0, #120	; 0x78
 800612a:	f000 fa9f 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800612e:	2281      	movs	r2, #129	; 0x81
 8006130:	2100      	movs	r1, #0
 8006132:	2078      	movs	r0, #120	; 0x78
 8006134:	f000 fa9a 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8006138:	22ff      	movs	r2, #255	; 0xff
 800613a:	2100      	movs	r1, #0
 800613c:	2078      	movs	r0, #120	; 0x78
 800613e:	f000 fa95 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8006142:	22a1      	movs	r2, #161	; 0xa1
 8006144:	2100      	movs	r1, #0
 8006146:	2078      	movs	r0, #120	; 0x78
 8006148:	f000 fa90 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800614c:	22a6      	movs	r2, #166	; 0xa6
 800614e:	2100      	movs	r1, #0
 8006150:	2078      	movs	r0, #120	; 0x78
 8006152:	f000 fa8b 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8006156:	22a8      	movs	r2, #168	; 0xa8
 8006158:	2100      	movs	r1, #0
 800615a:	2078      	movs	r0, #120	; 0x78
 800615c:	f000 fa86 	bl	800666c <ssd1306_I2C_Write>

	if (SSD1306_HEIGHT == 32) { SSD1306_WRITECOMMAND(0x1F); }
 8006160:	221f      	movs	r2, #31
 8006162:	2100      	movs	r1, #0
 8006164:	2078      	movs	r0, #120	; 0x78
 8006166:	f000 fa81 	bl	800666c <ssd1306_I2C_Write>
	else { SSD1306_WRITECOMMAND(0x3F); }
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800616a:	22a4      	movs	r2, #164	; 0xa4
 800616c:	2100      	movs	r1, #0
 800616e:	2078      	movs	r0, #120	; 0x78
 8006170:	f000 fa7c 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8006174:	22d3      	movs	r2, #211	; 0xd3
 8006176:	2100      	movs	r1, #0
 8006178:	2078      	movs	r0, #120	; 0x78
 800617a:	f000 fa77 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800617e:	2200      	movs	r2, #0
 8006180:	2100      	movs	r1, #0
 8006182:	2078      	movs	r0, #120	; 0x78
 8006184:	f000 fa72 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8006188:	22d5      	movs	r2, #213	; 0xd5
 800618a:	2100      	movs	r1, #0
 800618c:	2078      	movs	r0, #120	; 0x78
 800618e:	f000 fa6d 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8006192:	22f0      	movs	r2, #240	; 0xf0
 8006194:	2100      	movs	r1, #0
 8006196:	2078      	movs	r0, #120	; 0x78
 8006198:	f000 fa68 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800619c:	22d9      	movs	r2, #217	; 0xd9
 800619e:	2100      	movs	r1, #0
 80061a0:	2078      	movs	r0, #120	; 0x78
 80061a2:	f000 fa63 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80061a6:	2222      	movs	r2, #34	; 0x22
 80061a8:	2100      	movs	r1, #0
 80061aa:	2078      	movs	r0, #120	; 0x78
 80061ac:	f000 fa5e 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80061b0:	22da      	movs	r2, #218	; 0xda
 80061b2:	2100      	movs	r1, #0
 80061b4:	2078      	movs	r0, #120	; 0x78
 80061b6:	f000 fa59 	bl	800666c <ssd1306_I2C_Write>
if (SSD1306_HEIGHT == 32) { SSD1306_WRITECOMMAND(0x02); }
 80061ba:	2202      	movs	r2, #2
 80061bc:	2100      	movs	r1, #0
 80061be:	2078      	movs	r0, #120	; 0x78
 80061c0:	f000 fa54 	bl	800666c <ssd1306_I2C_Write>
	else { SSD1306_WRITECOMMAND(0x12); }
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80061c4:	22db      	movs	r2, #219	; 0xdb
 80061c6:	2100      	movs	r1, #0
 80061c8:	2078      	movs	r0, #120	; 0x78
 80061ca:	f000 fa4f 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80061ce:	2220      	movs	r2, #32
 80061d0:	2100      	movs	r1, #0
 80061d2:	2078      	movs	r0, #120	; 0x78
 80061d4:	f000 fa4a 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80061d8:	228d      	movs	r2, #141	; 0x8d
 80061da:	2100      	movs	r1, #0
 80061dc:	2078      	movs	r0, #120	; 0x78
 80061de:	f000 fa45 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80061e2:	2214      	movs	r2, #20
 80061e4:	2100      	movs	r1, #0
 80061e6:	2078      	movs	r0, #120	; 0x78
 80061e8:	f000 fa40 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80061ec:	22af      	movs	r2, #175	; 0xaf
 80061ee:	2100      	movs	r1, #0
 80061f0:	2078      	movs	r0, #120	; 0x78
 80061f2:	f000 fa3b 	bl	800666c <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80061f6:	2000      	movs	r0, #0
 80061f8:	f000 f84a 	bl	8006290 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80061fc:	f000 f814 	bl	8006228 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8006200:	4b08      	ldr	r3, [pc, #32]	; (8006224 <SSD1306_Init+0x178>)
 8006202:	2200      	movs	r2, #0
 8006204:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8006206:	4b07      	ldr	r3, [pc, #28]	; (8006224 <SSD1306_Init+0x178>)
 8006208:	2200      	movs	r2, #0
 800620a:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800620c:	4b05      	ldr	r3, [pc, #20]	; (8006224 <SSD1306_Init+0x178>)
 800620e:	2201      	movs	r2, #1
 8006210:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8006212:	2301      	movs	r3, #1
}
 8006214:	0018      	movs	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	b002      	add	sp, #8
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20000498 	.word	0x20000498
 8006220:	000009c4 	.word	0x000009c4
 8006224:	20000410 	.word	0x20000410

08006228 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800622e:	1dfb      	adds	r3, r7, #7
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
 8006234:	e021      	b.n	800627a <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8006236:	1dfb      	adds	r3, r7, #7
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	3b50      	subs	r3, #80	; 0x50
 800623c:	b2db      	uxtb	r3, r3
 800623e:	001a      	movs	r2, r3
 8006240:	2100      	movs	r1, #0
 8006242:	2078      	movs	r0, #120	; 0x78
 8006244:	f000 fa12 	bl	800666c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8006248:	2200      	movs	r2, #0
 800624a:	2100      	movs	r1, #0
 800624c:	2078      	movs	r0, #120	; 0x78
 800624e:	f000 fa0d 	bl	800666c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8006252:	2210      	movs	r2, #16
 8006254:	2100      	movs	r1, #0
 8006256:	2078      	movs	r0, #120	; 0x78
 8006258:	f000 fa08 	bl	800666c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800625c:	1dfb      	adds	r3, r7, #7
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	01da      	lsls	r2, r3, #7
 8006262:	4b0a      	ldr	r3, [pc, #40]	; (800628c <SSD1306_UpdateScreen+0x64>)
 8006264:	18d2      	adds	r2, r2, r3
 8006266:	2380      	movs	r3, #128	; 0x80
 8006268:	2140      	movs	r1, #64	; 0x40
 800626a:	2078      	movs	r0, #120	; 0x78
 800626c:	f000 f97e 	bl	800656c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8006270:	1dfb      	adds	r3, r7, #7
 8006272:	781a      	ldrb	r2, [r3, #0]
 8006274:	1dfb      	adds	r3, r7, #7
 8006276:	3201      	adds	r2, #1
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	1dfb      	adds	r3, r7, #7
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b07      	cmp	r3, #7
 8006280:	d9d9      	bls.n	8006236 <SSD1306_UpdateScreen+0xe>
	}
}
 8006282:	46c0      	nop			; (mov r8, r8)
 8006284:	46bd      	mov	sp, r7
 8006286:	b002      	add	sp, #8
 8006288:	bd80      	pop	{r7, pc}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	20000210 	.word	0x20000210

08006290 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	0002      	movs	r2, r0
 8006298:	1dfb      	adds	r3, r7, #7
 800629a:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800629c:	1dfb      	adds	r3, r7, #7
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <SSD1306_Fill+0x18>
 80062a4:	2100      	movs	r1, #0
 80062a6:	e000      	b.n	80062aa <SSD1306_Fill+0x1a>
 80062a8:	21ff      	movs	r1, #255	; 0xff
 80062aa:	2380      	movs	r3, #128	; 0x80
 80062ac:	009a      	lsls	r2, r3, #2
 80062ae:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <SSD1306_Fill+0x30>)
 80062b0:	0018      	movs	r0, r3
 80062b2:	f000 fa59 	bl	8006768 <memset>
}
 80062b6:	46c0      	nop			; (mov r8, r8)
 80062b8:	46bd      	mov	sp, r7
 80062ba:	b002      	add	sp, #8
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	46c0      	nop			; (mov r8, r8)
 80062c0:	20000210 	.word	0x20000210

080062c4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80062c4:	b590      	push	{r4, r7, lr}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	0004      	movs	r4, r0
 80062cc:	0008      	movs	r0, r1
 80062ce:	0011      	movs	r1, r2
 80062d0:	1dbb      	adds	r3, r7, #6
 80062d2:	1c22      	adds	r2, r4, #0
 80062d4:	801a      	strh	r2, [r3, #0]
 80062d6:	1d3b      	adds	r3, r7, #4
 80062d8:	1c02      	adds	r2, r0, #0
 80062da:	801a      	strh	r2, [r3, #0]
 80062dc:	1cfb      	adds	r3, r7, #3
 80062de:	1c0a      	adds	r2, r1, #0
 80062e0:	701a      	strb	r2, [r3, #0]
	if (
 80062e2:	1dbb      	adds	r3, r7, #6
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	2b7f      	cmp	r3, #127	; 0x7f
 80062e8:	d852      	bhi.n	8006390 <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 80062ea:	1d3b      	adds	r3, r7, #4
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	2b1f      	cmp	r3, #31
 80062f0:	d84e      	bhi.n	8006390 <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80062f2:	4b29      	ldr	r3, [pc, #164]	; (8006398 <SSD1306_DrawPixel+0xd4>)
 80062f4:	791b      	ldrb	r3, [r3, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d006      	beq.n	8006308 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 80062fa:	1cfb      	adds	r3, r7, #3
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	425a      	negs	r2, r3
 8006300:	4153      	adcs	r3, r2
 8006302:	b2da      	uxtb	r2, r3
 8006304:	1cfb      	adds	r3, r7, #3
 8006306:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8006308:	1cfb      	adds	r3, r7, #3
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d11e      	bne.n	800634e <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006310:	1dbb      	adds	r3, r7, #6
 8006312:	881a      	ldrh	r2, [r3, #0]
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	08db      	lsrs	r3, r3, #3
 800631a:	b298      	uxth	r0, r3
 800631c:	0003      	movs	r3, r0
 800631e:	01db      	lsls	r3, r3, #7
 8006320:	18d3      	adds	r3, r2, r3
 8006322:	4a1e      	ldr	r2, [pc, #120]	; (800639c <SSD1306_DrawPixel+0xd8>)
 8006324:	5cd3      	ldrb	r3, [r2, r3]
 8006326:	b25a      	sxtb	r2, r3
 8006328:	1d3b      	adds	r3, r7, #4
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	2107      	movs	r1, #7
 800632e:	400b      	ands	r3, r1
 8006330:	2101      	movs	r1, #1
 8006332:	4099      	lsls	r1, r3
 8006334:	000b      	movs	r3, r1
 8006336:	b25b      	sxtb	r3, r3
 8006338:	4313      	orrs	r3, r2
 800633a:	b259      	sxtb	r1, r3
 800633c:	1dbb      	adds	r3, r7, #6
 800633e:	881a      	ldrh	r2, [r3, #0]
 8006340:	0003      	movs	r3, r0
 8006342:	01db      	lsls	r3, r3, #7
 8006344:	18d3      	adds	r3, r2, r3
 8006346:	b2c9      	uxtb	r1, r1
 8006348:	4a14      	ldr	r2, [pc, #80]	; (800639c <SSD1306_DrawPixel+0xd8>)
 800634a:	54d1      	strb	r1, [r2, r3]
 800634c:	e021      	b.n	8006392 <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800634e:	1dbb      	adds	r3, r7, #6
 8006350:	881a      	ldrh	r2, [r3, #0]
 8006352:	1d3b      	adds	r3, r7, #4
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	08db      	lsrs	r3, r3, #3
 8006358:	b298      	uxth	r0, r3
 800635a:	0003      	movs	r3, r0
 800635c:	01db      	lsls	r3, r3, #7
 800635e:	18d3      	adds	r3, r2, r3
 8006360:	4a0e      	ldr	r2, [pc, #56]	; (800639c <SSD1306_DrawPixel+0xd8>)
 8006362:	5cd3      	ldrb	r3, [r2, r3]
 8006364:	b25b      	sxtb	r3, r3
 8006366:	1d3a      	adds	r2, r7, #4
 8006368:	8812      	ldrh	r2, [r2, #0]
 800636a:	2107      	movs	r1, #7
 800636c:	400a      	ands	r2, r1
 800636e:	2101      	movs	r1, #1
 8006370:	4091      	lsls	r1, r2
 8006372:	000a      	movs	r2, r1
 8006374:	b252      	sxtb	r2, r2
 8006376:	43d2      	mvns	r2, r2
 8006378:	b252      	sxtb	r2, r2
 800637a:	4013      	ands	r3, r2
 800637c:	b259      	sxtb	r1, r3
 800637e:	1dbb      	adds	r3, r7, #6
 8006380:	881a      	ldrh	r2, [r3, #0]
 8006382:	0003      	movs	r3, r0
 8006384:	01db      	lsls	r3, r3, #7
 8006386:	18d3      	adds	r3, r2, r3
 8006388:	b2c9      	uxtb	r1, r1
 800638a:	4a04      	ldr	r2, [pc, #16]	; (800639c <SSD1306_DrawPixel+0xd8>)
 800638c:	54d1      	strb	r1, [r2, r3]
 800638e:	e000      	b.n	8006392 <SSD1306_DrawPixel+0xce>
		return;
 8006390:	46c0      	nop			; (mov r8, r8)
	}
}
 8006392:	46bd      	mov	sp, r7
 8006394:	b003      	add	sp, #12
 8006396:	bd90      	pop	{r4, r7, pc}
 8006398:	20000410 	.word	0x20000410
 800639c:	20000210 	.word	0x20000210

080063a0 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	0002      	movs	r2, r0
 80063a8:	1dbb      	adds	r3, r7, #6
 80063aa:	801a      	strh	r2, [r3, #0]
 80063ac:	1d3b      	adds	r3, r7, #4
 80063ae:	1c0a      	adds	r2, r1, #0
 80063b0:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80063b2:	4b06      	ldr	r3, [pc, #24]	; (80063cc <SSD1306_GotoXY+0x2c>)
 80063b4:	1dba      	adds	r2, r7, #6
 80063b6:	8812      	ldrh	r2, [r2, #0]
 80063b8:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 80063ba:	4b04      	ldr	r3, [pc, #16]	; (80063cc <SSD1306_GotoXY+0x2c>)
 80063bc:	1d3a      	adds	r2, r7, #4
 80063be:	8812      	ldrh	r2, [r2, #0]
 80063c0:	805a      	strh	r2, [r3, #2]
}
 80063c2:	46c0      	nop			; (mov r8, r8)
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b002      	add	sp, #8
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	20000410 	.word	0x20000410

080063d0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6039      	str	r1, [r7, #0]
 80063d8:	0011      	movs	r1, r2
 80063da:	1dfb      	adds	r3, r7, #7
 80063dc:	1c02      	adds	r2, r0, #0
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	1dbb      	adds	r3, r7, #6
 80063e2:	1c0a      	adds	r2, r1, #0
 80063e4:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80063e6:	4b3a      	ldr	r3, [pc, #232]	; (80064d0 <SSD1306_Putc+0x100>)
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	001a      	movs	r2, r3
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	18d3      	adds	r3, r2, r3
	if (
 80063f2:	2b7f      	cmp	r3, #127	; 0x7f
 80063f4:	dc07      	bgt.n	8006406 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80063f6:	4b36      	ldr	r3, [pc, #216]	; (80064d0 <SSD1306_Putc+0x100>)
 80063f8:	885b      	ldrh	r3, [r3, #2]
 80063fa:	001a      	movs	r2, r3
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	785b      	ldrb	r3, [r3, #1]
 8006400:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8006402:	2b1f      	cmp	r3, #31
 8006404:	dd01      	ble.n	800640a <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8006406:	2300      	movs	r3, #0
 8006408:	e05e      	b.n	80064c8 <SSD1306_Putc+0xf8>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e04a      	b.n	80064a6 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	1dfb      	adds	r3, r7, #7
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	3b20      	subs	r3, #32
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	7849      	ldrb	r1, [r1, #1]
 800641e:	434b      	muls	r3, r1
 8006420:	0019      	movs	r1, r3
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	18cb      	adds	r3, r1, r3
 8006426:	005b      	lsls	r3, r3, #1
 8006428:	18d3      	adds	r3, r2, r3
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800642e:	2300      	movs	r3, #0
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	e02f      	b.n	8006494 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	409a      	lsls	r2, r3
 800643a:	2380      	movs	r3, #128	; 0x80
 800643c:	021b      	lsls	r3, r3, #8
 800643e:	4013      	ands	r3, r2
 8006440:	d011      	beq.n	8006466 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8006442:	4b23      	ldr	r3, [pc, #140]	; (80064d0 <SSD1306_Putc+0x100>)
 8006444:	881a      	ldrh	r2, [r3, #0]
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	b29b      	uxth	r3, r3
 800644a:	18d3      	adds	r3, r2, r3
 800644c:	b298      	uxth	r0, r3
 800644e:	4b20      	ldr	r3, [pc, #128]	; (80064d0 <SSD1306_Putc+0x100>)
 8006450:	885a      	ldrh	r2, [r3, #2]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	b29b      	uxth	r3, r3
 8006456:	18d3      	adds	r3, r2, r3
 8006458:	b299      	uxth	r1, r3
 800645a:	1dbb      	adds	r3, r7, #6
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	001a      	movs	r2, r3
 8006460:	f7ff ff30 	bl	80062c4 <SSD1306_DrawPixel>
 8006464:	e013      	b.n	800648e <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8006466:	4b1a      	ldr	r3, [pc, #104]	; (80064d0 <SSD1306_Putc+0x100>)
 8006468:	881a      	ldrh	r2, [r3, #0]
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	b29b      	uxth	r3, r3
 800646e:	18d3      	adds	r3, r2, r3
 8006470:	b298      	uxth	r0, r3
 8006472:	4b17      	ldr	r3, [pc, #92]	; (80064d0 <SSD1306_Putc+0x100>)
 8006474:	885a      	ldrh	r2, [r3, #2]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	b29b      	uxth	r3, r3
 800647a:	18d3      	adds	r3, r2, r3
 800647c:	b299      	uxth	r1, r3
 800647e:	1dbb      	adds	r3, r7, #6
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	425a      	negs	r2, r3
 8006484:	4153      	adcs	r3, r2
 8006486:	b2db      	uxtb	r3, r3
 8006488:	001a      	movs	r2, r3
 800648a:	f7ff ff1b 	bl	80062c4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	3301      	adds	r3, #1
 8006492:	613b      	str	r3, [r7, #16]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	001a      	movs	r2, r3
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	4293      	cmp	r3, r2
 800649e:	d3c9      	bcc.n	8006434 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	3301      	adds	r3, #1
 80064a4:	617b      	str	r3, [r7, #20]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	785b      	ldrb	r3, [r3, #1]
 80064aa:	001a      	movs	r2, r3
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d3ae      	bcc.n	8006410 <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80064b2:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <SSD1306_Putc+0x100>)
 80064b4:	881a      	ldrh	r2, [r3, #0]
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	18d3      	adds	r3, r2, r3
 80064be:	b29a      	uxth	r2, r3
 80064c0:	4b03      	ldr	r3, [pc, #12]	; (80064d0 <SSD1306_Putc+0x100>)
 80064c2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80064c4:	1dfb      	adds	r3, r7, #7
 80064c6:	781b      	ldrb	r3, [r3, #0]
}
 80064c8:	0018      	movs	r0, r3
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b006      	add	sp, #24
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	20000410 	.word	0x20000410

080064d4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	60f8      	str	r0, [r7, #12]
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	1dfb      	adds	r3, r7, #7
 80064e0:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 80064e2:	e013      	b.n	800650c <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	7818      	ldrb	r0, [r3, #0]
 80064e8:	1dfb      	adds	r3, r7, #7
 80064ea:	781a      	ldrb	r2, [r3, #0]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	0019      	movs	r1, r3
 80064f0:	f7ff ff6e 	bl	80063d0 <SSD1306_Putc>
 80064f4:	0003      	movs	r3, r0
 80064f6:	001a      	movs	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d002      	beq.n	8006506 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	e008      	b.n	8006518 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3301      	adds	r3, #1
 800650a:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e7      	bne.n	80064e4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	781b      	ldrb	r3, [r3, #0]
}
 8006518:	0018      	movs	r0, r3
 800651a:	46bd      	mov	sp, r7
 800651c:	b004      	add	sp, #16
 800651e:	bd80      	pop	{r7, pc}

08006520 <SSD1306_ON>:
        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
    }
}
 
void SSD1306_ON(void) {
 8006520:	b580      	push	{r7, lr}
 8006522:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(0x8D);  
 8006524:	228d      	movs	r2, #141	; 0x8d
 8006526:	2100      	movs	r1, #0
 8006528:	2078      	movs	r0, #120	; 0x78
 800652a:	f000 f89f 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);  
 800652e:	2214      	movs	r2, #20
 8006530:	2100      	movs	r1, #0
 8006532:	2078      	movs	r0, #120	; 0x78
 8006534:	f000 f89a 	bl	800666c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);  
 8006538:	22af      	movs	r2, #175	; 0xaf
 800653a:	2100      	movs	r1, #0
 800653c:	2078      	movs	r0, #120	; 0x78
 800653e:	f000 f895 	bl	800666c <ssd1306_I2C_Write>
}
 8006542:	46c0      	nop			; (mov r8, r8)
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800654e:	4b06      	ldr	r3, [pc, #24]	; (8006568 <ssd1306_I2C_Init+0x20>)
 8006550:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006552:	e002      	b.n	800655a <ssd1306_I2C_Init+0x12>
		p--;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	3b01      	subs	r3, #1
 8006558:	607b      	str	r3, [r7, #4]
	while(p>0)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1f9      	bne.n	8006554 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8006560:	46c0      	nop			; (mov r8, r8)
 8006562:	46bd      	mov	sp, r7
 8006564:	b002      	add	sp, #8
 8006566:	bd80      	pop	{r7, pc}
 8006568:	0003d090 	.word	0x0003d090

0800656c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800656c:	b590      	push	{r4, r7, lr}
 800656e:	b0c7      	sub	sp, #284	; 0x11c
 8006570:	af02      	add	r7, sp, #8
 8006572:	0004      	movs	r4, r0
 8006574:	0008      	movs	r0, r1
 8006576:	603a      	str	r2, [r7, #0]
 8006578:	0019      	movs	r1, r3
 800657a:	4b37      	ldr	r3, [pc, #220]	; (8006658 <ssd1306_I2C_WriteMulti+0xec>)
 800657c:	2288      	movs	r2, #136	; 0x88
 800657e:	0052      	lsls	r2, r2, #1
 8006580:	4694      	mov	ip, r2
 8006582:	44bc      	add	ip, r7
 8006584:	4463      	add	r3, ip
 8006586:	1c22      	adds	r2, r4, #0
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	4b34      	ldr	r3, [pc, #208]	; (800665c <ssd1306_I2C_WriteMulti+0xf0>)
 800658c:	2288      	movs	r2, #136	; 0x88
 800658e:	0052      	lsls	r2, r2, #1
 8006590:	4694      	mov	ip, r2
 8006592:	44bc      	add	ip, r7
 8006594:	4463      	add	r3, ip
 8006596:	1c02      	adds	r2, r0, #0
 8006598:	701a      	strb	r2, [r3, #0]
 800659a:	4b31      	ldr	r3, [pc, #196]	; (8006660 <ssd1306_I2C_WriteMulti+0xf4>)
 800659c:	2288      	movs	r2, #136	; 0x88
 800659e:	0052      	lsls	r2, r2, #1
 80065a0:	4694      	mov	ip, r2
 80065a2:	44bc      	add	ip, r7
 80065a4:	4463      	add	r3, ip
 80065a6:	1c0a      	adds	r2, r1, #0
 80065a8:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 80065aa:	4b2e      	ldr	r3, [pc, #184]	; (8006664 <ssd1306_I2C_WriteMulti+0xf8>)
 80065ac:	2288      	movs	r2, #136	; 0x88
 80065ae:	0052      	lsls	r2, r2, #1
 80065b0:	4694      	mov	ip, r2
 80065b2:	44bc      	add	ip, r7
 80065b4:	4463      	add	r3, ip
 80065b6:	4a29      	ldr	r2, [pc, #164]	; (800665c <ssd1306_I2C_WriteMulti+0xf0>)
 80065b8:	2188      	movs	r1, #136	; 0x88
 80065ba:	0049      	lsls	r1, r1, #1
 80065bc:	468c      	mov	ip, r1
 80065be:	44bc      	add	ip, r7
 80065c0:	4462      	add	r2, ip
 80065c2:	7812      	ldrb	r2, [r2, #0]
 80065c4:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 80065c6:	2310      	movs	r3, #16
 80065c8:	33ff      	adds	r3, #255	; 0xff
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	2200      	movs	r2, #0
 80065ce:	701a      	strb	r2, [r3, #0]
 80065d0:	e015      	b.n	80065fe <ssd1306_I2C_WriteMulti+0x92>
	dt[i+1] = data[i];
 80065d2:	2010      	movs	r0, #16
 80065d4:	30ff      	adds	r0, #255	; 0xff
 80065d6:	183b      	adds	r3, r7, r0
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	18d2      	adds	r2, r2, r3
 80065de:	183b      	adds	r3, r7, r0
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	3301      	adds	r3, #1
 80065e4:	7811      	ldrb	r1, [r2, #0]
 80065e6:	4a1f      	ldr	r2, [pc, #124]	; (8006664 <ssd1306_I2C_WriteMulti+0xf8>)
 80065e8:	2488      	movs	r4, #136	; 0x88
 80065ea:	0064      	lsls	r4, r4, #1
 80065ec:	46a4      	mov	ip, r4
 80065ee:	44bc      	add	ip, r7
 80065f0:	4462      	add	r2, ip
 80065f2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 80065f4:	183b      	adds	r3, r7, r0
 80065f6:	781a      	ldrb	r2, [r3, #0]
 80065f8:	183b      	adds	r3, r7, r0
 80065fa:	3201      	adds	r2, #1
 80065fc:	701a      	strb	r2, [r3, #0]
 80065fe:	2310      	movs	r3, #16
 8006600:	33ff      	adds	r3, #255	; 0xff
 8006602:	18fb      	adds	r3, r7, r3
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	4a15      	ldr	r2, [pc, #84]	; (8006660 <ssd1306_I2C_WriteMulti+0xf4>)
 800660a:	2188      	movs	r1, #136	; 0x88
 800660c:	0049      	lsls	r1, r1, #1
 800660e:	468c      	mov	ip, r1
 8006610:	44bc      	add	ip, r7
 8006612:	4462      	add	r2, ip
 8006614:	8812      	ldrh	r2, [r2, #0]
 8006616:	429a      	cmp	r2, r3
 8006618:	d8db      	bhi.n	80065d2 <ssd1306_I2C_WriteMulti+0x66>
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, HAL_MAX_DELAY);
 800661a:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <ssd1306_I2C_WriteMulti+0xec>)
 800661c:	2288      	movs	r2, #136	; 0x88
 800661e:	0052      	lsls	r2, r2, #1
 8006620:	4694      	mov	ip, r2
 8006622:	44bc      	add	ip, r7
 8006624:	4463      	add	r3, ip
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	b299      	uxth	r1, r3
 800662a:	4b0d      	ldr	r3, [pc, #52]	; (8006660 <ssd1306_I2C_WriteMulti+0xf4>)
 800662c:	2288      	movs	r2, #136	; 0x88
 800662e:	0052      	lsls	r2, r2, #1
 8006630:	4694      	mov	ip, r2
 8006632:	44bc      	add	ip, r7
 8006634:	4463      	add	r3, ip
 8006636:	881b      	ldrh	r3, [r3, #0]
 8006638:	3301      	adds	r3, #1
 800663a:	b29c      	uxth	r4, r3
 800663c:	230c      	movs	r3, #12
 800663e:	18fa      	adds	r2, r7, r3
 8006640:	4809      	ldr	r0, [pc, #36]	; (8006668 <ssd1306_I2C_WriteMulti+0xfc>)
 8006642:	2301      	movs	r3, #1
 8006644:	425b      	negs	r3, r3
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	0023      	movs	r3, r4
 800664a:	f7fc fe63 	bl	8003314 <HAL_I2C_Master_Transmit>
}
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	46bd      	mov	sp, r7
 8006652:	b045      	add	sp, #276	; 0x114
 8006654:	bd90      	pop	{r4, r7, pc}
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	fffffef7 	.word	0xfffffef7
 800665c:	fffffef6 	.word	0xfffffef6
 8006660:	fffffef4 	.word	0xfffffef4
 8006664:	fffffefc 	.word	0xfffffefc
 8006668:	20000498 	.word	0x20000498

0800666c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800666c:	b590      	push	{r4, r7, lr}
 800666e:	b087      	sub	sp, #28
 8006670:	af02      	add	r7, sp, #8
 8006672:	0004      	movs	r4, r0
 8006674:	0008      	movs	r0, r1
 8006676:	0011      	movs	r1, r2
 8006678:	1dfb      	adds	r3, r7, #7
 800667a:	1c22      	adds	r2, r4, #0
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	1dbb      	adds	r3, r7, #6
 8006680:	1c02      	adds	r2, r0, #0
 8006682:	701a      	strb	r2, [r3, #0]
 8006684:	1d7b      	adds	r3, r7, #5
 8006686:	1c0a      	adds	r2, r1, #0
 8006688:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 800668a:	200c      	movs	r0, #12
 800668c:	183b      	adds	r3, r7, r0
 800668e:	1dba      	adds	r2, r7, #6
 8006690:	7812      	ldrb	r2, [r2, #0]
 8006692:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8006694:	183b      	adds	r3, r7, r0
 8006696:	1d7a      	adds	r2, r7, #5
 8006698:	7812      	ldrb	r2, [r2, #0]
 800669a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, HAL_MAX_DELAY);
 800669c:	1dfb      	adds	r3, r7, #7
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	b299      	uxth	r1, r3
 80066a2:	183a      	adds	r2, r7, r0
 80066a4:	4805      	ldr	r0, [pc, #20]	; (80066bc <ssd1306_I2C_Write+0x50>)
 80066a6:	2301      	movs	r3, #1
 80066a8:	425b      	negs	r3, r3
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	2302      	movs	r3, #2
 80066ae:	f7fc fe31 	bl	8003314 <HAL_I2C_Master_Transmit>
}
 80066b2:	46c0      	nop			; (mov r8, r8)
 80066b4:	46bd      	mov	sp, r7
 80066b6:	b005      	add	sp, #20
 80066b8:	bd90      	pop	{r4, r7, pc}
 80066ba:	46c0      	nop			; (mov r8, r8)
 80066bc:	20000498 	.word	0x20000498

080066c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80066c0:	480d      	ldr	r0, [pc, #52]	; (80066f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80066c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80066c4:	f7ff fce6 	bl	8006094 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80066c8:	480c      	ldr	r0, [pc, #48]	; (80066fc <LoopForever+0x6>)
  ldr r1, =_edata
 80066ca:	490d      	ldr	r1, [pc, #52]	; (8006700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80066cc:	4a0d      	ldr	r2, [pc, #52]	; (8006704 <LoopForever+0xe>)
  movs r3, #0
 80066ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80066d0:	e002      	b.n	80066d8 <LoopCopyDataInit>

080066d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80066d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80066d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80066d6:	3304      	adds	r3, #4

080066d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80066d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80066da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80066dc:	d3f9      	bcc.n	80066d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80066de:	4a0a      	ldr	r2, [pc, #40]	; (8006708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80066e0:	4c0a      	ldr	r4, [pc, #40]	; (800670c <LoopForever+0x16>)
  movs r3, #0
 80066e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80066e4:	e001      	b.n	80066ea <LoopFillZerobss>

080066e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80066e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80066e8:	3204      	adds	r2, #4

080066ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80066ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80066ec:	d3fb      	bcc.n	80066e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80066ee:	f000 f817 	bl	8006720 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80066f2:	f7fe ff9f 	bl	8005634 <main>

080066f6 <LoopForever>:

LoopForever:
  b LoopForever
 80066f6:	e7fe      	b.n	80066f6 <LoopForever>
  ldr   r0, =_estack
 80066f8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80066fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006700:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8006704:	0800a108 	.word	0x0800a108
  ldr r2, =_sbss
 8006708:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 800670c:	2000054c 	.word	0x2000054c

08006710 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006710:	e7fe      	b.n	8006710 <ADC1_IRQHandler>
	...

08006714 <__errno>:
 8006714:	4b01      	ldr	r3, [pc, #4]	; (800671c <__errno+0x8>)
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	4770      	bx	lr
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	2000001c 	.word	0x2000001c

08006720 <__libc_init_array>:
 8006720:	b570      	push	{r4, r5, r6, lr}
 8006722:	2600      	movs	r6, #0
 8006724:	4d0c      	ldr	r5, [pc, #48]	; (8006758 <__libc_init_array+0x38>)
 8006726:	4c0d      	ldr	r4, [pc, #52]	; (800675c <__libc_init_array+0x3c>)
 8006728:	1b64      	subs	r4, r4, r5
 800672a:	10a4      	asrs	r4, r4, #2
 800672c:	42a6      	cmp	r6, r4
 800672e:	d109      	bne.n	8006744 <__libc_init_array+0x24>
 8006730:	2600      	movs	r6, #0
 8006732:	f002 f89f 	bl	8008874 <_init>
 8006736:	4d0a      	ldr	r5, [pc, #40]	; (8006760 <__libc_init_array+0x40>)
 8006738:	4c0a      	ldr	r4, [pc, #40]	; (8006764 <__libc_init_array+0x44>)
 800673a:	1b64      	subs	r4, r4, r5
 800673c:	10a4      	asrs	r4, r4, #2
 800673e:	42a6      	cmp	r6, r4
 8006740:	d105      	bne.n	800674e <__libc_init_array+0x2e>
 8006742:	bd70      	pop	{r4, r5, r6, pc}
 8006744:	00b3      	lsls	r3, r6, #2
 8006746:	58eb      	ldr	r3, [r5, r3]
 8006748:	4798      	blx	r3
 800674a:	3601      	adds	r6, #1
 800674c:	e7ee      	b.n	800672c <__libc_init_array+0xc>
 800674e:	00b3      	lsls	r3, r6, #2
 8006750:	58eb      	ldr	r3, [r5, r3]
 8006752:	4798      	blx	r3
 8006754:	3601      	adds	r6, #1
 8006756:	e7f2      	b.n	800673e <__libc_init_array+0x1e>
 8006758:	0800a100 	.word	0x0800a100
 800675c:	0800a100 	.word	0x0800a100
 8006760:	0800a100 	.word	0x0800a100
 8006764:	0800a104 	.word	0x0800a104

08006768 <memset>:
 8006768:	0003      	movs	r3, r0
 800676a:	1812      	adds	r2, r2, r0
 800676c:	4293      	cmp	r3, r2
 800676e:	d100      	bne.n	8006772 <memset+0xa>
 8006770:	4770      	bx	lr
 8006772:	7019      	strb	r1, [r3, #0]
 8006774:	3301      	adds	r3, #1
 8006776:	e7f9      	b.n	800676c <memset+0x4>

08006778 <__cvt>:
 8006778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800677a:	b08b      	sub	sp, #44	; 0x2c
 800677c:	0014      	movs	r4, r2
 800677e:	1e1d      	subs	r5, r3, #0
 8006780:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006782:	da53      	bge.n	800682c <__cvt+0xb4>
 8006784:	2480      	movs	r4, #128	; 0x80
 8006786:	0624      	lsls	r4, r4, #24
 8006788:	191b      	adds	r3, r3, r4
 800678a:	001d      	movs	r5, r3
 800678c:	0014      	movs	r4, r2
 800678e:	232d      	movs	r3, #45	; 0x2d
 8006790:	700b      	strb	r3, [r1, #0]
 8006792:	2320      	movs	r3, #32
 8006794:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006796:	2203      	movs	r2, #3
 8006798:	439e      	bics	r6, r3
 800679a:	2e46      	cmp	r6, #70	; 0x46
 800679c:	d007      	beq.n	80067ae <__cvt+0x36>
 800679e:	0033      	movs	r3, r6
 80067a0:	3b45      	subs	r3, #69	; 0x45
 80067a2:	4259      	negs	r1, r3
 80067a4:	414b      	adcs	r3, r1
 80067a6:	9910      	ldr	r1, [sp, #64]	; 0x40
 80067a8:	3a01      	subs	r2, #1
 80067aa:	18cb      	adds	r3, r1, r3
 80067ac:	9310      	str	r3, [sp, #64]	; 0x40
 80067ae:	ab09      	add	r3, sp, #36	; 0x24
 80067b0:	9304      	str	r3, [sp, #16]
 80067b2:	ab08      	add	r3, sp, #32
 80067b4:	9303      	str	r3, [sp, #12]
 80067b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067b8:	9200      	str	r2, [sp, #0]
 80067ba:	9302      	str	r3, [sp, #8]
 80067bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067be:	0022      	movs	r2, r4
 80067c0:	9301      	str	r3, [sp, #4]
 80067c2:	002b      	movs	r3, r5
 80067c4:	f000 fcdc 	bl	8007180 <_dtoa_r>
 80067c8:	0007      	movs	r7, r0
 80067ca:	2e47      	cmp	r6, #71	; 0x47
 80067cc:	d102      	bne.n	80067d4 <__cvt+0x5c>
 80067ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80067d0:	07db      	lsls	r3, r3, #31
 80067d2:	d524      	bpl.n	800681e <__cvt+0xa6>
 80067d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067d6:	18fb      	adds	r3, r7, r3
 80067d8:	9307      	str	r3, [sp, #28]
 80067da:	2e46      	cmp	r6, #70	; 0x46
 80067dc:	d114      	bne.n	8006808 <__cvt+0x90>
 80067de:	783b      	ldrb	r3, [r7, #0]
 80067e0:	2b30      	cmp	r3, #48	; 0x30
 80067e2:	d10c      	bne.n	80067fe <__cvt+0x86>
 80067e4:	2200      	movs	r2, #0
 80067e6:	2300      	movs	r3, #0
 80067e8:	0020      	movs	r0, r4
 80067ea:	0029      	movs	r1, r5
 80067ec:	f7f9 fe22 	bl	8000434 <__aeabi_dcmpeq>
 80067f0:	2800      	cmp	r0, #0
 80067f2:	d104      	bne.n	80067fe <__cvt+0x86>
 80067f4:	2301      	movs	r3, #1
 80067f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067f8:	1a9b      	subs	r3, r3, r2
 80067fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006800:	9a07      	ldr	r2, [sp, #28]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	18d3      	adds	r3, r2, r3
 8006806:	9307      	str	r3, [sp, #28]
 8006808:	2200      	movs	r2, #0
 800680a:	2300      	movs	r3, #0
 800680c:	0020      	movs	r0, r4
 800680e:	0029      	movs	r1, r5
 8006810:	f7f9 fe10 	bl	8000434 <__aeabi_dcmpeq>
 8006814:	2230      	movs	r2, #48	; 0x30
 8006816:	2800      	cmp	r0, #0
 8006818:	d00d      	beq.n	8006836 <__cvt+0xbe>
 800681a:	9b07      	ldr	r3, [sp, #28]
 800681c:	9309      	str	r3, [sp, #36]	; 0x24
 800681e:	0038      	movs	r0, r7
 8006820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006822:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006824:	1bdb      	subs	r3, r3, r7
 8006826:	6013      	str	r3, [r2, #0]
 8006828:	b00b      	add	sp, #44	; 0x2c
 800682a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800682c:	2300      	movs	r3, #0
 800682e:	e7af      	b.n	8006790 <__cvt+0x18>
 8006830:	1c59      	adds	r1, r3, #1
 8006832:	9109      	str	r1, [sp, #36]	; 0x24
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006838:	9907      	ldr	r1, [sp, #28]
 800683a:	428b      	cmp	r3, r1
 800683c:	d3f8      	bcc.n	8006830 <__cvt+0xb8>
 800683e:	e7ee      	b.n	800681e <__cvt+0xa6>

08006840 <__exponent>:
 8006840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006842:	1c83      	adds	r3, r0, #2
 8006844:	b085      	sub	sp, #20
 8006846:	9301      	str	r3, [sp, #4]
 8006848:	0006      	movs	r6, r0
 800684a:	000c      	movs	r4, r1
 800684c:	7002      	strb	r2, [r0, #0]
 800684e:	232b      	movs	r3, #43	; 0x2b
 8006850:	2900      	cmp	r1, #0
 8006852:	da01      	bge.n	8006858 <__exponent+0x18>
 8006854:	232d      	movs	r3, #45	; 0x2d
 8006856:	424c      	negs	r4, r1
 8006858:	7073      	strb	r3, [r6, #1]
 800685a:	2c09      	cmp	r4, #9
 800685c:	dd22      	ble.n	80068a4 <__exponent+0x64>
 800685e:	ab02      	add	r3, sp, #8
 8006860:	1ddd      	adds	r5, r3, #7
 8006862:	0020      	movs	r0, r4
 8006864:	210a      	movs	r1, #10
 8006866:	f7f9 fdcf 	bl	8000408 <__aeabi_idivmod>
 800686a:	1e6f      	subs	r7, r5, #1
 800686c:	3130      	adds	r1, #48	; 0x30
 800686e:	7039      	strb	r1, [r7, #0]
 8006870:	0020      	movs	r0, r4
 8006872:	210a      	movs	r1, #10
 8006874:	f7f9 fce2 	bl	800023c <__divsi3>
 8006878:	0004      	movs	r4, r0
 800687a:	2809      	cmp	r0, #9
 800687c:	dc0b      	bgt.n	8006896 <__exponent+0x56>
 800687e:	3d02      	subs	r5, #2
 8006880:	3430      	adds	r4, #48	; 0x30
 8006882:	9b01      	ldr	r3, [sp, #4]
 8006884:	702c      	strb	r4, [r5, #0]
 8006886:	aa02      	add	r2, sp, #8
 8006888:	3207      	adds	r2, #7
 800688a:	0018      	movs	r0, r3
 800688c:	42aa      	cmp	r2, r5
 800688e:	d804      	bhi.n	800689a <__exponent+0x5a>
 8006890:	1b80      	subs	r0, r0, r6
 8006892:	b005      	add	sp, #20
 8006894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006896:	003d      	movs	r5, r7
 8006898:	e7e3      	b.n	8006862 <__exponent+0x22>
 800689a:	782a      	ldrb	r2, [r5, #0]
 800689c:	3501      	adds	r5, #1
 800689e:	701a      	strb	r2, [r3, #0]
 80068a0:	3301      	adds	r3, #1
 80068a2:	e7f0      	b.n	8006886 <__exponent+0x46>
 80068a4:	2330      	movs	r3, #48	; 0x30
 80068a6:	18e4      	adds	r4, r4, r3
 80068a8:	70b3      	strb	r3, [r6, #2]
 80068aa:	1d30      	adds	r0, r6, #4
 80068ac:	70f4      	strb	r4, [r6, #3]
 80068ae:	e7ef      	b.n	8006890 <__exponent+0x50>

080068b0 <_printf_float>:
 80068b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068b2:	b095      	sub	sp, #84	; 0x54
 80068b4:	000c      	movs	r4, r1
 80068b6:	920a      	str	r2, [sp, #40]	; 0x28
 80068b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80068ba:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80068bc:	9009      	str	r0, [sp, #36]	; 0x24
 80068be:	f001 fa3f 	bl	8007d40 <_localeconv_r>
 80068c2:	6803      	ldr	r3, [r0, #0]
 80068c4:	0018      	movs	r0, r3
 80068c6:	930c      	str	r3, [sp, #48]	; 0x30
 80068c8:	f7f9 fc1c 	bl	8000104 <strlen>
 80068cc:	2300      	movs	r3, #0
 80068ce:	9312      	str	r3, [sp, #72]	; 0x48
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	900e      	str	r0, [sp, #56]	; 0x38
 80068d4:	930d      	str	r3, [sp, #52]	; 0x34
 80068d6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80068d8:	7e27      	ldrb	r7, [r4, #24]
 80068da:	682b      	ldr	r3, [r5, #0]
 80068dc:	2207      	movs	r2, #7
 80068de:	05c9      	lsls	r1, r1, #23
 80068e0:	d545      	bpl.n	800696e <_printf_float+0xbe>
 80068e2:	189b      	adds	r3, r3, r2
 80068e4:	4393      	bics	r3, r2
 80068e6:	001a      	movs	r2, r3
 80068e8:	3208      	adds	r2, #8
 80068ea:	602a      	str	r2, [r5, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	64a2      	str	r2, [r4, #72]	; 0x48
 80068f2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80068f4:	2201      	movs	r2, #1
 80068f6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80068f8:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 80068fa:	006b      	lsls	r3, r5, #1
 80068fc:	085b      	lsrs	r3, r3, #1
 80068fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8006900:	4252      	negs	r2, r2
 8006902:	4bac      	ldr	r3, [pc, #688]	; (8006bb4 <_printf_float+0x304>)
 8006904:	0030      	movs	r0, r6
 8006906:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006908:	f7fb fb00 	bl	8001f0c <__aeabi_dcmpun>
 800690c:	2800      	cmp	r0, #0
 800690e:	d130      	bne.n	8006972 <_printf_float+0xc2>
 8006910:	2201      	movs	r2, #1
 8006912:	4ba8      	ldr	r3, [pc, #672]	; (8006bb4 <_printf_float+0x304>)
 8006914:	4252      	negs	r2, r2
 8006916:	0030      	movs	r0, r6
 8006918:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800691a:	f7f9 fd9b 	bl	8000454 <__aeabi_dcmple>
 800691e:	2800      	cmp	r0, #0
 8006920:	d127      	bne.n	8006972 <_printf_float+0xc2>
 8006922:	2200      	movs	r2, #0
 8006924:	2300      	movs	r3, #0
 8006926:	0030      	movs	r0, r6
 8006928:	0029      	movs	r1, r5
 800692a:	f7f9 fd89 	bl	8000440 <__aeabi_dcmplt>
 800692e:	2800      	cmp	r0, #0
 8006930:	d003      	beq.n	800693a <_printf_float+0x8a>
 8006932:	0023      	movs	r3, r4
 8006934:	222d      	movs	r2, #45	; 0x2d
 8006936:	3343      	adds	r3, #67	; 0x43
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	4d9f      	ldr	r5, [pc, #636]	; (8006bb8 <_printf_float+0x308>)
 800693c:	2f47      	cmp	r7, #71	; 0x47
 800693e:	d800      	bhi.n	8006942 <_printf_float+0x92>
 8006940:	4d9e      	ldr	r5, [pc, #632]	; (8006bbc <_printf_float+0x30c>)
 8006942:	2303      	movs	r3, #3
 8006944:	2600      	movs	r6, #0
 8006946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006948:	6123      	str	r3, [r4, #16]
 800694a:	3301      	adds	r3, #1
 800694c:	439a      	bics	r2, r3
 800694e:	6022      	str	r2, [r4, #0]
 8006950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006952:	aa13      	add	r2, sp, #76	; 0x4c
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	0021      	movs	r1, r4
 8006958:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800695a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800695c:	f000 f9f4 	bl	8006d48 <_printf_common>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d000      	beq.n	8006966 <_printf_float+0xb6>
 8006964:	e093      	b.n	8006a8e <_printf_float+0x1de>
 8006966:	2001      	movs	r0, #1
 8006968:	4240      	negs	r0, r0
 800696a:	b015      	add	sp, #84	; 0x54
 800696c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800696e:	3307      	adds	r3, #7
 8006970:	e7b8      	b.n	80068e4 <_printf_float+0x34>
 8006972:	0032      	movs	r2, r6
 8006974:	002b      	movs	r3, r5
 8006976:	0030      	movs	r0, r6
 8006978:	0029      	movs	r1, r5
 800697a:	f7fb fac7 	bl	8001f0c <__aeabi_dcmpun>
 800697e:	2800      	cmp	r0, #0
 8006980:	d004      	beq.n	800698c <_printf_float+0xdc>
 8006982:	4d8f      	ldr	r5, [pc, #572]	; (8006bc0 <_printf_float+0x310>)
 8006984:	2f47      	cmp	r7, #71	; 0x47
 8006986:	d8dc      	bhi.n	8006942 <_printf_float+0x92>
 8006988:	4d8e      	ldr	r5, [pc, #568]	; (8006bc4 <_printf_float+0x314>)
 800698a:	e7da      	b.n	8006942 <_printf_float+0x92>
 800698c:	2380      	movs	r3, #128	; 0x80
 800698e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006990:	6862      	ldr	r2, [r4, #4]
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	430b      	orrs	r3, r1
 8006996:	1c51      	adds	r1, r2, #1
 8006998:	d143      	bne.n	8006a22 <_printf_float+0x172>
 800699a:	3207      	adds	r2, #7
 800699c:	6062      	str	r2, [r4, #4]
 800699e:	aa12      	add	r2, sp, #72	; 0x48
 80069a0:	2100      	movs	r1, #0
 80069a2:	9205      	str	r2, [sp, #20]
 80069a4:	aa11      	add	r2, sp, #68	; 0x44
 80069a6:	9203      	str	r2, [sp, #12]
 80069a8:	2223      	movs	r2, #35	; 0x23
 80069aa:	6023      	str	r3, [r4, #0]
 80069ac:	9106      	str	r1, [sp, #24]
 80069ae:	9301      	str	r3, [sp, #4]
 80069b0:	a908      	add	r1, sp, #32
 80069b2:	6863      	ldr	r3, [r4, #4]
 80069b4:	1852      	adds	r2, r2, r1
 80069b6:	9202      	str	r2, [sp, #8]
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	0032      	movs	r2, r6
 80069bc:	002b      	movs	r3, r5
 80069be:	9704      	str	r7, [sp, #16]
 80069c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069c2:	f7ff fed9 	bl	8006778 <__cvt>
 80069c6:	2320      	movs	r3, #32
 80069c8:	003a      	movs	r2, r7
 80069ca:	0005      	movs	r5, r0
 80069cc:	439a      	bics	r2, r3
 80069ce:	2a47      	cmp	r2, #71	; 0x47
 80069d0:	d107      	bne.n	80069e2 <_printf_float+0x132>
 80069d2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069d4:	1cda      	adds	r2, r3, #3
 80069d6:	db02      	blt.n	80069de <_printf_float+0x12e>
 80069d8:	6862      	ldr	r2, [r4, #4]
 80069da:	4293      	cmp	r3, r2
 80069dc:	dd45      	ble.n	8006a6a <_printf_float+0x1ba>
 80069de:	3f02      	subs	r7, #2
 80069e0:	b2ff      	uxtb	r7, r7
 80069e2:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069e4:	2f65      	cmp	r7, #101	; 0x65
 80069e6:	d825      	bhi.n	8006a34 <_printf_float+0x184>
 80069e8:	0020      	movs	r0, r4
 80069ea:	3901      	subs	r1, #1
 80069ec:	003a      	movs	r2, r7
 80069ee:	3050      	adds	r0, #80	; 0x50
 80069f0:	9111      	str	r1, [sp, #68]	; 0x44
 80069f2:	f7ff ff25 	bl	8006840 <__exponent>
 80069f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069f8:	0006      	movs	r6, r0
 80069fa:	1813      	adds	r3, r2, r0
 80069fc:	6123      	str	r3, [r4, #16]
 80069fe:	2a01      	cmp	r2, #1
 8006a00:	dc02      	bgt.n	8006a08 <_printf_float+0x158>
 8006a02:	6822      	ldr	r2, [r4, #0]
 8006a04:	07d2      	lsls	r2, r2, #31
 8006a06:	d501      	bpl.n	8006a0c <_printf_float+0x15c>
 8006a08:	3301      	adds	r3, #1
 8006a0a:	6123      	str	r3, [r4, #16]
 8006a0c:	2323      	movs	r3, #35	; 0x23
 8006a0e:	aa08      	add	r2, sp, #32
 8006a10:	189b      	adds	r3, r3, r2
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d09b      	beq.n	8006950 <_printf_float+0xa0>
 8006a18:	0023      	movs	r3, r4
 8006a1a:	222d      	movs	r2, #45	; 0x2d
 8006a1c:	3343      	adds	r3, #67	; 0x43
 8006a1e:	701a      	strb	r2, [r3, #0]
 8006a20:	e796      	b.n	8006950 <_printf_float+0xa0>
 8006a22:	2f67      	cmp	r7, #103	; 0x67
 8006a24:	d100      	bne.n	8006a28 <_printf_float+0x178>
 8006a26:	e176      	b.n	8006d16 <_printf_float+0x466>
 8006a28:	2f47      	cmp	r7, #71	; 0x47
 8006a2a:	d1b8      	bne.n	800699e <_printf_float+0xee>
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	d1b6      	bne.n	800699e <_printf_float+0xee>
 8006a30:	2201      	movs	r2, #1
 8006a32:	e7b3      	b.n	800699c <_printf_float+0xec>
 8006a34:	2f66      	cmp	r7, #102	; 0x66
 8006a36:	d119      	bne.n	8006a6c <_printf_float+0x1bc>
 8006a38:	6863      	ldr	r3, [r4, #4]
 8006a3a:	2900      	cmp	r1, #0
 8006a3c:	dd0c      	ble.n	8006a58 <_printf_float+0x1a8>
 8006a3e:	6121      	str	r1, [r4, #16]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <_printf_float+0x19a>
 8006a44:	6822      	ldr	r2, [r4, #0]
 8006a46:	07d2      	lsls	r2, r2, #31
 8006a48:	d502      	bpl.n	8006a50 <_printf_float+0x1a0>
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	185b      	adds	r3, r3, r1
 8006a4e:	6123      	str	r3, [r4, #16]
 8006a50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a52:	2600      	movs	r6, #0
 8006a54:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a56:	e7d9      	b.n	8006a0c <_printf_float+0x15c>
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d103      	bne.n	8006a64 <_printf_float+0x1b4>
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	6821      	ldr	r1, [r4, #0]
 8006a60:	4211      	tst	r1, r2
 8006a62:	d000      	beq.n	8006a66 <_printf_float+0x1b6>
 8006a64:	1c9a      	adds	r2, r3, #2
 8006a66:	6122      	str	r2, [r4, #16]
 8006a68:	e7f2      	b.n	8006a50 <_printf_float+0x1a0>
 8006a6a:	2767      	movs	r7, #103	; 0x67
 8006a6c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a70:	4293      	cmp	r3, r2
 8006a72:	db05      	blt.n	8006a80 <_printf_float+0x1d0>
 8006a74:	6822      	ldr	r2, [r4, #0]
 8006a76:	6123      	str	r3, [r4, #16]
 8006a78:	07d2      	lsls	r2, r2, #31
 8006a7a:	d5e9      	bpl.n	8006a50 <_printf_float+0x1a0>
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	e7e6      	b.n	8006a4e <_printf_float+0x19e>
 8006a80:	2101      	movs	r1, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	dc01      	bgt.n	8006a8a <_printf_float+0x1da>
 8006a86:	1849      	adds	r1, r1, r1
 8006a88:	1ac9      	subs	r1, r1, r3
 8006a8a:	1852      	adds	r2, r2, r1
 8006a8c:	e7eb      	b.n	8006a66 <_printf_float+0x1b6>
 8006a8e:	6822      	ldr	r2, [r4, #0]
 8006a90:	0553      	lsls	r3, r2, #21
 8006a92:	d408      	bmi.n	8006aa6 <_printf_float+0x1f6>
 8006a94:	6923      	ldr	r3, [r4, #16]
 8006a96:	002a      	movs	r2, r5
 8006a98:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a9c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006a9e:	47a8      	blx	r5
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	d129      	bne.n	8006af8 <_printf_float+0x248>
 8006aa4:	e75f      	b.n	8006966 <_printf_float+0xb6>
 8006aa6:	2f65      	cmp	r7, #101	; 0x65
 8006aa8:	d800      	bhi.n	8006aac <_printf_float+0x1fc>
 8006aaa:	e0e0      	b.n	8006c6e <_printf_float+0x3be>
 8006aac:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006aae:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f7f9 fcbe 	bl	8000434 <__aeabi_dcmpeq>
 8006ab8:	2800      	cmp	r0, #0
 8006aba:	d034      	beq.n	8006b26 <_printf_float+0x276>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4a42      	ldr	r2, [pc, #264]	; (8006bc8 <_printf_float+0x318>)
 8006ac0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ac2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ac4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ac6:	47a8      	blx	r5
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d100      	bne.n	8006ace <_printf_float+0x21e>
 8006acc:	e74b      	b.n	8006966 <_printf_float+0xb6>
 8006ace:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ad0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	db02      	blt.n	8006adc <_printf_float+0x22c>
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	07db      	lsls	r3, r3, #31
 8006ada:	d50d      	bpl.n	8006af8 <_printf_float+0x248>
 8006adc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ae2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ae6:	47a8      	blx	r5
 8006ae8:	2500      	movs	r5, #0
 8006aea:	1c43      	adds	r3, r0, #1
 8006aec:	d100      	bne.n	8006af0 <_printf_float+0x240>
 8006aee:	e73a      	b.n	8006966 <_printf_float+0xb6>
 8006af0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006af2:	3b01      	subs	r3, #1
 8006af4:	42ab      	cmp	r3, r5
 8006af6:	dc0a      	bgt.n	8006b0e <_printf_float+0x25e>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	079b      	lsls	r3, r3, #30
 8006afc:	d500      	bpl.n	8006b00 <_printf_float+0x250>
 8006afe:	e108      	b.n	8006d12 <_printf_float+0x462>
 8006b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b02:	68e0      	ldr	r0, [r4, #12]
 8006b04:	4298      	cmp	r0, r3
 8006b06:	db00      	blt.n	8006b0a <_printf_float+0x25a>
 8006b08:	e72f      	b.n	800696a <_printf_float+0xba>
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	e72d      	b.n	800696a <_printf_float+0xba>
 8006b0e:	0022      	movs	r2, r4
 8006b10:	2301      	movs	r3, #1
 8006b12:	321a      	adds	r2, #26
 8006b14:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b18:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b1a:	47b0      	blx	r6
 8006b1c:	1c43      	adds	r3, r0, #1
 8006b1e:	d100      	bne.n	8006b22 <_printf_float+0x272>
 8006b20:	e721      	b.n	8006966 <_printf_float+0xb6>
 8006b22:	3501      	adds	r5, #1
 8006b24:	e7e4      	b.n	8006af0 <_printf_float+0x240>
 8006b26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	dc2d      	bgt.n	8006b88 <_printf_float+0x2d8>
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	4a26      	ldr	r2, [pc, #152]	; (8006bc8 <_printf_float+0x318>)
 8006b30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b36:	47b0      	blx	r6
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d100      	bne.n	8006b3e <_printf_float+0x28e>
 8006b3c:	e713      	b.n	8006966 <_printf_float+0xb6>
 8006b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d105      	bne.n	8006b50 <_printf_float+0x2a0>
 8006b44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d102      	bne.n	8006b50 <_printf_float+0x2a0>
 8006b4a:	6823      	ldr	r3, [r4, #0]
 8006b4c:	07db      	lsls	r3, r3, #31
 8006b4e:	d5d3      	bpl.n	8006af8 <_printf_float+0x248>
 8006b50:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b56:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b5a:	47b0      	blx	r6
 8006b5c:	2600      	movs	r6, #0
 8006b5e:	1c43      	adds	r3, r0, #1
 8006b60:	d100      	bne.n	8006b64 <_printf_float+0x2b4>
 8006b62:	e700      	b.n	8006966 <_printf_float+0xb6>
 8006b64:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b66:	425b      	negs	r3, r3
 8006b68:	42b3      	cmp	r3, r6
 8006b6a:	dc01      	bgt.n	8006b70 <_printf_float+0x2c0>
 8006b6c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b6e:	e792      	b.n	8006a96 <_printf_float+0x1e6>
 8006b70:	0022      	movs	r2, r4
 8006b72:	2301      	movs	r3, #1
 8006b74:	321a      	adds	r2, #26
 8006b76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b7a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006b7c:	47b8      	blx	r7
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d100      	bne.n	8006b84 <_printf_float+0x2d4>
 8006b82:	e6f0      	b.n	8006966 <_printf_float+0xb6>
 8006b84:	3601      	adds	r6, #1
 8006b86:	e7ed      	b.n	8006b64 <_printf_float+0x2b4>
 8006b88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006b8a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006b8c:	429f      	cmp	r7, r3
 8006b8e:	dd00      	ble.n	8006b92 <_printf_float+0x2e2>
 8006b90:	001f      	movs	r7, r3
 8006b92:	2f00      	cmp	r7, #0
 8006b94:	dd08      	ble.n	8006ba8 <_printf_float+0x2f8>
 8006b96:	003b      	movs	r3, r7
 8006b98:	002a      	movs	r2, r5
 8006b9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b9e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006ba0:	47b0      	blx	r6
 8006ba2:	1c43      	adds	r3, r0, #1
 8006ba4:	d100      	bne.n	8006ba8 <_printf_float+0x2f8>
 8006ba6:	e6de      	b.n	8006966 <_printf_float+0xb6>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	930d      	str	r3, [sp, #52]	; 0x34
 8006bac:	43fb      	mvns	r3, r7
 8006bae:	17db      	asrs	r3, r3, #31
 8006bb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bb2:	e018      	b.n	8006be6 <_printf_float+0x336>
 8006bb4:	7fefffff 	.word	0x7fefffff
 8006bb8:	08009ea8 	.word	0x08009ea8
 8006bbc:	08009ea4 	.word	0x08009ea4
 8006bc0:	08009eb0 	.word	0x08009eb0
 8006bc4:	08009eac 	.word	0x08009eac
 8006bc8:	08009eb4 	.word	0x08009eb4
 8006bcc:	0022      	movs	r2, r4
 8006bce:	2301      	movs	r3, #1
 8006bd0:	321a      	adds	r2, #26
 8006bd2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006bd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bd6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006bd8:	47b0      	blx	r6
 8006bda:	1c43      	adds	r3, r0, #1
 8006bdc:	d100      	bne.n	8006be0 <_printf_float+0x330>
 8006bde:	e6c2      	b.n	8006966 <_printf_float+0xb6>
 8006be0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006be2:	3301      	adds	r3, #1
 8006be4:	930d      	str	r3, [sp, #52]	; 0x34
 8006be6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006be8:	6da6      	ldr	r6, [r4, #88]	; 0x58
 8006bea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bec:	403b      	ands	r3, r7
 8006bee:	1af3      	subs	r3, r6, r3
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	dceb      	bgt.n	8006bcc <_printf_float+0x31c>
 8006bf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bf8:	19ad      	adds	r5, r5, r6
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	db10      	blt.n	8006c20 <_printf_float+0x370>
 8006bfe:	6823      	ldr	r3, [r4, #0]
 8006c00:	07db      	lsls	r3, r3, #31
 8006c02:	d40d      	bmi.n	8006c20 <_printf_float+0x370>
 8006c04:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8006c06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c08:	1bbe      	subs	r6, r7, r6
 8006c0a:	1aff      	subs	r7, r7, r3
 8006c0c:	42b7      	cmp	r7, r6
 8006c0e:	dd00      	ble.n	8006c12 <_printf_float+0x362>
 8006c10:	0037      	movs	r7, r6
 8006c12:	2f00      	cmp	r7, #0
 8006c14:	dc0d      	bgt.n	8006c32 <_printf_float+0x382>
 8006c16:	43fe      	mvns	r6, r7
 8006c18:	17f3      	asrs	r3, r6, #31
 8006c1a:	2500      	movs	r5, #0
 8006c1c:	930c      	str	r3, [sp, #48]	; 0x30
 8006c1e:	e01c      	b.n	8006c5a <_printf_float+0x3aa>
 8006c20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c24:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c28:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006c2a:	47b8      	blx	r7
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	d1e9      	bne.n	8006c04 <_printf_float+0x354>
 8006c30:	e699      	b.n	8006966 <_printf_float+0xb6>
 8006c32:	003b      	movs	r3, r7
 8006c34:	002a      	movs	r2, r5
 8006c36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c3a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006c3c:	47a8      	blx	r5
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d1e9      	bne.n	8006c16 <_printf_float+0x366>
 8006c42:	e690      	b.n	8006966 <_printf_float+0xb6>
 8006c44:	0022      	movs	r2, r4
 8006c46:	2301      	movs	r3, #1
 8006c48:	321a      	adds	r2, #26
 8006c4a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c4e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006c50:	47b0      	blx	r6
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	d100      	bne.n	8006c58 <_printf_float+0x3a8>
 8006c56:	e686      	b.n	8006966 <_printf_float+0xb6>
 8006c58:	3501      	adds	r5, #1
 8006c5a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c5e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006c60:	1a9b      	subs	r3, r3, r2
 8006c62:	003a      	movs	r2, r7
 8006c64:	400a      	ands	r2, r1
 8006c66:	1a9b      	subs	r3, r3, r2
 8006c68:	42ab      	cmp	r3, r5
 8006c6a:	dceb      	bgt.n	8006c44 <_printf_float+0x394>
 8006c6c:	e744      	b.n	8006af8 <_printf_float+0x248>
 8006c6e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	dc02      	bgt.n	8006c7a <_printf_float+0x3ca>
 8006c74:	2301      	movs	r3, #1
 8006c76:	421a      	tst	r2, r3
 8006c78:	d032      	beq.n	8006ce0 <_printf_float+0x430>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	002a      	movs	r2, r5
 8006c7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c82:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006c84:	47b8      	blx	r7
 8006c86:	1c43      	adds	r3, r0, #1
 8006c88:	d100      	bne.n	8006c8c <_printf_float+0x3dc>
 8006c8a:	e66c      	b.n	8006966 <_printf_float+0xb6>
 8006c8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c90:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c92:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c94:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006c96:	3501      	adds	r5, #1
 8006c98:	47b8      	blx	r7
 8006c9a:	1c43      	adds	r3, r0, #1
 8006c9c:	d100      	bne.n	8006ca0 <_printf_float+0x3f0>
 8006c9e:	e662      	b.n	8006966 <_printf_float+0xb6>
 8006ca0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006ca2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006ca4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	1e5f      	subs	r7, r3, #1
 8006caa:	2300      	movs	r3, #0
 8006cac:	f7f9 fbc2 	bl	8000434 <__aeabi_dcmpeq>
 8006cb0:	003b      	movs	r3, r7
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d014      	beq.n	8006ce0 <_printf_float+0x430>
 8006cb6:	2500      	movs	r5, #0
 8006cb8:	e00a      	b.n	8006cd0 <_printf_float+0x420>
 8006cba:	0022      	movs	r2, r4
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	321a      	adds	r2, #26
 8006cc0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cc4:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8006cc6:	47b8      	blx	r7
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d100      	bne.n	8006cce <_printf_float+0x41e>
 8006ccc:	e64b      	b.n	8006966 <_printf_float+0xb6>
 8006cce:	3501      	adds	r5, #1
 8006cd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	42ab      	cmp	r3, r5
 8006cd6:	dcf0      	bgt.n	8006cba <_printf_float+0x40a>
 8006cd8:	0022      	movs	r2, r4
 8006cda:	0033      	movs	r3, r6
 8006cdc:	3250      	adds	r2, #80	; 0x50
 8006cde:	e6db      	b.n	8006a98 <_printf_float+0x1e8>
 8006ce0:	002a      	movs	r2, r5
 8006ce2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ce4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ce6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006ce8:	47a8      	blx	r5
 8006cea:	1c43      	adds	r3, r0, #1
 8006cec:	d1f4      	bne.n	8006cd8 <_printf_float+0x428>
 8006cee:	e63a      	b.n	8006966 <_printf_float+0xb6>
 8006cf0:	0022      	movs	r2, r4
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	3219      	adds	r2, #25
 8006cf6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006cf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cfa:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006cfc:	47b0      	blx	r6
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	d100      	bne.n	8006d04 <_printf_float+0x454>
 8006d02:	e630      	b.n	8006966 <_printf_float+0xb6>
 8006d04:	3501      	adds	r5, #1
 8006d06:	68e3      	ldr	r3, [r4, #12]
 8006d08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d0a:	1a9b      	subs	r3, r3, r2
 8006d0c:	42ab      	cmp	r3, r5
 8006d0e:	dcef      	bgt.n	8006cf0 <_printf_float+0x440>
 8006d10:	e6f6      	b.n	8006b00 <_printf_float+0x250>
 8006d12:	2500      	movs	r5, #0
 8006d14:	e7f7      	b.n	8006d06 <_printf_float+0x456>
 8006d16:	2a00      	cmp	r2, #0
 8006d18:	d100      	bne.n	8006d1c <_printf_float+0x46c>
 8006d1a:	e689      	b.n	8006a30 <_printf_float+0x180>
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	9106      	str	r1, [sp, #24]
 8006d20:	a912      	add	r1, sp, #72	; 0x48
 8006d22:	9105      	str	r1, [sp, #20]
 8006d24:	a911      	add	r1, sp, #68	; 0x44
 8006d26:	9103      	str	r1, [sp, #12]
 8006d28:	2123      	movs	r1, #35	; 0x23
 8006d2a:	a808      	add	r0, sp, #32
 8006d2c:	1809      	adds	r1, r1, r0
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	9200      	str	r2, [sp, #0]
 8006d34:	002b      	movs	r3, r5
 8006d36:	9704      	str	r7, [sp, #16]
 8006d38:	9102      	str	r1, [sp, #8]
 8006d3a:	0032      	movs	r2, r6
 8006d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d3e:	f7ff fd1b 	bl	8006778 <__cvt>
 8006d42:	0005      	movs	r5, r0
 8006d44:	e645      	b.n	80069d2 <_printf_float+0x122>
 8006d46:	46c0      	nop			; (mov r8, r8)

08006d48 <_printf_common>:
 8006d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d4a:	0015      	movs	r5, r2
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	688a      	ldr	r2, [r1, #8]
 8006d50:	690b      	ldr	r3, [r1, #16]
 8006d52:	9000      	str	r0, [sp, #0]
 8006d54:	000c      	movs	r4, r1
 8006d56:	4293      	cmp	r3, r2
 8006d58:	da00      	bge.n	8006d5c <_printf_common+0x14>
 8006d5a:	0013      	movs	r3, r2
 8006d5c:	0022      	movs	r2, r4
 8006d5e:	602b      	str	r3, [r5, #0]
 8006d60:	3243      	adds	r2, #67	; 0x43
 8006d62:	7812      	ldrb	r2, [r2, #0]
 8006d64:	2a00      	cmp	r2, #0
 8006d66:	d001      	beq.n	8006d6c <_printf_common+0x24>
 8006d68:	3301      	adds	r3, #1
 8006d6a:	602b      	str	r3, [r5, #0]
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	069b      	lsls	r3, r3, #26
 8006d70:	d502      	bpl.n	8006d78 <_printf_common+0x30>
 8006d72:	682b      	ldr	r3, [r5, #0]
 8006d74:	3302      	adds	r3, #2
 8006d76:	602b      	str	r3, [r5, #0]
 8006d78:	2706      	movs	r7, #6
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	401f      	ands	r7, r3
 8006d7e:	d027      	beq.n	8006dd0 <_printf_common+0x88>
 8006d80:	0023      	movs	r3, r4
 8006d82:	3343      	adds	r3, #67	; 0x43
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	1e5a      	subs	r2, r3, #1
 8006d88:	4193      	sbcs	r3, r2
 8006d8a:	6822      	ldr	r2, [r4, #0]
 8006d8c:	0692      	lsls	r2, r2, #26
 8006d8e:	d430      	bmi.n	8006df2 <_printf_common+0xaa>
 8006d90:	0022      	movs	r2, r4
 8006d92:	9901      	ldr	r1, [sp, #4]
 8006d94:	3243      	adds	r2, #67	; 0x43
 8006d96:	9800      	ldr	r0, [sp, #0]
 8006d98:	9e08      	ldr	r6, [sp, #32]
 8006d9a:	47b0      	blx	r6
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d025      	beq.n	8006dec <_printf_common+0xa4>
 8006da0:	2306      	movs	r3, #6
 8006da2:	6820      	ldr	r0, [r4, #0]
 8006da4:	682a      	ldr	r2, [r5, #0]
 8006da6:	68e1      	ldr	r1, [r4, #12]
 8006da8:	4003      	ands	r3, r0
 8006daa:	2500      	movs	r5, #0
 8006dac:	2b04      	cmp	r3, #4
 8006dae:	d103      	bne.n	8006db8 <_printf_common+0x70>
 8006db0:	1a8d      	subs	r5, r1, r2
 8006db2:	43eb      	mvns	r3, r5
 8006db4:	17db      	asrs	r3, r3, #31
 8006db6:	401d      	ands	r5, r3
 8006db8:	68a3      	ldr	r3, [r4, #8]
 8006dba:	6922      	ldr	r2, [r4, #16]
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	dd01      	ble.n	8006dc4 <_printf_common+0x7c>
 8006dc0:	1a9b      	subs	r3, r3, r2
 8006dc2:	18ed      	adds	r5, r5, r3
 8006dc4:	2700      	movs	r7, #0
 8006dc6:	42bd      	cmp	r5, r7
 8006dc8:	d120      	bne.n	8006e0c <_printf_common+0xc4>
 8006dca:	2000      	movs	r0, #0
 8006dcc:	e010      	b.n	8006df0 <_printf_common+0xa8>
 8006dce:	3701      	adds	r7, #1
 8006dd0:	68e3      	ldr	r3, [r4, #12]
 8006dd2:	682a      	ldr	r2, [r5, #0]
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	42bb      	cmp	r3, r7
 8006dd8:	ddd2      	ble.n	8006d80 <_printf_common+0x38>
 8006dda:	0022      	movs	r2, r4
 8006ddc:	2301      	movs	r3, #1
 8006dde:	3219      	adds	r2, #25
 8006de0:	9901      	ldr	r1, [sp, #4]
 8006de2:	9800      	ldr	r0, [sp, #0]
 8006de4:	9e08      	ldr	r6, [sp, #32]
 8006de6:	47b0      	blx	r6
 8006de8:	1c43      	adds	r3, r0, #1
 8006dea:	d1f0      	bne.n	8006dce <_printf_common+0x86>
 8006dec:	2001      	movs	r0, #1
 8006dee:	4240      	negs	r0, r0
 8006df0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006df2:	2030      	movs	r0, #48	; 0x30
 8006df4:	18e1      	adds	r1, r4, r3
 8006df6:	3143      	adds	r1, #67	; 0x43
 8006df8:	7008      	strb	r0, [r1, #0]
 8006dfa:	0021      	movs	r1, r4
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	3145      	adds	r1, #69	; 0x45
 8006e00:	7809      	ldrb	r1, [r1, #0]
 8006e02:	18a2      	adds	r2, r4, r2
 8006e04:	3243      	adds	r2, #67	; 0x43
 8006e06:	3302      	adds	r3, #2
 8006e08:	7011      	strb	r1, [r2, #0]
 8006e0a:	e7c1      	b.n	8006d90 <_printf_common+0x48>
 8006e0c:	0022      	movs	r2, r4
 8006e0e:	2301      	movs	r3, #1
 8006e10:	321a      	adds	r2, #26
 8006e12:	9901      	ldr	r1, [sp, #4]
 8006e14:	9800      	ldr	r0, [sp, #0]
 8006e16:	9e08      	ldr	r6, [sp, #32]
 8006e18:	47b0      	blx	r6
 8006e1a:	1c43      	adds	r3, r0, #1
 8006e1c:	d0e6      	beq.n	8006dec <_printf_common+0xa4>
 8006e1e:	3701      	adds	r7, #1
 8006e20:	e7d1      	b.n	8006dc6 <_printf_common+0x7e>
	...

08006e24 <_printf_i>:
 8006e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e26:	b089      	sub	sp, #36	; 0x24
 8006e28:	9204      	str	r2, [sp, #16]
 8006e2a:	000a      	movs	r2, r1
 8006e2c:	3243      	adds	r2, #67	; 0x43
 8006e2e:	9305      	str	r3, [sp, #20]
 8006e30:	9003      	str	r0, [sp, #12]
 8006e32:	9202      	str	r2, [sp, #8]
 8006e34:	7e0a      	ldrb	r2, [r1, #24]
 8006e36:	000c      	movs	r4, r1
 8006e38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e3a:	2a6e      	cmp	r2, #110	; 0x6e
 8006e3c:	d100      	bne.n	8006e40 <_printf_i+0x1c>
 8006e3e:	e086      	b.n	8006f4e <_printf_i+0x12a>
 8006e40:	d81f      	bhi.n	8006e82 <_printf_i+0x5e>
 8006e42:	2a63      	cmp	r2, #99	; 0x63
 8006e44:	d033      	beq.n	8006eae <_printf_i+0x8a>
 8006e46:	d808      	bhi.n	8006e5a <_printf_i+0x36>
 8006e48:	2a00      	cmp	r2, #0
 8006e4a:	d100      	bne.n	8006e4e <_printf_i+0x2a>
 8006e4c:	e08c      	b.n	8006f68 <_printf_i+0x144>
 8006e4e:	2a58      	cmp	r2, #88	; 0x58
 8006e50:	d04d      	beq.n	8006eee <_printf_i+0xca>
 8006e52:	0025      	movs	r5, r4
 8006e54:	3542      	adds	r5, #66	; 0x42
 8006e56:	702a      	strb	r2, [r5, #0]
 8006e58:	e030      	b.n	8006ebc <_printf_i+0x98>
 8006e5a:	2a64      	cmp	r2, #100	; 0x64
 8006e5c:	d001      	beq.n	8006e62 <_printf_i+0x3e>
 8006e5e:	2a69      	cmp	r2, #105	; 0x69
 8006e60:	d1f7      	bne.n	8006e52 <_printf_i+0x2e>
 8006e62:	6819      	ldr	r1, [r3, #0]
 8006e64:	6825      	ldr	r5, [r4, #0]
 8006e66:	1d0a      	adds	r2, r1, #4
 8006e68:	0628      	lsls	r0, r5, #24
 8006e6a:	d529      	bpl.n	8006ec0 <_printf_i+0x9c>
 8006e6c:	6808      	ldr	r0, [r1, #0]
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	2800      	cmp	r0, #0
 8006e72:	da03      	bge.n	8006e7c <_printf_i+0x58>
 8006e74:	232d      	movs	r3, #45	; 0x2d
 8006e76:	9a02      	ldr	r2, [sp, #8]
 8006e78:	4240      	negs	r0, r0
 8006e7a:	7013      	strb	r3, [r2, #0]
 8006e7c:	4e6b      	ldr	r6, [pc, #428]	; (800702c <_printf_i+0x208>)
 8006e7e:	270a      	movs	r7, #10
 8006e80:	e04f      	b.n	8006f22 <_printf_i+0xfe>
 8006e82:	2a73      	cmp	r2, #115	; 0x73
 8006e84:	d074      	beq.n	8006f70 <_printf_i+0x14c>
 8006e86:	d808      	bhi.n	8006e9a <_printf_i+0x76>
 8006e88:	2a6f      	cmp	r2, #111	; 0x6f
 8006e8a:	d01f      	beq.n	8006ecc <_printf_i+0xa8>
 8006e8c:	2a70      	cmp	r2, #112	; 0x70
 8006e8e:	d1e0      	bne.n	8006e52 <_printf_i+0x2e>
 8006e90:	2220      	movs	r2, #32
 8006e92:	6809      	ldr	r1, [r1, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	6022      	str	r2, [r4, #0]
 8006e98:	e003      	b.n	8006ea2 <_printf_i+0x7e>
 8006e9a:	2a75      	cmp	r2, #117	; 0x75
 8006e9c:	d016      	beq.n	8006ecc <_printf_i+0xa8>
 8006e9e:	2a78      	cmp	r2, #120	; 0x78
 8006ea0:	d1d7      	bne.n	8006e52 <_printf_i+0x2e>
 8006ea2:	0022      	movs	r2, r4
 8006ea4:	2178      	movs	r1, #120	; 0x78
 8006ea6:	3245      	adds	r2, #69	; 0x45
 8006ea8:	7011      	strb	r1, [r2, #0]
 8006eaa:	4e61      	ldr	r6, [pc, #388]	; (8007030 <_printf_i+0x20c>)
 8006eac:	e022      	b.n	8006ef4 <_printf_i+0xd0>
 8006eae:	0025      	movs	r5, r4
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	3542      	adds	r5, #66	; 0x42
 8006eb4:	1d11      	adds	r1, r2, #4
 8006eb6:	6019      	str	r1, [r3, #0]
 8006eb8:	6813      	ldr	r3, [r2, #0]
 8006eba:	702b      	strb	r3, [r5, #0]
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e065      	b.n	8006f8c <_printf_i+0x168>
 8006ec0:	6808      	ldr	r0, [r1, #0]
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	0669      	lsls	r1, r5, #25
 8006ec6:	d5d3      	bpl.n	8006e70 <_printf_i+0x4c>
 8006ec8:	b200      	sxth	r0, r0
 8006eca:	e7d1      	b.n	8006e70 <_printf_i+0x4c>
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	6825      	ldr	r5, [r4, #0]
 8006ed0:	1d08      	adds	r0, r1, #4
 8006ed2:	6018      	str	r0, [r3, #0]
 8006ed4:	6808      	ldr	r0, [r1, #0]
 8006ed6:	062e      	lsls	r6, r5, #24
 8006ed8:	d505      	bpl.n	8006ee6 <_printf_i+0xc2>
 8006eda:	4e54      	ldr	r6, [pc, #336]	; (800702c <_printf_i+0x208>)
 8006edc:	2708      	movs	r7, #8
 8006ede:	2a6f      	cmp	r2, #111	; 0x6f
 8006ee0:	d01b      	beq.n	8006f1a <_printf_i+0xf6>
 8006ee2:	270a      	movs	r7, #10
 8006ee4:	e019      	b.n	8006f1a <_printf_i+0xf6>
 8006ee6:	066d      	lsls	r5, r5, #25
 8006ee8:	d5f7      	bpl.n	8006eda <_printf_i+0xb6>
 8006eea:	b280      	uxth	r0, r0
 8006eec:	e7f5      	b.n	8006eda <_printf_i+0xb6>
 8006eee:	3145      	adds	r1, #69	; 0x45
 8006ef0:	4e4e      	ldr	r6, [pc, #312]	; (800702c <_printf_i+0x208>)
 8006ef2:	700a      	strb	r2, [r1, #0]
 8006ef4:	6818      	ldr	r0, [r3, #0]
 8006ef6:	6822      	ldr	r2, [r4, #0]
 8006ef8:	1d01      	adds	r1, r0, #4
 8006efa:	6800      	ldr	r0, [r0, #0]
 8006efc:	6019      	str	r1, [r3, #0]
 8006efe:	0615      	lsls	r5, r2, #24
 8006f00:	d521      	bpl.n	8006f46 <_printf_i+0x122>
 8006f02:	07d3      	lsls	r3, r2, #31
 8006f04:	d502      	bpl.n	8006f0c <_printf_i+0xe8>
 8006f06:	2320      	movs	r3, #32
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	6022      	str	r2, [r4, #0]
 8006f0c:	2710      	movs	r7, #16
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d103      	bne.n	8006f1a <_printf_i+0xf6>
 8006f12:	2320      	movs	r3, #32
 8006f14:	6822      	ldr	r2, [r4, #0]
 8006f16:	439a      	bics	r2, r3
 8006f18:	6022      	str	r2, [r4, #0]
 8006f1a:	0023      	movs	r3, r4
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	3343      	adds	r3, #67	; 0x43
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	6863      	ldr	r3, [r4, #4]
 8006f24:	60a3      	str	r3, [r4, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	db58      	blt.n	8006fdc <_printf_i+0x1b8>
 8006f2a:	2204      	movs	r2, #4
 8006f2c:	6821      	ldr	r1, [r4, #0]
 8006f2e:	4391      	bics	r1, r2
 8006f30:	6021      	str	r1, [r4, #0]
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d154      	bne.n	8006fe0 <_printf_i+0x1bc>
 8006f36:	9d02      	ldr	r5, [sp, #8]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d05a      	beq.n	8006ff2 <_printf_i+0x1ce>
 8006f3c:	0025      	movs	r5, r4
 8006f3e:	7833      	ldrb	r3, [r6, #0]
 8006f40:	3542      	adds	r5, #66	; 0x42
 8006f42:	702b      	strb	r3, [r5, #0]
 8006f44:	e055      	b.n	8006ff2 <_printf_i+0x1ce>
 8006f46:	0655      	lsls	r5, r2, #25
 8006f48:	d5db      	bpl.n	8006f02 <_printf_i+0xde>
 8006f4a:	b280      	uxth	r0, r0
 8006f4c:	e7d9      	b.n	8006f02 <_printf_i+0xde>
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	680d      	ldr	r5, [r1, #0]
 8006f52:	1d10      	adds	r0, r2, #4
 8006f54:	6949      	ldr	r1, [r1, #20]
 8006f56:	6018      	str	r0, [r3, #0]
 8006f58:	6813      	ldr	r3, [r2, #0]
 8006f5a:	062e      	lsls	r6, r5, #24
 8006f5c:	d501      	bpl.n	8006f62 <_printf_i+0x13e>
 8006f5e:	6019      	str	r1, [r3, #0]
 8006f60:	e002      	b.n	8006f68 <_printf_i+0x144>
 8006f62:	066d      	lsls	r5, r5, #25
 8006f64:	d5fb      	bpl.n	8006f5e <_printf_i+0x13a>
 8006f66:	8019      	strh	r1, [r3, #0]
 8006f68:	2300      	movs	r3, #0
 8006f6a:	9d02      	ldr	r5, [sp, #8]
 8006f6c:	6123      	str	r3, [r4, #16]
 8006f6e:	e04f      	b.n	8007010 <_printf_i+0x1ec>
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	1d11      	adds	r1, r2, #4
 8006f74:	6019      	str	r1, [r3, #0]
 8006f76:	6815      	ldr	r5, [r2, #0]
 8006f78:	2100      	movs	r1, #0
 8006f7a:	6862      	ldr	r2, [r4, #4]
 8006f7c:	0028      	movs	r0, r5
 8006f7e:	f000 fef5 	bl	8007d6c <memchr>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	d001      	beq.n	8006f8a <_printf_i+0x166>
 8006f86:	1b40      	subs	r0, r0, r5
 8006f88:	6060      	str	r0, [r4, #4]
 8006f8a:	6863      	ldr	r3, [r4, #4]
 8006f8c:	6123      	str	r3, [r4, #16]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	9a02      	ldr	r2, [sp, #8]
 8006f92:	7013      	strb	r3, [r2, #0]
 8006f94:	e03c      	b.n	8007010 <_printf_i+0x1ec>
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	002a      	movs	r2, r5
 8006f9a:	9904      	ldr	r1, [sp, #16]
 8006f9c:	9803      	ldr	r0, [sp, #12]
 8006f9e:	9d05      	ldr	r5, [sp, #20]
 8006fa0:	47a8      	blx	r5
 8006fa2:	1c43      	adds	r3, r0, #1
 8006fa4:	d03e      	beq.n	8007024 <_printf_i+0x200>
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	079b      	lsls	r3, r3, #30
 8006faa:	d415      	bmi.n	8006fd8 <_printf_i+0x1b4>
 8006fac:	9b07      	ldr	r3, [sp, #28]
 8006fae:	68e0      	ldr	r0, [r4, #12]
 8006fb0:	4298      	cmp	r0, r3
 8006fb2:	da39      	bge.n	8007028 <_printf_i+0x204>
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	e037      	b.n	8007028 <_printf_i+0x204>
 8006fb8:	0022      	movs	r2, r4
 8006fba:	2301      	movs	r3, #1
 8006fbc:	3219      	adds	r2, #25
 8006fbe:	9904      	ldr	r1, [sp, #16]
 8006fc0:	9803      	ldr	r0, [sp, #12]
 8006fc2:	9e05      	ldr	r6, [sp, #20]
 8006fc4:	47b0      	blx	r6
 8006fc6:	1c43      	adds	r3, r0, #1
 8006fc8:	d02c      	beq.n	8007024 <_printf_i+0x200>
 8006fca:	3501      	adds	r5, #1
 8006fcc:	68e3      	ldr	r3, [r4, #12]
 8006fce:	9a07      	ldr	r2, [sp, #28]
 8006fd0:	1a9b      	subs	r3, r3, r2
 8006fd2:	42ab      	cmp	r3, r5
 8006fd4:	dcf0      	bgt.n	8006fb8 <_printf_i+0x194>
 8006fd6:	e7e9      	b.n	8006fac <_printf_i+0x188>
 8006fd8:	2500      	movs	r5, #0
 8006fda:	e7f7      	b.n	8006fcc <_printf_i+0x1a8>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d0ad      	beq.n	8006f3c <_printf_i+0x118>
 8006fe0:	9d02      	ldr	r5, [sp, #8]
 8006fe2:	0039      	movs	r1, r7
 8006fe4:	f7f9 f926 	bl	8000234 <__aeabi_uidivmod>
 8006fe8:	5c73      	ldrb	r3, [r6, r1]
 8006fea:	3d01      	subs	r5, #1
 8006fec:	702b      	strb	r3, [r5, #0]
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d1f7      	bne.n	8006fe2 <_printf_i+0x1be>
 8006ff2:	2f08      	cmp	r7, #8
 8006ff4:	d109      	bne.n	800700a <_printf_i+0x1e6>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	07db      	lsls	r3, r3, #31
 8006ffa:	d506      	bpl.n	800700a <_printf_i+0x1e6>
 8006ffc:	6863      	ldr	r3, [r4, #4]
 8006ffe:	6922      	ldr	r2, [r4, #16]
 8007000:	4293      	cmp	r3, r2
 8007002:	dc02      	bgt.n	800700a <_printf_i+0x1e6>
 8007004:	2330      	movs	r3, #48	; 0x30
 8007006:	3d01      	subs	r5, #1
 8007008:	702b      	strb	r3, [r5, #0]
 800700a:	9b02      	ldr	r3, [sp, #8]
 800700c:	1b5b      	subs	r3, r3, r5
 800700e:	6123      	str	r3, [r4, #16]
 8007010:	9b05      	ldr	r3, [sp, #20]
 8007012:	aa07      	add	r2, sp, #28
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	0021      	movs	r1, r4
 8007018:	9b04      	ldr	r3, [sp, #16]
 800701a:	9803      	ldr	r0, [sp, #12]
 800701c:	f7ff fe94 	bl	8006d48 <_printf_common>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d1b8      	bne.n	8006f96 <_printf_i+0x172>
 8007024:	2001      	movs	r0, #1
 8007026:	4240      	negs	r0, r0
 8007028:	b009      	add	sp, #36	; 0x24
 800702a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702c:	08009eb6 	.word	0x08009eb6
 8007030:	08009ec7 	.word	0x08009ec7

08007034 <siprintf>:
 8007034:	b40e      	push	{r1, r2, r3}
 8007036:	b500      	push	{lr}
 8007038:	490b      	ldr	r1, [pc, #44]	; (8007068 <siprintf+0x34>)
 800703a:	b09c      	sub	sp, #112	; 0x70
 800703c:	ab1d      	add	r3, sp, #116	; 0x74
 800703e:	9002      	str	r0, [sp, #8]
 8007040:	9006      	str	r0, [sp, #24]
 8007042:	9107      	str	r1, [sp, #28]
 8007044:	9104      	str	r1, [sp, #16]
 8007046:	4809      	ldr	r0, [pc, #36]	; (800706c <siprintf+0x38>)
 8007048:	4909      	ldr	r1, [pc, #36]	; (8007070 <siprintf+0x3c>)
 800704a:	cb04      	ldmia	r3!, {r2}
 800704c:	9105      	str	r1, [sp, #20]
 800704e:	6800      	ldr	r0, [r0, #0]
 8007050:	a902      	add	r1, sp, #8
 8007052:	9301      	str	r3, [sp, #4]
 8007054:	f001 fa9c 	bl	8008590 <_svfiprintf_r>
 8007058:	2300      	movs	r3, #0
 800705a:	9a02      	ldr	r2, [sp, #8]
 800705c:	7013      	strb	r3, [r2, #0]
 800705e:	b01c      	add	sp, #112	; 0x70
 8007060:	bc08      	pop	{r3}
 8007062:	b003      	add	sp, #12
 8007064:	4718      	bx	r3
 8007066:	46c0      	nop			; (mov r8, r8)
 8007068:	7fffffff 	.word	0x7fffffff
 800706c:	2000001c 	.word	0x2000001c
 8007070:	ffff0208 	.word	0xffff0208

08007074 <quorem>:
 8007074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007076:	6903      	ldr	r3, [r0, #16]
 8007078:	690c      	ldr	r4, [r1, #16]
 800707a:	b089      	sub	sp, #36	; 0x24
 800707c:	0007      	movs	r7, r0
 800707e:	9105      	str	r1, [sp, #20]
 8007080:	2600      	movs	r6, #0
 8007082:	42a3      	cmp	r3, r4
 8007084:	db65      	blt.n	8007152 <quorem+0xde>
 8007086:	000b      	movs	r3, r1
 8007088:	3c01      	subs	r4, #1
 800708a:	3314      	adds	r3, #20
 800708c:	00a5      	lsls	r5, r4, #2
 800708e:	9303      	str	r3, [sp, #12]
 8007090:	195b      	adds	r3, r3, r5
 8007092:	9304      	str	r3, [sp, #16]
 8007094:	0003      	movs	r3, r0
 8007096:	3314      	adds	r3, #20
 8007098:	9302      	str	r3, [sp, #8]
 800709a:	195d      	adds	r5, r3, r5
 800709c:	9b04      	ldr	r3, [sp, #16]
 800709e:	6828      	ldr	r0, [r5, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	1c59      	adds	r1, r3, #1
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	f7f9 f83f 	bl	8000128 <__udivsi3>
 80070aa:	9001      	str	r0, [sp, #4]
 80070ac:	42b0      	cmp	r0, r6
 80070ae:	d029      	beq.n	8007104 <quorem+0x90>
 80070b0:	9b03      	ldr	r3, [sp, #12]
 80070b2:	9802      	ldr	r0, [sp, #8]
 80070b4:	469c      	mov	ip, r3
 80070b6:	9606      	str	r6, [sp, #24]
 80070b8:	4662      	mov	r2, ip
 80070ba:	ca08      	ldmia	r2!, {r3}
 80070bc:	4694      	mov	ip, r2
 80070be:	9a01      	ldr	r2, [sp, #4]
 80070c0:	b299      	uxth	r1, r3
 80070c2:	4351      	muls	r1, r2
 80070c4:	0c1b      	lsrs	r3, r3, #16
 80070c6:	4353      	muls	r3, r2
 80070c8:	1989      	adds	r1, r1, r6
 80070ca:	0c0a      	lsrs	r2, r1, #16
 80070cc:	189b      	adds	r3, r3, r2
 80070ce:	9307      	str	r3, [sp, #28]
 80070d0:	0c1e      	lsrs	r6, r3, #16
 80070d2:	6803      	ldr	r3, [r0, #0]
 80070d4:	b289      	uxth	r1, r1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	9b06      	ldr	r3, [sp, #24]
 80070da:	18d2      	adds	r2, r2, r3
 80070dc:	6803      	ldr	r3, [r0, #0]
 80070de:	1a52      	subs	r2, r2, r1
 80070e0:	0c19      	lsrs	r1, r3, #16
 80070e2:	466b      	mov	r3, sp
 80070e4:	8b9b      	ldrh	r3, [r3, #28]
 80070e6:	1acb      	subs	r3, r1, r3
 80070e8:	1411      	asrs	r1, r2, #16
 80070ea:	185b      	adds	r3, r3, r1
 80070ec:	1419      	asrs	r1, r3, #16
 80070ee:	b292      	uxth	r2, r2
 80070f0:	041b      	lsls	r3, r3, #16
 80070f2:	431a      	orrs	r2, r3
 80070f4:	9b04      	ldr	r3, [sp, #16]
 80070f6:	9106      	str	r1, [sp, #24]
 80070f8:	c004      	stmia	r0!, {r2}
 80070fa:	4563      	cmp	r3, ip
 80070fc:	d2dc      	bcs.n	80070b8 <quorem+0x44>
 80070fe:	682b      	ldr	r3, [r5, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d02d      	beq.n	8007160 <quorem+0xec>
 8007104:	9905      	ldr	r1, [sp, #20]
 8007106:	0038      	movs	r0, r7
 8007108:	f001 f858 	bl	80081bc <__mcmp>
 800710c:	2800      	cmp	r0, #0
 800710e:	db1f      	blt.n	8007150 <quorem+0xdc>
 8007110:	2500      	movs	r5, #0
 8007112:	9b01      	ldr	r3, [sp, #4]
 8007114:	9802      	ldr	r0, [sp, #8]
 8007116:	3301      	adds	r3, #1
 8007118:	9903      	ldr	r1, [sp, #12]
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	6802      	ldr	r2, [r0, #0]
 800711e:	c908      	ldmia	r1!, {r3}
 8007120:	b292      	uxth	r2, r2
 8007122:	1955      	adds	r5, r2, r5
 8007124:	b29a      	uxth	r2, r3
 8007126:	1aaa      	subs	r2, r5, r2
 8007128:	6805      	ldr	r5, [r0, #0]
 800712a:	0c1b      	lsrs	r3, r3, #16
 800712c:	0c2d      	lsrs	r5, r5, #16
 800712e:	1aeb      	subs	r3, r5, r3
 8007130:	1415      	asrs	r5, r2, #16
 8007132:	195b      	adds	r3, r3, r5
 8007134:	141d      	asrs	r5, r3, #16
 8007136:	b292      	uxth	r2, r2
 8007138:	041b      	lsls	r3, r3, #16
 800713a:	4313      	orrs	r3, r2
 800713c:	c008      	stmia	r0!, {r3}
 800713e:	9b04      	ldr	r3, [sp, #16]
 8007140:	428b      	cmp	r3, r1
 8007142:	d2eb      	bcs.n	800711c <quorem+0xa8>
 8007144:	9a02      	ldr	r2, [sp, #8]
 8007146:	00a3      	lsls	r3, r4, #2
 8007148:	18d3      	adds	r3, r2, r3
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	2a00      	cmp	r2, #0
 800714e:	d011      	beq.n	8007174 <quorem+0x100>
 8007150:	9e01      	ldr	r6, [sp, #4]
 8007152:	0030      	movs	r0, r6
 8007154:	b009      	add	sp, #36	; 0x24
 8007156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007158:	682b      	ldr	r3, [r5, #0]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d104      	bne.n	8007168 <quorem+0xf4>
 800715e:	3c01      	subs	r4, #1
 8007160:	9b02      	ldr	r3, [sp, #8]
 8007162:	3d04      	subs	r5, #4
 8007164:	42ab      	cmp	r3, r5
 8007166:	d3f7      	bcc.n	8007158 <quorem+0xe4>
 8007168:	613c      	str	r4, [r7, #16]
 800716a:	e7cb      	b.n	8007104 <quorem+0x90>
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	2a00      	cmp	r2, #0
 8007170:	d104      	bne.n	800717c <quorem+0x108>
 8007172:	3c01      	subs	r4, #1
 8007174:	9a02      	ldr	r2, [sp, #8]
 8007176:	3b04      	subs	r3, #4
 8007178:	429a      	cmp	r2, r3
 800717a:	d3f7      	bcc.n	800716c <quorem+0xf8>
 800717c:	613c      	str	r4, [r7, #16]
 800717e:	e7e7      	b.n	8007150 <quorem+0xdc>

08007180 <_dtoa_r>:
 8007180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007182:	0016      	movs	r6, r2
 8007184:	001f      	movs	r7, r3
 8007186:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007188:	b09b      	sub	sp, #108	; 0x6c
 800718a:	9002      	str	r0, [sp, #8]
 800718c:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800718e:	9606      	str	r6, [sp, #24]
 8007190:	9707      	str	r7, [sp, #28]
 8007192:	2c00      	cmp	r4, #0
 8007194:	d108      	bne.n	80071a8 <_dtoa_r+0x28>
 8007196:	2010      	movs	r0, #16
 8007198:	f000 fdde 	bl	8007d58 <malloc>
 800719c:	9b02      	ldr	r3, [sp, #8]
 800719e:	6258      	str	r0, [r3, #36]	; 0x24
 80071a0:	6044      	str	r4, [r0, #4]
 80071a2:	6084      	str	r4, [r0, #8]
 80071a4:	6004      	str	r4, [r0, #0]
 80071a6:	60c4      	str	r4, [r0, #12]
 80071a8:	9b02      	ldr	r3, [sp, #8]
 80071aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ac:	6819      	ldr	r1, [r3, #0]
 80071ae:	2900      	cmp	r1, #0
 80071b0:	d00b      	beq.n	80071ca <_dtoa_r+0x4a>
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	2301      	movs	r3, #1
 80071b6:	4093      	lsls	r3, r2
 80071b8:	604a      	str	r2, [r1, #4]
 80071ba:	608b      	str	r3, [r1, #8]
 80071bc:	9802      	ldr	r0, [sp, #8]
 80071be:	f000 fe21 	bl	8007e04 <_Bfree>
 80071c2:	2200      	movs	r2, #0
 80071c4:	9b02      	ldr	r3, [sp, #8]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	601a      	str	r2, [r3, #0]
 80071ca:	2f00      	cmp	r7, #0
 80071cc:	da20      	bge.n	8007210 <_dtoa_r+0x90>
 80071ce:	2301      	movs	r3, #1
 80071d0:	602b      	str	r3, [r5, #0]
 80071d2:	007b      	lsls	r3, r7, #1
 80071d4:	085b      	lsrs	r3, r3, #1
 80071d6:	9307      	str	r3, [sp, #28]
 80071d8:	9c07      	ldr	r4, [sp, #28]
 80071da:	4bb2      	ldr	r3, [pc, #712]	; (80074a4 <_dtoa_r+0x324>)
 80071dc:	0022      	movs	r2, r4
 80071de:	9317      	str	r3, [sp, #92]	; 0x5c
 80071e0:	401a      	ands	r2, r3
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d117      	bne.n	8007216 <_dtoa_r+0x96>
 80071e6:	4bb0      	ldr	r3, [pc, #704]	; (80074a8 <_dtoa_r+0x328>)
 80071e8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	9b06      	ldr	r3, [sp, #24]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d103      	bne.n	80071fa <_dtoa_r+0x7a>
 80071f2:	0324      	lsls	r4, r4, #12
 80071f4:	d101      	bne.n	80071fa <_dtoa_r+0x7a>
 80071f6:	f000 fd87 	bl	8007d08 <_dtoa_r+0xb88>
 80071fa:	4bac      	ldr	r3, [pc, #688]	; (80074ac <_dtoa_r+0x32c>)
 80071fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80071fe:	9308      	str	r3, [sp, #32]
 8007200:	2a00      	cmp	r2, #0
 8007202:	d002      	beq.n	800720a <_dtoa_r+0x8a>
 8007204:	4baa      	ldr	r3, [pc, #680]	; (80074b0 <_dtoa_r+0x330>)
 8007206:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007208:	6013      	str	r3, [r2, #0]
 800720a:	9808      	ldr	r0, [sp, #32]
 800720c:	b01b      	add	sp, #108	; 0x6c
 800720e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007210:	2300      	movs	r3, #0
 8007212:	602b      	str	r3, [r5, #0]
 8007214:	e7e0      	b.n	80071d8 <_dtoa_r+0x58>
 8007216:	9e06      	ldr	r6, [sp, #24]
 8007218:	9f07      	ldr	r7, [sp, #28]
 800721a:	2200      	movs	r2, #0
 800721c:	2300      	movs	r3, #0
 800721e:	0030      	movs	r0, r6
 8007220:	0039      	movs	r1, r7
 8007222:	f7f9 f907 	bl	8000434 <__aeabi_dcmpeq>
 8007226:	1e05      	subs	r5, r0, #0
 8007228:	d00b      	beq.n	8007242 <_dtoa_r+0xc2>
 800722a:	2301      	movs	r3, #1
 800722c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	4ba0      	ldr	r3, [pc, #640]	; (80074b4 <_dtoa_r+0x334>)
 8007232:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007234:	9308      	str	r3, [sp, #32]
 8007236:	2a00      	cmp	r2, #0
 8007238:	d0e7      	beq.n	800720a <_dtoa_r+0x8a>
 800723a:	4a9f      	ldr	r2, [pc, #636]	; (80074b8 <_dtoa_r+0x338>)
 800723c:	9924      	ldr	r1, [sp, #144]	; 0x90
 800723e:	600a      	str	r2, [r1, #0]
 8007240:	e7e3      	b.n	800720a <_dtoa_r+0x8a>
 8007242:	ab18      	add	r3, sp, #96	; 0x60
 8007244:	9301      	str	r3, [sp, #4]
 8007246:	ab19      	add	r3, sp, #100	; 0x64
 8007248:	9300      	str	r3, [sp, #0]
 800724a:	0032      	movs	r2, r6
 800724c:	003b      	movs	r3, r7
 800724e:	9802      	ldr	r0, [sp, #8]
 8007250:	f001 f832 	bl	80082b8 <__d2b>
 8007254:	0063      	lsls	r3, r4, #1
 8007256:	9003      	str	r0, [sp, #12]
 8007258:	0d5b      	lsrs	r3, r3, #21
 800725a:	d074      	beq.n	8007346 <_dtoa_r+0x1c6>
 800725c:	033a      	lsls	r2, r7, #12
 800725e:	4c97      	ldr	r4, [pc, #604]	; (80074bc <_dtoa_r+0x33c>)
 8007260:	0b12      	lsrs	r2, r2, #12
 8007262:	4314      	orrs	r4, r2
 8007264:	0021      	movs	r1, r4
 8007266:	4a96      	ldr	r2, [pc, #600]	; (80074c0 <_dtoa_r+0x340>)
 8007268:	0030      	movs	r0, r6
 800726a:	9516      	str	r5, [sp, #88]	; 0x58
 800726c:	189e      	adds	r6, r3, r2
 800726e:	2200      	movs	r2, #0
 8007270:	4b94      	ldr	r3, [pc, #592]	; (80074c4 <_dtoa_r+0x344>)
 8007272:	f7fa fb03 	bl	800187c <__aeabi_dsub>
 8007276:	4a94      	ldr	r2, [pc, #592]	; (80074c8 <_dtoa_r+0x348>)
 8007278:	4b94      	ldr	r3, [pc, #592]	; (80074cc <_dtoa_r+0x34c>)
 800727a:	f7fa f88d 	bl	8001398 <__aeabi_dmul>
 800727e:	4a94      	ldr	r2, [pc, #592]	; (80074d0 <_dtoa_r+0x350>)
 8007280:	4b94      	ldr	r3, [pc, #592]	; (80074d4 <_dtoa_r+0x354>)
 8007282:	f7f9 f963 	bl	800054c <__aeabi_dadd>
 8007286:	0004      	movs	r4, r0
 8007288:	0030      	movs	r0, r6
 800728a:	000d      	movs	r5, r1
 800728c:	f7fa fe90 	bl	8001fb0 <__aeabi_i2d>
 8007290:	4a91      	ldr	r2, [pc, #580]	; (80074d8 <_dtoa_r+0x358>)
 8007292:	4b92      	ldr	r3, [pc, #584]	; (80074dc <_dtoa_r+0x35c>)
 8007294:	f7fa f880 	bl	8001398 <__aeabi_dmul>
 8007298:	0002      	movs	r2, r0
 800729a:	000b      	movs	r3, r1
 800729c:	0020      	movs	r0, r4
 800729e:	0029      	movs	r1, r5
 80072a0:	f7f9 f954 	bl	800054c <__aeabi_dadd>
 80072a4:	0004      	movs	r4, r0
 80072a6:	000d      	movs	r5, r1
 80072a8:	f7fa fe4c 	bl	8001f44 <__aeabi_d2iz>
 80072ac:	2200      	movs	r2, #0
 80072ae:	0007      	movs	r7, r0
 80072b0:	2300      	movs	r3, #0
 80072b2:	0020      	movs	r0, r4
 80072b4:	0029      	movs	r1, r5
 80072b6:	f7f9 f8c3 	bl	8000440 <__aeabi_dcmplt>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d009      	beq.n	80072d2 <_dtoa_r+0x152>
 80072be:	0038      	movs	r0, r7
 80072c0:	f7fa fe76 	bl	8001fb0 <__aeabi_i2d>
 80072c4:	002b      	movs	r3, r5
 80072c6:	0022      	movs	r2, r4
 80072c8:	f7f9 f8b4 	bl	8000434 <__aeabi_dcmpeq>
 80072cc:	4243      	negs	r3, r0
 80072ce:	4158      	adcs	r0, r3
 80072d0:	1a3f      	subs	r7, r7, r0
 80072d2:	2301      	movs	r3, #1
 80072d4:	9314      	str	r3, [sp, #80]	; 0x50
 80072d6:	2f16      	cmp	r7, #22
 80072d8:	d80d      	bhi.n	80072f6 <_dtoa_r+0x176>
 80072da:	4981      	ldr	r1, [pc, #516]	; (80074e0 <_dtoa_r+0x360>)
 80072dc:	00fb      	lsls	r3, r7, #3
 80072de:	18c9      	adds	r1, r1, r3
 80072e0:	6808      	ldr	r0, [r1, #0]
 80072e2:	6849      	ldr	r1, [r1, #4]
 80072e4:	9a06      	ldr	r2, [sp, #24]
 80072e6:	9b07      	ldr	r3, [sp, #28]
 80072e8:	f7f9 f8be 	bl	8000468 <__aeabi_dcmpgt>
 80072ec:	2800      	cmp	r0, #0
 80072ee:	d046      	beq.n	800737e <_dtoa_r+0x1fe>
 80072f0:	2300      	movs	r3, #0
 80072f2:	3f01      	subs	r7, #1
 80072f4:	9314      	str	r3, [sp, #80]	; 0x50
 80072f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80072f8:	1b9e      	subs	r6, r3, r6
 80072fa:	2300      	movs	r3, #0
 80072fc:	930a      	str	r3, [sp, #40]	; 0x28
 80072fe:	0033      	movs	r3, r6
 8007300:	3b01      	subs	r3, #1
 8007302:	930b      	str	r3, [sp, #44]	; 0x2c
 8007304:	d504      	bpl.n	8007310 <_dtoa_r+0x190>
 8007306:	2301      	movs	r3, #1
 8007308:	1b9b      	subs	r3, r3, r6
 800730a:	930a      	str	r3, [sp, #40]	; 0x28
 800730c:	2300      	movs	r3, #0
 800730e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007310:	2f00      	cmp	r7, #0
 8007312:	db36      	blt.n	8007382 <_dtoa_r+0x202>
 8007314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007316:	9711      	str	r7, [sp, #68]	; 0x44
 8007318:	19db      	adds	r3, r3, r7
 800731a:	930b      	str	r3, [sp, #44]	; 0x2c
 800731c:	2300      	movs	r3, #0
 800731e:	9304      	str	r3, [sp, #16]
 8007320:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007322:	2401      	movs	r4, #1
 8007324:	2b09      	cmp	r3, #9
 8007326:	d900      	bls.n	800732a <_dtoa_r+0x1aa>
 8007328:	e084      	b.n	8007434 <_dtoa_r+0x2b4>
 800732a:	2b05      	cmp	r3, #5
 800732c:	dd02      	ble.n	8007334 <_dtoa_r+0x1b4>
 800732e:	2400      	movs	r4, #0
 8007330:	3b04      	subs	r3, #4
 8007332:	9320      	str	r3, [sp, #128]	; 0x80
 8007334:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007336:	1e98      	subs	r0, r3, #2
 8007338:	2803      	cmp	r0, #3
 800733a:	d900      	bls.n	800733e <_dtoa_r+0x1be>
 800733c:	e084      	b.n	8007448 <_dtoa_r+0x2c8>
 800733e:	f7f8 fee9 	bl	8000114 <__gnu_thumb1_case_uqi>
 8007342:	7775      	.short	0x7775
 8007344:	6a28      	.short	0x6a28
 8007346:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007348:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800734a:	189e      	adds	r6, r3, r2
 800734c:	4b65      	ldr	r3, [pc, #404]	; (80074e4 <_dtoa_r+0x364>)
 800734e:	18f2      	adds	r2, r6, r3
 8007350:	2a20      	cmp	r2, #32
 8007352:	dd0f      	ble.n	8007374 <_dtoa_r+0x1f4>
 8007354:	2340      	movs	r3, #64	; 0x40
 8007356:	1a9b      	subs	r3, r3, r2
 8007358:	409c      	lsls	r4, r3
 800735a:	4b63      	ldr	r3, [pc, #396]	; (80074e8 <_dtoa_r+0x368>)
 800735c:	9806      	ldr	r0, [sp, #24]
 800735e:	18f3      	adds	r3, r6, r3
 8007360:	40d8      	lsrs	r0, r3
 8007362:	4320      	orrs	r0, r4
 8007364:	f7fa fe5e 	bl	8002024 <__aeabi_ui2d>
 8007368:	2301      	movs	r3, #1
 800736a:	4c60      	ldr	r4, [pc, #384]	; (80074ec <_dtoa_r+0x36c>)
 800736c:	3e01      	subs	r6, #1
 800736e:	1909      	adds	r1, r1, r4
 8007370:	9316      	str	r3, [sp, #88]	; 0x58
 8007372:	e77c      	b.n	800726e <_dtoa_r+0xee>
 8007374:	2320      	movs	r3, #32
 8007376:	9806      	ldr	r0, [sp, #24]
 8007378:	1a9b      	subs	r3, r3, r2
 800737a:	4098      	lsls	r0, r3
 800737c:	e7f2      	b.n	8007364 <_dtoa_r+0x1e4>
 800737e:	9014      	str	r0, [sp, #80]	; 0x50
 8007380:	e7b9      	b.n	80072f6 <_dtoa_r+0x176>
 8007382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007384:	1bdb      	subs	r3, r3, r7
 8007386:	930a      	str	r3, [sp, #40]	; 0x28
 8007388:	427b      	negs	r3, r7
 800738a:	9304      	str	r3, [sp, #16]
 800738c:	2300      	movs	r3, #0
 800738e:	9311      	str	r3, [sp, #68]	; 0x44
 8007390:	e7c6      	b.n	8007320 <_dtoa_r+0x1a0>
 8007392:	2301      	movs	r3, #1
 8007394:	930d      	str	r3, [sp, #52]	; 0x34
 8007396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007398:	2b00      	cmp	r3, #0
 800739a:	dd59      	ble.n	8007450 <_dtoa_r+0x2d0>
 800739c:	930c      	str	r3, [sp, #48]	; 0x30
 800739e:	9309      	str	r3, [sp, #36]	; 0x24
 80073a0:	9a02      	ldr	r2, [sp, #8]
 80073a2:	6a55      	ldr	r5, [r2, #36]	; 0x24
 80073a4:	2200      	movs	r2, #0
 80073a6:	606a      	str	r2, [r5, #4]
 80073a8:	3204      	adds	r2, #4
 80073aa:	0010      	movs	r0, r2
 80073ac:	3014      	adds	r0, #20
 80073ae:	6869      	ldr	r1, [r5, #4]
 80073b0:	4298      	cmp	r0, r3
 80073b2:	d952      	bls.n	800745a <_dtoa_r+0x2da>
 80073b4:	9802      	ldr	r0, [sp, #8]
 80073b6:	f000 fced 	bl	8007d94 <_Balloc>
 80073ba:	9b02      	ldr	r3, [sp, #8]
 80073bc:	6028      	str	r0, [r5, #0]
 80073be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	9308      	str	r3, [sp, #32]
 80073c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c6:	2b0e      	cmp	r3, #14
 80073c8:	d900      	bls.n	80073cc <_dtoa_r+0x24c>
 80073ca:	e10a      	b.n	80075e2 <_dtoa_r+0x462>
 80073cc:	2c00      	cmp	r4, #0
 80073ce:	d100      	bne.n	80073d2 <_dtoa_r+0x252>
 80073d0:	e107      	b.n	80075e2 <_dtoa_r+0x462>
 80073d2:	9b06      	ldr	r3, [sp, #24]
 80073d4:	9c07      	ldr	r4, [sp, #28]
 80073d6:	9312      	str	r3, [sp, #72]	; 0x48
 80073d8:	9413      	str	r4, [sp, #76]	; 0x4c
 80073da:	2f00      	cmp	r7, #0
 80073dc:	dc00      	bgt.n	80073e0 <_dtoa_r+0x260>
 80073de:	e089      	b.n	80074f4 <_dtoa_r+0x374>
 80073e0:	210f      	movs	r1, #15
 80073e2:	003a      	movs	r2, r7
 80073e4:	4b3e      	ldr	r3, [pc, #248]	; (80074e0 <_dtoa_r+0x360>)
 80073e6:	400a      	ands	r2, r1
 80073e8:	00d2      	lsls	r2, r2, #3
 80073ea:	189b      	adds	r3, r3, r2
 80073ec:	681d      	ldr	r5, [r3, #0]
 80073ee:	685e      	ldr	r6, [r3, #4]
 80073f0:	2302      	movs	r3, #2
 80073f2:	113c      	asrs	r4, r7, #4
 80073f4:	930e      	str	r3, [sp, #56]	; 0x38
 80073f6:	06e3      	lsls	r3, r4, #27
 80073f8:	d50b      	bpl.n	8007412 <_dtoa_r+0x292>
 80073fa:	4b3d      	ldr	r3, [pc, #244]	; (80074f0 <_dtoa_r+0x370>)
 80073fc:	400c      	ands	r4, r1
 80073fe:	6a1a      	ldr	r2, [r3, #32]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007404:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007406:	f7f9 fbbd 	bl	8000b84 <__aeabi_ddiv>
 800740a:	2303      	movs	r3, #3
 800740c:	9006      	str	r0, [sp, #24]
 800740e:	9107      	str	r1, [sp, #28]
 8007410:	930e      	str	r3, [sp, #56]	; 0x38
 8007412:	2300      	movs	r3, #0
 8007414:	e03a      	b.n	800748c <_dtoa_r+0x30c>
 8007416:	2301      	movs	r3, #1
 8007418:	930d      	str	r3, [sp, #52]	; 0x34
 800741a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800741c:	18fb      	adds	r3, r7, r3
 800741e:	930c      	str	r3, [sp, #48]	; 0x30
 8007420:	3301      	adds	r3, #1
 8007422:	9309      	str	r3, [sp, #36]	; 0x24
 8007424:	2b00      	cmp	r3, #0
 8007426:	dcbb      	bgt.n	80073a0 <_dtoa_r+0x220>
 8007428:	2301      	movs	r3, #1
 800742a:	e7b9      	b.n	80073a0 <_dtoa_r+0x220>
 800742c:	2300      	movs	r3, #0
 800742e:	e7b1      	b.n	8007394 <_dtoa_r+0x214>
 8007430:	2300      	movs	r3, #0
 8007432:	e7f1      	b.n	8007418 <_dtoa_r+0x298>
 8007434:	2300      	movs	r3, #0
 8007436:	940d      	str	r4, [sp, #52]	; 0x34
 8007438:	9320      	str	r3, [sp, #128]	; 0x80
 800743a:	3b01      	subs	r3, #1
 800743c:	2200      	movs	r2, #0
 800743e:	930c      	str	r3, [sp, #48]	; 0x30
 8007440:	9309      	str	r3, [sp, #36]	; 0x24
 8007442:	3313      	adds	r3, #19
 8007444:	9221      	str	r2, [sp, #132]	; 0x84
 8007446:	e7ab      	b.n	80073a0 <_dtoa_r+0x220>
 8007448:	2301      	movs	r3, #1
 800744a:	930d      	str	r3, [sp, #52]	; 0x34
 800744c:	3b02      	subs	r3, #2
 800744e:	e7f5      	b.n	800743c <_dtoa_r+0x2bc>
 8007450:	2301      	movs	r3, #1
 8007452:	930c      	str	r3, [sp, #48]	; 0x30
 8007454:	9309      	str	r3, [sp, #36]	; 0x24
 8007456:	001a      	movs	r2, r3
 8007458:	e7f4      	b.n	8007444 <_dtoa_r+0x2c4>
 800745a:	3101      	adds	r1, #1
 800745c:	6069      	str	r1, [r5, #4]
 800745e:	0052      	lsls	r2, r2, #1
 8007460:	e7a3      	b.n	80073aa <_dtoa_r+0x22a>
 8007462:	2301      	movs	r3, #1
 8007464:	421c      	tst	r4, r3
 8007466:	d00e      	beq.n	8007486 <_dtoa_r+0x306>
 8007468:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800746a:	4a21      	ldr	r2, [pc, #132]	; (80074f0 <_dtoa_r+0x370>)
 800746c:	3301      	adds	r3, #1
 800746e:	930e      	str	r3, [sp, #56]	; 0x38
 8007470:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007472:	0028      	movs	r0, r5
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	189b      	adds	r3, r3, r2
 8007478:	0031      	movs	r1, r6
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f7f9 ff8b 	bl	8001398 <__aeabi_dmul>
 8007482:	0005      	movs	r5, r0
 8007484:	000e      	movs	r6, r1
 8007486:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007488:	1064      	asrs	r4, r4, #1
 800748a:	3301      	adds	r3, #1
 800748c:	9310      	str	r3, [sp, #64]	; 0x40
 800748e:	2c00      	cmp	r4, #0
 8007490:	d1e7      	bne.n	8007462 <_dtoa_r+0x2e2>
 8007492:	9806      	ldr	r0, [sp, #24]
 8007494:	9907      	ldr	r1, [sp, #28]
 8007496:	002a      	movs	r2, r5
 8007498:	0033      	movs	r3, r6
 800749a:	f7f9 fb73 	bl	8000b84 <__aeabi_ddiv>
 800749e:	9006      	str	r0, [sp, #24]
 80074a0:	9107      	str	r1, [sp, #28]
 80074a2:	e042      	b.n	800752a <_dtoa_r+0x3aa>
 80074a4:	7ff00000 	.word	0x7ff00000
 80074a8:	0000270f 	.word	0x0000270f
 80074ac:	08009ee1 	.word	0x08009ee1
 80074b0:	08009ee4 	.word	0x08009ee4
 80074b4:	08009eb4 	.word	0x08009eb4
 80074b8:	08009eb5 	.word	0x08009eb5
 80074bc:	3ff00000 	.word	0x3ff00000
 80074c0:	fffffc01 	.word	0xfffffc01
 80074c4:	3ff80000 	.word	0x3ff80000
 80074c8:	636f4361 	.word	0x636f4361
 80074cc:	3fd287a7 	.word	0x3fd287a7
 80074d0:	8b60c8b3 	.word	0x8b60c8b3
 80074d4:	3fc68a28 	.word	0x3fc68a28
 80074d8:	509f79fb 	.word	0x509f79fb
 80074dc:	3fd34413 	.word	0x3fd34413
 80074e0:	08009f10 	.word	0x08009f10
 80074e4:	00000432 	.word	0x00000432
 80074e8:	00000412 	.word	0x00000412
 80074ec:	fe100000 	.word	0xfe100000
 80074f0:	08009ee8 	.word	0x08009ee8
 80074f4:	2302      	movs	r3, #2
 80074f6:	930e      	str	r3, [sp, #56]	; 0x38
 80074f8:	2f00      	cmp	r7, #0
 80074fa:	d016      	beq.n	800752a <_dtoa_r+0x3aa>
 80074fc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80074fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007500:	427c      	negs	r4, r7
 8007502:	330d      	adds	r3, #13
 8007504:	4023      	ands	r3, r4
 8007506:	4ace      	ldr	r2, [pc, #824]	; (8007840 <_dtoa_r+0x6c0>)
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	18d3      	adds	r3, r2, r3
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f7f9 ff42 	bl	8001398 <__aeabi_dmul>
 8007514:	2300      	movs	r3, #0
 8007516:	2601      	movs	r6, #1
 8007518:	001d      	movs	r5, r3
 800751a:	9006      	str	r0, [sp, #24]
 800751c:	9107      	str	r1, [sp, #28]
 800751e:	1124      	asrs	r4, r4, #4
 8007520:	2c00      	cmp	r4, #0
 8007522:	d000      	beq.n	8007526 <_dtoa_r+0x3a6>
 8007524:	e08c      	b.n	8007640 <_dtoa_r+0x4c0>
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1b9      	bne.n	800749e <_dtoa_r+0x31e>
 800752a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800752c:	2b00      	cmp	r3, #0
 800752e:	d100      	bne.n	8007532 <_dtoa_r+0x3b2>
 8007530:	e096      	b.n	8007660 <_dtoa_r+0x4e0>
 8007532:	9c06      	ldr	r4, [sp, #24]
 8007534:	9d07      	ldr	r5, [sp, #28]
 8007536:	2200      	movs	r2, #0
 8007538:	4bc2      	ldr	r3, [pc, #776]	; (8007844 <_dtoa_r+0x6c4>)
 800753a:	0020      	movs	r0, r4
 800753c:	0029      	movs	r1, r5
 800753e:	f7f8 ff7f 	bl	8000440 <__aeabi_dcmplt>
 8007542:	2800      	cmp	r0, #0
 8007544:	d100      	bne.n	8007548 <_dtoa_r+0x3c8>
 8007546:	e08b      	b.n	8007660 <_dtoa_r+0x4e0>
 8007548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d100      	bne.n	8007550 <_dtoa_r+0x3d0>
 800754e:	e087      	b.n	8007660 <_dtoa_r+0x4e0>
 8007550:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007552:	2b00      	cmp	r3, #0
 8007554:	dd41      	ble.n	80075da <_dtoa_r+0x45a>
 8007556:	4bbc      	ldr	r3, [pc, #752]	; (8007848 <_dtoa_r+0x6c8>)
 8007558:	2200      	movs	r2, #0
 800755a:	0020      	movs	r0, r4
 800755c:	0029      	movs	r1, r5
 800755e:	f7f9 ff1b 	bl	8001398 <__aeabi_dmul>
 8007562:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007564:	9006      	str	r0, [sp, #24]
 8007566:	9107      	str	r1, [sp, #28]
 8007568:	3301      	adds	r3, #1
 800756a:	930e      	str	r3, [sp, #56]	; 0x38
 800756c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800756e:	1e7e      	subs	r6, r7, #1
 8007570:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007572:	9310      	str	r3, [sp, #64]	; 0x40
 8007574:	f7fa fd1c 	bl	8001fb0 <__aeabi_i2d>
 8007578:	9a06      	ldr	r2, [sp, #24]
 800757a:	9b07      	ldr	r3, [sp, #28]
 800757c:	f7f9 ff0c 	bl	8001398 <__aeabi_dmul>
 8007580:	2200      	movs	r2, #0
 8007582:	4bb2      	ldr	r3, [pc, #712]	; (800784c <_dtoa_r+0x6cc>)
 8007584:	f7f8 ffe2 	bl	800054c <__aeabi_dadd>
 8007588:	4ab1      	ldr	r2, [pc, #708]	; (8007850 <_dtoa_r+0x6d0>)
 800758a:	900e      	str	r0, [sp, #56]	; 0x38
 800758c:	910f      	str	r1, [sp, #60]	; 0x3c
 800758e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007590:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007592:	4694      	mov	ip, r2
 8007594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007596:	4463      	add	r3, ip
 8007598:	9315      	str	r3, [sp, #84]	; 0x54
 800759a:	001d      	movs	r5, r3
 800759c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d161      	bne.n	8007666 <_dtoa_r+0x4e6>
 80075a2:	9806      	ldr	r0, [sp, #24]
 80075a4:	9907      	ldr	r1, [sp, #28]
 80075a6:	2200      	movs	r2, #0
 80075a8:	4baa      	ldr	r3, [pc, #680]	; (8007854 <_dtoa_r+0x6d4>)
 80075aa:	f7fa f967 	bl	800187c <__aeabi_dsub>
 80075ae:	0022      	movs	r2, r4
 80075b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80075b2:	9006      	str	r0, [sp, #24]
 80075b4:	9107      	str	r1, [sp, #28]
 80075b6:	f7f8 ff57 	bl	8000468 <__aeabi_dcmpgt>
 80075ba:	2800      	cmp	r0, #0
 80075bc:	d000      	beq.n	80075c0 <_dtoa_r+0x440>
 80075be:	e2a8      	b.n	8007b12 <_dtoa_r+0x992>
 80075c0:	48a5      	ldr	r0, [pc, #660]	; (8007858 <_dtoa_r+0x6d8>)
 80075c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80075c4:	4684      	mov	ip, r0
 80075c6:	4461      	add	r1, ip
 80075c8:	000b      	movs	r3, r1
 80075ca:	9806      	ldr	r0, [sp, #24]
 80075cc:	9907      	ldr	r1, [sp, #28]
 80075ce:	0022      	movs	r2, r4
 80075d0:	f7f8 ff36 	bl	8000440 <__aeabi_dcmplt>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d000      	beq.n	80075da <_dtoa_r+0x45a>
 80075d8:	e295      	b.n	8007b06 <_dtoa_r+0x986>
 80075da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80075dc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80075de:	9306      	str	r3, [sp, #24]
 80075e0:	9407      	str	r4, [sp, #28]
 80075e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	da00      	bge.n	80075ea <_dtoa_r+0x46a>
 80075e8:	e15c      	b.n	80078a4 <_dtoa_r+0x724>
 80075ea:	2f0e      	cmp	r7, #14
 80075ec:	dd00      	ble.n	80075f0 <_dtoa_r+0x470>
 80075ee:	e159      	b.n	80078a4 <_dtoa_r+0x724>
 80075f0:	4b93      	ldr	r3, [pc, #588]	; (8007840 <_dtoa_r+0x6c0>)
 80075f2:	00fa      	lsls	r2, r7, #3
 80075f4:	189b      	adds	r3, r3, r2
 80075f6:	685c      	ldr	r4, [r3, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	9304      	str	r3, [sp, #16]
 80075fc:	9405      	str	r4, [sp, #20]
 80075fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007600:	2b00      	cmp	r3, #0
 8007602:	db00      	blt.n	8007606 <_dtoa_r+0x486>
 8007604:	e0d8      	b.n	80077b8 <_dtoa_r+0x638>
 8007606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007608:	2b00      	cmp	r3, #0
 800760a:	dd00      	ble.n	800760e <_dtoa_r+0x48e>
 800760c:	e0d4      	b.n	80077b8 <_dtoa_r+0x638>
 800760e:	d000      	beq.n	8007612 <_dtoa_r+0x492>
 8007610:	e27d      	b.n	8007b0e <_dtoa_r+0x98e>
 8007612:	9804      	ldr	r0, [sp, #16]
 8007614:	9905      	ldr	r1, [sp, #20]
 8007616:	2200      	movs	r2, #0
 8007618:	4b8e      	ldr	r3, [pc, #568]	; (8007854 <_dtoa_r+0x6d4>)
 800761a:	f7f9 febd 	bl	8001398 <__aeabi_dmul>
 800761e:	9a06      	ldr	r2, [sp, #24]
 8007620:	9b07      	ldr	r3, [sp, #28]
 8007622:	f7f8 ff2b 	bl	800047c <__aeabi_dcmpge>
 8007626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	001e      	movs	r6, r3
 800762c:	2800      	cmp	r0, #0
 800762e:	d000      	beq.n	8007632 <_dtoa_r+0x4b2>
 8007630:	e24f      	b.n	8007ad2 <_dtoa_r+0x952>
 8007632:	9b08      	ldr	r3, [sp, #32]
 8007634:	9a08      	ldr	r2, [sp, #32]
 8007636:	1c5d      	adds	r5, r3, #1
 8007638:	2331      	movs	r3, #49	; 0x31
 800763a:	3701      	adds	r7, #1
 800763c:	7013      	strb	r3, [r2, #0]
 800763e:	e24b      	b.n	8007ad8 <_dtoa_r+0x958>
 8007640:	4234      	tst	r4, r6
 8007642:	d00a      	beq.n	800765a <_dtoa_r+0x4da>
 8007644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007646:	4a85      	ldr	r2, [pc, #532]	; (800785c <_dtoa_r+0x6dc>)
 8007648:	3301      	adds	r3, #1
 800764a:	930e      	str	r3, [sp, #56]	; 0x38
 800764c:	00eb      	lsls	r3, r5, #3
 800764e:	189b      	adds	r3, r3, r2
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	f7f9 fea0 	bl	8001398 <__aeabi_dmul>
 8007658:	0033      	movs	r3, r6
 800765a:	1064      	asrs	r4, r4, #1
 800765c:	3501      	adds	r5, #1
 800765e:	e75f      	b.n	8007520 <_dtoa_r+0x3a0>
 8007660:	003e      	movs	r6, r7
 8007662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007664:	e784      	b.n	8007570 <_dtoa_r+0x3f0>
 8007666:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007668:	990d      	ldr	r1, [sp, #52]	; 0x34
 800766a:	1e5a      	subs	r2, r3, #1
 800766c:	4b74      	ldr	r3, [pc, #464]	; (8007840 <_dtoa_r+0x6c0>)
 800766e:	00d2      	lsls	r2, r2, #3
 8007670:	189b      	adds	r3, r3, r2
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2900      	cmp	r1, #0
 8007678:	d049      	beq.n	800770e <_dtoa_r+0x58e>
 800767a:	2000      	movs	r0, #0
 800767c:	4978      	ldr	r1, [pc, #480]	; (8007860 <_dtoa_r+0x6e0>)
 800767e:	f7f9 fa81 	bl	8000b84 <__aeabi_ddiv>
 8007682:	002b      	movs	r3, r5
 8007684:	0022      	movs	r2, r4
 8007686:	f7fa f8f9 	bl	800187c <__aeabi_dsub>
 800768a:	9b08      	ldr	r3, [sp, #32]
 800768c:	900e      	str	r0, [sp, #56]	; 0x38
 800768e:	910f      	str	r1, [sp, #60]	; 0x3c
 8007690:	9315      	str	r3, [sp, #84]	; 0x54
 8007692:	9806      	ldr	r0, [sp, #24]
 8007694:	9907      	ldr	r1, [sp, #28]
 8007696:	f7fa fc55 	bl	8001f44 <__aeabi_d2iz>
 800769a:	0004      	movs	r4, r0
 800769c:	f7fa fc88 	bl	8001fb0 <__aeabi_i2d>
 80076a0:	0002      	movs	r2, r0
 80076a2:	000b      	movs	r3, r1
 80076a4:	9806      	ldr	r0, [sp, #24]
 80076a6:	9907      	ldr	r1, [sp, #28]
 80076a8:	f7fa f8e8 	bl	800187c <__aeabi_dsub>
 80076ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80076ae:	3430      	adds	r4, #48	; 0x30
 80076b0:	1c5d      	adds	r5, r3, #1
 80076b2:	701c      	strb	r4, [r3, #0]
 80076b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076b8:	9006      	str	r0, [sp, #24]
 80076ba:	9107      	str	r1, [sp, #28]
 80076bc:	f7f8 fec0 	bl	8000440 <__aeabi_dcmplt>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d16c      	bne.n	800779e <_dtoa_r+0x61e>
 80076c4:	9a06      	ldr	r2, [sp, #24]
 80076c6:	9b07      	ldr	r3, [sp, #28]
 80076c8:	2000      	movs	r0, #0
 80076ca:	495e      	ldr	r1, [pc, #376]	; (8007844 <_dtoa_r+0x6c4>)
 80076cc:	f7fa f8d6 	bl	800187c <__aeabi_dsub>
 80076d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076d4:	f7f8 feb4 	bl	8000440 <__aeabi_dcmplt>
 80076d8:	2800      	cmp	r0, #0
 80076da:	d000      	beq.n	80076de <_dtoa_r+0x55e>
 80076dc:	e0c3      	b.n	8007866 <_dtoa_r+0x6e6>
 80076de:	9b08      	ldr	r3, [sp, #32]
 80076e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076e2:	1aeb      	subs	r3, r5, r3
 80076e4:	429a      	cmp	r2, r3
 80076e6:	dc00      	bgt.n	80076ea <_dtoa_r+0x56a>
 80076e8:	e777      	b.n	80075da <_dtoa_r+0x45a>
 80076ea:	980e      	ldr	r0, [sp, #56]	; 0x38
 80076ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80076ee:	2200      	movs	r2, #0
 80076f0:	4b55      	ldr	r3, [pc, #340]	; (8007848 <_dtoa_r+0x6c8>)
 80076f2:	f7f9 fe51 	bl	8001398 <__aeabi_dmul>
 80076f6:	2200      	movs	r2, #0
 80076f8:	900e      	str	r0, [sp, #56]	; 0x38
 80076fa:	910f      	str	r1, [sp, #60]	; 0x3c
 80076fc:	9806      	ldr	r0, [sp, #24]
 80076fe:	9907      	ldr	r1, [sp, #28]
 8007700:	4b51      	ldr	r3, [pc, #324]	; (8007848 <_dtoa_r+0x6c8>)
 8007702:	f7f9 fe49 	bl	8001398 <__aeabi_dmul>
 8007706:	9515      	str	r5, [sp, #84]	; 0x54
 8007708:	9006      	str	r0, [sp, #24]
 800770a:	9107      	str	r1, [sp, #28]
 800770c:	e7c1      	b.n	8007692 <_dtoa_r+0x512>
 800770e:	0020      	movs	r0, r4
 8007710:	0029      	movs	r1, r5
 8007712:	f7f9 fe41 	bl	8001398 <__aeabi_dmul>
 8007716:	9c08      	ldr	r4, [sp, #32]
 8007718:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800771a:	0023      	movs	r3, r4
 800771c:	4694      	mov	ip, r2
 800771e:	900e      	str	r0, [sp, #56]	; 0x38
 8007720:	910f      	str	r1, [sp, #60]	; 0x3c
 8007722:	4463      	add	r3, ip
 8007724:	9315      	str	r3, [sp, #84]	; 0x54
 8007726:	9806      	ldr	r0, [sp, #24]
 8007728:	9907      	ldr	r1, [sp, #28]
 800772a:	f7fa fc0b 	bl	8001f44 <__aeabi_d2iz>
 800772e:	0005      	movs	r5, r0
 8007730:	f7fa fc3e 	bl	8001fb0 <__aeabi_i2d>
 8007734:	000b      	movs	r3, r1
 8007736:	0002      	movs	r2, r0
 8007738:	9806      	ldr	r0, [sp, #24]
 800773a:	9907      	ldr	r1, [sp, #28]
 800773c:	f7fa f89e 	bl	800187c <__aeabi_dsub>
 8007740:	3530      	adds	r5, #48	; 0x30
 8007742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007744:	7025      	strb	r5, [r4, #0]
 8007746:	3401      	adds	r4, #1
 8007748:	9006      	str	r0, [sp, #24]
 800774a:	9107      	str	r1, [sp, #28]
 800774c:	42a3      	cmp	r3, r4
 800774e:	d12a      	bne.n	80077a6 <_dtoa_r+0x626>
 8007750:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007752:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007754:	9a08      	ldr	r2, [sp, #32]
 8007756:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007758:	4694      	mov	ip, r2
 800775a:	4463      	add	r3, ip
 800775c:	2200      	movs	r2, #0
 800775e:	001d      	movs	r5, r3
 8007760:	4b3f      	ldr	r3, [pc, #252]	; (8007860 <_dtoa_r+0x6e0>)
 8007762:	f7f8 fef3 	bl	800054c <__aeabi_dadd>
 8007766:	0002      	movs	r2, r0
 8007768:	000b      	movs	r3, r1
 800776a:	9806      	ldr	r0, [sp, #24]
 800776c:	9907      	ldr	r1, [sp, #28]
 800776e:	f7f8 fe7b 	bl	8000468 <__aeabi_dcmpgt>
 8007772:	2800      	cmp	r0, #0
 8007774:	d000      	beq.n	8007778 <_dtoa_r+0x5f8>
 8007776:	e076      	b.n	8007866 <_dtoa_r+0x6e6>
 8007778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800777a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800777c:	2000      	movs	r0, #0
 800777e:	4938      	ldr	r1, [pc, #224]	; (8007860 <_dtoa_r+0x6e0>)
 8007780:	f7fa f87c 	bl	800187c <__aeabi_dsub>
 8007784:	0002      	movs	r2, r0
 8007786:	000b      	movs	r3, r1
 8007788:	9806      	ldr	r0, [sp, #24]
 800778a:	9907      	ldr	r1, [sp, #28]
 800778c:	f7f8 fe58 	bl	8000440 <__aeabi_dcmplt>
 8007790:	2800      	cmp	r0, #0
 8007792:	d100      	bne.n	8007796 <_dtoa_r+0x616>
 8007794:	e721      	b.n	80075da <_dtoa_r+0x45a>
 8007796:	1e6b      	subs	r3, r5, #1
 8007798:	781a      	ldrb	r2, [r3, #0]
 800779a:	2a30      	cmp	r2, #48	; 0x30
 800779c:	d001      	beq.n	80077a2 <_dtoa_r+0x622>
 800779e:	0037      	movs	r7, r6
 80077a0:	e03f      	b.n	8007822 <_dtoa_r+0x6a2>
 80077a2:	001d      	movs	r5, r3
 80077a4:	e7f7      	b.n	8007796 <_dtoa_r+0x616>
 80077a6:	9806      	ldr	r0, [sp, #24]
 80077a8:	9907      	ldr	r1, [sp, #28]
 80077aa:	2200      	movs	r2, #0
 80077ac:	4b26      	ldr	r3, [pc, #152]	; (8007848 <_dtoa_r+0x6c8>)
 80077ae:	f7f9 fdf3 	bl	8001398 <__aeabi_dmul>
 80077b2:	9006      	str	r0, [sp, #24]
 80077b4:	9107      	str	r1, [sp, #28]
 80077b6:	e7b6      	b.n	8007726 <_dtoa_r+0x5a6>
 80077b8:	9e08      	ldr	r6, [sp, #32]
 80077ba:	9a04      	ldr	r2, [sp, #16]
 80077bc:	9b05      	ldr	r3, [sp, #20]
 80077be:	9806      	ldr	r0, [sp, #24]
 80077c0:	9907      	ldr	r1, [sp, #28]
 80077c2:	f7f9 f9df 	bl	8000b84 <__aeabi_ddiv>
 80077c6:	f7fa fbbd 	bl	8001f44 <__aeabi_d2iz>
 80077ca:	0004      	movs	r4, r0
 80077cc:	f7fa fbf0 	bl	8001fb0 <__aeabi_i2d>
 80077d0:	9a04      	ldr	r2, [sp, #16]
 80077d2:	9b05      	ldr	r3, [sp, #20]
 80077d4:	f7f9 fde0 	bl	8001398 <__aeabi_dmul>
 80077d8:	0002      	movs	r2, r0
 80077da:	000b      	movs	r3, r1
 80077dc:	9806      	ldr	r0, [sp, #24]
 80077de:	9907      	ldr	r1, [sp, #28]
 80077e0:	f7fa f84c 	bl	800187c <__aeabi_dsub>
 80077e4:	0023      	movs	r3, r4
 80077e6:	3330      	adds	r3, #48	; 0x30
 80077e8:	7033      	strb	r3, [r6, #0]
 80077ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077ec:	9b08      	ldr	r3, [sp, #32]
 80077ee:	1c75      	adds	r5, r6, #1
 80077f0:	1aeb      	subs	r3, r5, r3
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d148      	bne.n	8007888 <_dtoa_r+0x708>
 80077f6:	0002      	movs	r2, r0
 80077f8:	000b      	movs	r3, r1
 80077fa:	f7f8 fea7 	bl	800054c <__aeabi_dadd>
 80077fe:	9a04      	ldr	r2, [sp, #16]
 8007800:	9b05      	ldr	r3, [sp, #20]
 8007802:	9006      	str	r0, [sp, #24]
 8007804:	9107      	str	r1, [sp, #28]
 8007806:	f7f8 fe2f 	bl	8000468 <__aeabi_dcmpgt>
 800780a:	2800      	cmp	r0, #0
 800780c:	d12a      	bne.n	8007864 <_dtoa_r+0x6e4>
 800780e:	9a04      	ldr	r2, [sp, #16]
 8007810:	9b05      	ldr	r3, [sp, #20]
 8007812:	9806      	ldr	r0, [sp, #24]
 8007814:	9907      	ldr	r1, [sp, #28]
 8007816:	f7f8 fe0d 	bl	8000434 <__aeabi_dcmpeq>
 800781a:	2800      	cmp	r0, #0
 800781c:	d001      	beq.n	8007822 <_dtoa_r+0x6a2>
 800781e:	07e3      	lsls	r3, r4, #31
 8007820:	d420      	bmi.n	8007864 <_dtoa_r+0x6e4>
 8007822:	9903      	ldr	r1, [sp, #12]
 8007824:	9802      	ldr	r0, [sp, #8]
 8007826:	f000 faed 	bl	8007e04 <_Bfree>
 800782a:	2300      	movs	r3, #0
 800782c:	702b      	strb	r3, [r5, #0]
 800782e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007830:	3701      	adds	r7, #1
 8007832:	601f      	str	r7, [r3, #0]
 8007834:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007836:	2b00      	cmp	r3, #0
 8007838:	d100      	bne.n	800783c <_dtoa_r+0x6bc>
 800783a:	e4e6      	b.n	800720a <_dtoa_r+0x8a>
 800783c:	601d      	str	r5, [r3, #0]
 800783e:	e4e4      	b.n	800720a <_dtoa_r+0x8a>
 8007840:	08009f10 	.word	0x08009f10
 8007844:	3ff00000 	.word	0x3ff00000
 8007848:	40240000 	.word	0x40240000
 800784c:	401c0000 	.word	0x401c0000
 8007850:	fcc00000 	.word	0xfcc00000
 8007854:	40140000 	.word	0x40140000
 8007858:	7cc00000 	.word	0x7cc00000
 800785c:	08009ee8 	.word	0x08009ee8
 8007860:	3fe00000 	.word	0x3fe00000
 8007864:	003e      	movs	r6, r7
 8007866:	1e6b      	subs	r3, r5, #1
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	2a39      	cmp	r2, #57	; 0x39
 800786c:	d106      	bne.n	800787c <_dtoa_r+0x6fc>
 800786e:	9a08      	ldr	r2, [sp, #32]
 8007870:	429a      	cmp	r2, r3
 8007872:	d107      	bne.n	8007884 <_dtoa_r+0x704>
 8007874:	2330      	movs	r3, #48	; 0x30
 8007876:	7013      	strb	r3, [r2, #0]
 8007878:	0013      	movs	r3, r2
 800787a:	3601      	adds	r6, #1
 800787c:	781a      	ldrb	r2, [r3, #0]
 800787e:	3201      	adds	r2, #1
 8007880:	701a      	strb	r2, [r3, #0]
 8007882:	e78c      	b.n	800779e <_dtoa_r+0x61e>
 8007884:	001d      	movs	r5, r3
 8007886:	e7ee      	b.n	8007866 <_dtoa_r+0x6e6>
 8007888:	2200      	movs	r2, #0
 800788a:	4ba4      	ldr	r3, [pc, #656]	; (8007b1c <_dtoa_r+0x99c>)
 800788c:	f7f9 fd84 	bl	8001398 <__aeabi_dmul>
 8007890:	2200      	movs	r2, #0
 8007892:	2300      	movs	r3, #0
 8007894:	9006      	str	r0, [sp, #24]
 8007896:	9107      	str	r1, [sp, #28]
 8007898:	002e      	movs	r6, r5
 800789a:	f7f8 fdcb 	bl	8000434 <__aeabi_dcmpeq>
 800789e:	2800      	cmp	r0, #0
 80078a0:	d08b      	beq.n	80077ba <_dtoa_r+0x63a>
 80078a2:	e7be      	b.n	8007822 <_dtoa_r+0x6a2>
 80078a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078a6:	2a00      	cmp	r2, #0
 80078a8:	d100      	bne.n	80078ac <_dtoa_r+0x72c>
 80078aa:	e0da      	b.n	8007a62 <_dtoa_r+0x8e2>
 80078ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80078ae:	2a01      	cmp	r2, #1
 80078b0:	dd00      	ble.n	80078b4 <_dtoa_r+0x734>
 80078b2:	e0bd      	b.n	8007a30 <_dtoa_r+0x8b0>
 80078b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80078b6:	2a00      	cmp	r2, #0
 80078b8:	d100      	bne.n	80078bc <_dtoa_r+0x73c>
 80078ba:	e0b5      	b.n	8007a28 <_dtoa_r+0x8a8>
 80078bc:	4a98      	ldr	r2, [pc, #608]	; (8007b20 <_dtoa_r+0x9a0>)
 80078be:	189b      	adds	r3, r3, r2
 80078c0:	9d04      	ldr	r5, [sp, #16]
 80078c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078c6:	2101      	movs	r1, #1
 80078c8:	18d2      	adds	r2, r2, r3
 80078ca:	920a      	str	r2, [sp, #40]	; 0x28
 80078cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078ce:	9802      	ldr	r0, [sp, #8]
 80078d0:	18d3      	adds	r3, r2, r3
 80078d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078d4:	f000 fb36 	bl	8007f44 <__i2b>
 80078d8:	0006      	movs	r6, r0
 80078da:	2c00      	cmp	r4, #0
 80078dc:	dd0e      	ble.n	80078fc <_dtoa_r+0x77c>
 80078de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	dd0b      	ble.n	80078fc <_dtoa_r+0x77c>
 80078e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078e6:	0023      	movs	r3, r4
 80078e8:	4294      	cmp	r4, r2
 80078ea:	dd00      	ble.n	80078ee <_dtoa_r+0x76e>
 80078ec:	0013      	movs	r3, r2
 80078ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078f0:	1ae4      	subs	r4, r4, r3
 80078f2:	1ad2      	subs	r2, r2, r3
 80078f4:	920a      	str	r2, [sp, #40]	; 0x28
 80078f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80078fc:	9b04      	ldr	r3, [sp, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01f      	beq.n	8007942 <_dtoa_r+0x7c2>
 8007902:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007904:	2b00      	cmp	r3, #0
 8007906:	d100      	bne.n	800790a <_dtoa_r+0x78a>
 8007908:	e0af      	b.n	8007a6a <_dtoa_r+0x8ea>
 800790a:	2d00      	cmp	r5, #0
 800790c:	d011      	beq.n	8007932 <_dtoa_r+0x7b2>
 800790e:	0031      	movs	r1, r6
 8007910:	002a      	movs	r2, r5
 8007912:	9802      	ldr	r0, [sp, #8]
 8007914:	f000 fbae 	bl	8008074 <__pow5mult>
 8007918:	9a03      	ldr	r2, [sp, #12]
 800791a:	0001      	movs	r1, r0
 800791c:	0006      	movs	r6, r0
 800791e:	9802      	ldr	r0, [sp, #8]
 8007920:	f000 fb19 	bl	8007f56 <__multiply>
 8007924:	9903      	ldr	r1, [sp, #12]
 8007926:	9010      	str	r0, [sp, #64]	; 0x40
 8007928:	9802      	ldr	r0, [sp, #8]
 800792a:	f000 fa6b 	bl	8007e04 <_Bfree>
 800792e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007930:	9303      	str	r3, [sp, #12]
 8007932:	9b04      	ldr	r3, [sp, #16]
 8007934:	1b5a      	subs	r2, r3, r5
 8007936:	d004      	beq.n	8007942 <_dtoa_r+0x7c2>
 8007938:	9903      	ldr	r1, [sp, #12]
 800793a:	9802      	ldr	r0, [sp, #8]
 800793c:	f000 fb9a 	bl	8008074 <__pow5mult>
 8007940:	9003      	str	r0, [sp, #12]
 8007942:	2101      	movs	r1, #1
 8007944:	9802      	ldr	r0, [sp, #8]
 8007946:	f000 fafd 	bl	8007f44 <__i2b>
 800794a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800794c:	9004      	str	r0, [sp, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d100      	bne.n	8007954 <_dtoa_r+0x7d4>
 8007952:	e1e3      	b.n	8007d1c <_dtoa_r+0xb9c>
 8007954:	001a      	movs	r2, r3
 8007956:	0001      	movs	r1, r0
 8007958:	9802      	ldr	r0, [sp, #8]
 800795a:	f000 fb8b 	bl	8008074 <__pow5mult>
 800795e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007960:	9004      	str	r0, [sp, #16]
 8007962:	2b01      	cmp	r3, #1
 8007964:	dd00      	ble.n	8007968 <_dtoa_r+0x7e8>
 8007966:	e082      	b.n	8007a6e <_dtoa_r+0x8ee>
 8007968:	2500      	movs	r5, #0
 800796a:	9b06      	ldr	r3, [sp, #24]
 800796c:	42ab      	cmp	r3, r5
 800796e:	d10e      	bne.n	800798e <_dtoa_r+0x80e>
 8007970:	9b07      	ldr	r3, [sp, #28]
 8007972:	031b      	lsls	r3, r3, #12
 8007974:	42ab      	cmp	r3, r5
 8007976:	d10a      	bne.n	800798e <_dtoa_r+0x80e>
 8007978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800797a:	9a07      	ldr	r2, [sp, #28]
 800797c:	4213      	tst	r3, r2
 800797e:	d006      	beq.n	800798e <_dtoa_r+0x80e>
 8007980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007982:	3501      	adds	r5, #1
 8007984:	3301      	adds	r3, #1
 8007986:	930a      	str	r3, [sp, #40]	; 0x28
 8007988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800798a:	3301      	adds	r3, #1
 800798c:	930b      	str	r3, [sp, #44]	; 0x2c
 800798e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007990:	2001      	movs	r0, #1
 8007992:	2b00      	cmp	r3, #0
 8007994:	d16c      	bne.n	8007a70 <_dtoa_r+0x8f0>
 8007996:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007998:	1818      	adds	r0, r3, r0
 800799a:	231f      	movs	r3, #31
 800799c:	4018      	ands	r0, r3
 800799e:	d07e      	beq.n	8007a9e <_dtoa_r+0x91e>
 80079a0:	3301      	adds	r3, #1
 80079a2:	1a1b      	subs	r3, r3, r0
 80079a4:	2b04      	cmp	r3, #4
 80079a6:	dd70      	ble.n	8007a8a <_dtoa_r+0x90a>
 80079a8:	231c      	movs	r3, #28
 80079aa:	1a18      	subs	r0, r3, r0
 80079ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ae:	1824      	adds	r4, r4, r0
 80079b0:	181b      	adds	r3, r3, r0
 80079b2:	930a      	str	r3, [sp, #40]	; 0x28
 80079b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b6:	181b      	adds	r3, r3, r0
 80079b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80079ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079bc:	2b00      	cmp	r3, #0
 80079be:	dd05      	ble.n	80079cc <_dtoa_r+0x84c>
 80079c0:	001a      	movs	r2, r3
 80079c2:	9903      	ldr	r1, [sp, #12]
 80079c4:	9802      	ldr	r0, [sp, #8]
 80079c6:	f000 fba7 	bl	8008118 <__lshift>
 80079ca:	9003      	str	r0, [sp, #12]
 80079cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dd05      	ble.n	80079de <_dtoa_r+0x85e>
 80079d2:	001a      	movs	r2, r3
 80079d4:	9904      	ldr	r1, [sp, #16]
 80079d6:	9802      	ldr	r0, [sp, #8]
 80079d8:	f000 fb9e 	bl	8008118 <__lshift>
 80079dc:	9004      	str	r0, [sp, #16]
 80079de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d05e      	beq.n	8007aa2 <_dtoa_r+0x922>
 80079e4:	9904      	ldr	r1, [sp, #16]
 80079e6:	9803      	ldr	r0, [sp, #12]
 80079e8:	f000 fbe8 	bl	80081bc <__mcmp>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	da58      	bge.n	8007aa2 <_dtoa_r+0x922>
 80079f0:	2300      	movs	r3, #0
 80079f2:	220a      	movs	r2, #10
 80079f4:	9903      	ldr	r1, [sp, #12]
 80079f6:	9802      	ldr	r0, [sp, #8]
 80079f8:	f000 fa1d 	bl	8007e36 <__multadd>
 80079fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079fe:	3f01      	subs	r7, #1
 8007a00:	9003      	str	r0, [sp, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d100      	bne.n	8007a08 <_dtoa_r+0x888>
 8007a06:	e190      	b.n	8007d2a <_dtoa_r+0xbaa>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	0031      	movs	r1, r6
 8007a0c:	220a      	movs	r2, #10
 8007a0e:	9802      	ldr	r0, [sp, #8]
 8007a10:	f000 fa11 	bl	8007e36 <__multadd>
 8007a14:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a16:	0006      	movs	r6, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	dd00      	ble.n	8007a1e <_dtoa_r+0x89e>
 8007a1c:	e088      	b.n	8007b30 <_dtoa_r+0x9b0>
 8007a1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007a20:	2b02      	cmp	r3, #2
 8007a22:	dc00      	bgt.n	8007a26 <_dtoa_r+0x8a6>
 8007a24:	e084      	b.n	8007b30 <_dtoa_r+0x9b0>
 8007a26:	e044      	b.n	8007ab2 <_dtoa_r+0x932>
 8007a28:	2336      	movs	r3, #54	; 0x36
 8007a2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007a2c:	1a9b      	subs	r3, r3, r2
 8007a2e:	e747      	b.n	80078c0 <_dtoa_r+0x740>
 8007a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a32:	1e5d      	subs	r5, r3, #1
 8007a34:	9b04      	ldr	r3, [sp, #16]
 8007a36:	42ab      	cmp	r3, r5
 8007a38:	db08      	blt.n	8007a4c <_dtoa_r+0x8cc>
 8007a3a:	1b5d      	subs	r5, r3, r5
 8007a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	da0c      	bge.n	8007a5c <_dtoa_r+0x8dc>
 8007a42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a46:	1a9c      	subs	r4, r3, r2
 8007a48:	2300      	movs	r3, #0
 8007a4a:	e73b      	b.n	80078c4 <_dtoa_r+0x744>
 8007a4c:	9b04      	ldr	r3, [sp, #16]
 8007a4e:	9504      	str	r5, [sp, #16]
 8007a50:	1aea      	subs	r2, r5, r3
 8007a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a54:	2500      	movs	r5, #0
 8007a56:	189b      	adds	r3, r3, r2
 8007a58:	9311      	str	r3, [sp, #68]	; 0x44
 8007a5a:	e7ef      	b.n	8007a3c <_dtoa_r+0x8bc>
 8007a5c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a60:	e730      	b.n	80078c4 <_dtoa_r+0x744>
 8007a62:	9d04      	ldr	r5, [sp, #16]
 8007a64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007a66:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8007a68:	e737      	b.n	80078da <_dtoa_r+0x75a>
 8007a6a:	9a04      	ldr	r2, [sp, #16]
 8007a6c:	e764      	b.n	8007938 <_dtoa_r+0x7b8>
 8007a6e:	2500      	movs	r5, #0
 8007a70:	9b04      	ldr	r3, [sp, #16]
 8007a72:	9a04      	ldr	r2, [sp, #16]
 8007a74:	691b      	ldr	r3, [r3, #16]
 8007a76:	9310      	str	r3, [sp, #64]	; 0x40
 8007a78:	3303      	adds	r3, #3
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	18d3      	adds	r3, r2, r3
 8007a7e:	6858      	ldr	r0, [r3, #4]
 8007a80:	f000 fa17 	bl	8007eb2 <__hi0bits>
 8007a84:	2320      	movs	r3, #32
 8007a86:	1a18      	subs	r0, r3, r0
 8007a88:	e785      	b.n	8007996 <_dtoa_r+0x816>
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d095      	beq.n	80079ba <_dtoa_r+0x83a>
 8007a8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a90:	331c      	adds	r3, #28
 8007a92:	18d2      	adds	r2, r2, r3
 8007a94:	920a      	str	r2, [sp, #40]	; 0x28
 8007a96:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a98:	18e4      	adds	r4, r4, r3
 8007a9a:	18d3      	adds	r3, r2, r3
 8007a9c:	e78c      	b.n	80079b8 <_dtoa_r+0x838>
 8007a9e:	0003      	movs	r3, r0
 8007aa0:	e7f5      	b.n	8007a8e <_dtoa_r+0x90e>
 8007aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	dc3d      	bgt.n	8007b24 <_dtoa_r+0x9a4>
 8007aa8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	dd3a      	ble.n	8007b24 <_dtoa_r+0x9a4>
 8007aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ab0:	930c      	str	r3, [sp, #48]	; 0x30
 8007ab2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10c      	bne.n	8007ad2 <_dtoa_r+0x952>
 8007ab8:	9904      	ldr	r1, [sp, #16]
 8007aba:	2205      	movs	r2, #5
 8007abc:	9802      	ldr	r0, [sp, #8]
 8007abe:	f000 f9ba 	bl	8007e36 <__multadd>
 8007ac2:	9004      	str	r0, [sp, #16]
 8007ac4:	0001      	movs	r1, r0
 8007ac6:	9803      	ldr	r0, [sp, #12]
 8007ac8:	f000 fb78 	bl	80081bc <__mcmp>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	dd00      	ble.n	8007ad2 <_dtoa_r+0x952>
 8007ad0:	e5af      	b.n	8007632 <_dtoa_r+0x4b2>
 8007ad2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ad4:	9d08      	ldr	r5, [sp, #32]
 8007ad6:	43df      	mvns	r7, r3
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9309      	str	r3, [sp, #36]	; 0x24
 8007adc:	9904      	ldr	r1, [sp, #16]
 8007ade:	9802      	ldr	r0, [sp, #8]
 8007ae0:	f000 f990 	bl	8007e04 <_Bfree>
 8007ae4:	2e00      	cmp	r6, #0
 8007ae6:	d100      	bne.n	8007aea <_dtoa_r+0x96a>
 8007ae8:	e69b      	b.n	8007822 <_dtoa_r+0x6a2>
 8007aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d005      	beq.n	8007afc <_dtoa_r+0x97c>
 8007af0:	42b3      	cmp	r3, r6
 8007af2:	d003      	beq.n	8007afc <_dtoa_r+0x97c>
 8007af4:	0019      	movs	r1, r3
 8007af6:	9802      	ldr	r0, [sp, #8]
 8007af8:	f000 f984 	bl	8007e04 <_Bfree>
 8007afc:	0031      	movs	r1, r6
 8007afe:	9802      	ldr	r0, [sp, #8]
 8007b00:	f000 f980 	bl	8007e04 <_Bfree>
 8007b04:	e68d      	b.n	8007822 <_dtoa_r+0x6a2>
 8007b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b08:	9304      	str	r3, [sp, #16]
 8007b0a:	001e      	movs	r6, r3
 8007b0c:	e7e1      	b.n	8007ad2 <_dtoa_r+0x952>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e7fa      	b.n	8007b08 <_dtoa_r+0x988>
 8007b12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b14:	0037      	movs	r7, r6
 8007b16:	9304      	str	r3, [sp, #16]
 8007b18:	001e      	movs	r6, r3
 8007b1a:	e58a      	b.n	8007632 <_dtoa_r+0x4b2>
 8007b1c:	40240000 	.word	0x40240000
 8007b20:	00000433 	.word	0x00000433
 8007b24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d100      	bne.n	8007b2c <_dtoa_r+0x9ac>
 8007b2a:	e0b2      	b.n	8007c92 <_dtoa_r+0xb12>
 8007b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b2e:	930c      	str	r3, [sp, #48]	; 0x30
 8007b30:	2c00      	cmp	r4, #0
 8007b32:	dd05      	ble.n	8007b40 <_dtoa_r+0x9c0>
 8007b34:	0031      	movs	r1, r6
 8007b36:	0022      	movs	r2, r4
 8007b38:	9802      	ldr	r0, [sp, #8]
 8007b3a:	f000 faed 	bl	8008118 <__lshift>
 8007b3e:	0006      	movs	r6, r0
 8007b40:	0030      	movs	r0, r6
 8007b42:	2d00      	cmp	r5, #0
 8007b44:	d011      	beq.n	8007b6a <_dtoa_r+0x9ea>
 8007b46:	6871      	ldr	r1, [r6, #4]
 8007b48:	9802      	ldr	r0, [sp, #8]
 8007b4a:	f000 f923 	bl	8007d94 <_Balloc>
 8007b4e:	0031      	movs	r1, r6
 8007b50:	0004      	movs	r4, r0
 8007b52:	6933      	ldr	r3, [r6, #16]
 8007b54:	310c      	adds	r1, #12
 8007b56:	1c9a      	adds	r2, r3, #2
 8007b58:	0092      	lsls	r2, r2, #2
 8007b5a:	300c      	adds	r0, #12
 8007b5c:	f000 f911 	bl	8007d82 <memcpy>
 8007b60:	2201      	movs	r2, #1
 8007b62:	0021      	movs	r1, r4
 8007b64:	9802      	ldr	r0, [sp, #8]
 8007b66:	f000 fad7 	bl	8008118 <__lshift>
 8007b6a:	9609      	str	r6, [sp, #36]	; 0x24
 8007b6c:	0006      	movs	r6, r0
 8007b6e:	9b08      	ldr	r3, [sp, #32]
 8007b70:	930a      	str	r3, [sp, #40]	; 0x28
 8007b72:	9904      	ldr	r1, [sp, #16]
 8007b74:	9803      	ldr	r0, [sp, #12]
 8007b76:	f7ff fa7d 	bl	8007074 <quorem>
 8007b7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007b7c:	900d      	str	r0, [sp, #52]	; 0x34
 8007b7e:	0004      	movs	r4, r0
 8007b80:	9803      	ldr	r0, [sp, #12]
 8007b82:	f000 fb1b 	bl	80081bc <__mcmp>
 8007b86:	0032      	movs	r2, r6
 8007b88:	9010      	str	r0, [sp, #64]	; 0x40
 8007b8a:	9904      	ldr	r1, [sp, #16]
 8007b8c:	9802      	ldr	r0, [sp, #8]
 8007b8e:	f000 fb2f 	bl	80081f0 <__mdiff>
 8007b92:	2301      	movs	r3, #1
 8007b94:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b96:	68c3      	ldr	r3, [r0, #12]
 8007b98:	3430      	adds	r4, #48	; 0x30
 8007b9a:	0005      	movs	r5, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d104      	bne.n	8007baa <_dtoa_r+0xa2a>
 8007ba0:	0001      	movs	r1, r0
 8007ba2:	9803      	ldr	r0, [sp, #12]
 8007ba4:	f000 fb0a 	bl	80081bc <__mcmp>
 8007ba8:	900b      	str	r0, [sp, #44]	; 0x2c
 8007baa:	0029      	movs	r1, r5
 8007bac:	9802      	ldr	r0, [sp, #8]
 8007bae:	f000 f929 	bl	8007e04 <_Bfree>
 8007bb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	d10e      	bne.n	8007bd8 <_dtoa_r+0xa58>
 8007bba:	9a06      	ldr	r2, [sp, #24]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	4213      	tst	r3, r2
 8007bc0:	d10a      	bne.n	8007bd8 <_dtoa_r+0xa58>
 8007bc2:	2c39      	cmp	r4, #57	; 0x39
 8007bc4:	d026      	beq.n	8007c14 <_dtoa_r+0xa94>
 8007bc6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	dd01      	ble.n	8007bd0 <_dtoa_r+0xa50>
 8007bcc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8007bce:	3431      	adds	r4, #49	; 0x31
 8007bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd2:	1c5d      	adds	r5, r3, #1
 8007bd4:	701c      	strb	r4, [r3, #0]
 8007bd6:	e781      	b.n	8007adc <_dtoa_r+0x95c>
 8007bd8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	db07      	blt.n	8007bee <_dtoa_r+0xa6e>
 8007bde:	001d      	movs	r5, r3
 8007be0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007be2:	431d      	orrs	r5, r3
 8007be4:	d122      	bne.n	8007c2c <_dtoa_r+0xaac>
 8007be6:	2301      	movs	r3, #1
 8007be8:	9a06      	ldr	r2, [sp, #24]
 8007bea:	4213      	tst	r3, r2
 8007bec:	d11e      	bne.n	8007c2c <_dtoa_r+0xaac>
 8007bee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	dded      	ble.n	8007bd0 <_dtoa_r+0xa50>
 8007bf4:	9903      	ldr	r1, [sp, #12]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	9802      	ldr	r0, [sp, #8]
 8007bfa:	f000 fa8d 	bl	8008118 <__lshift>
 8007bfe:	9904      	ldr	r1, [sp, #16]
 8007c00:	9003      	str	r0, [sp, #12]
 8007c02:	f000 fadb 	bl	80081bc <__mcmp>
 8007c06:	2800      	cmp	r0, #0
 8007c08:	dc02      	bgt.n	8007c10 <_dtoa_r+0xa90>
 8007c0a:	d1e1      	bne.n	8007bd0 <_dtoa_r+0xa50>
 8007c0c:	07e3      	lsls	r3, r4, #31
 8007c0e:	d5df      	bpl.n	8007bd0 <_dtoa_r+0xa50>
 8007c10:	2c39      	cmp	r4, #57	; 0x39
 8007c12:	d1db      	bne.n	8007bcc <_dtoa_r+0xa4c>
 8007c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c18:	1c5d      	adds	r5, r3, #1
 8007c1a:	2339      	movs	r3, #57	; 0x39
 8007c1c:	7013      	strb	r3, [r2, #0]
 8007c1e:	1e6b      	subs	r3, r5, #1
 8007c20:	781a      	ldrb	r2, [r3, #0]
 8007c22:	2a39      	cmp	r2, #57	; 0x39
 8007c24:	d067      	beq.n	8007cf6 <_dtoa_r+0xb76>
 8007c26:	3201      	adds	r2, #1
 8007c28:	701a      	strb	r2, [r3, #0]
 8007c2a:	e757      	b.n	8007adc <_dtoa_r+0x95c>
 8007c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c2e:	1c5d      	adds	r5, r3, #1
 8007c30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	dd04      	ble.n	8007c40 <_dtoa_r+0xac0>
 8007c36:	2c39      	cmp	r4, #57	; 0x39
 8007c38:	d0ec      	beq.n	8007c14 <_dtoa_r+0xa94>
 8007c3a:	3401      	adds	r4, #1
 8007c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3e:	e7c9      	b.n	8007bd4 <_dtoa_r+0xa54>
 8007c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c44:	701c      	strb	r4, [r3, #0]
 8007c46:	9b08      	ldr	r3, [sp, #32]
 8007c48:	1aeb      	subs	r3, r5, r3
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d03e      	beq.n	8007ccc <_dtoa_r+0xb4c>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	220a      	movs	r2, #10
 8007c52:	9903      	ldr	r1, [sp, #12]
 8007c54:	9802      	ldr	r0, [sp, #8]
 8007c56:	f000 f8ee 	bl	8007e36 <__multadd>
 8007c5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c5c:	9003      	str	r0, [sp, #12]
 8007c5e:	42b3      	cmp	r3, r6
 8007c60:	d109      	bne.n	8007c76 <_dtoa_r+0xaf6>
 8007c62:	2300      	movs	r3, #0
 8007c64:	220a      	movs	r2, #10
 8007c66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c68:	9802      	ldr	r0, [sp, #8]
 8007c6a:	f000 f8e4 	bl	8007e36 <__multadd>
 8007c6e:	9009      	str	r0, [sp, #36]	; 0x24
 8007c70:	0006      	movs	r6, r0
 8007c72:	950a      	str	r5, [sp, #40]	; 0x28
 8007c74:	e77d      	b.n	8007b72 <_dtoa_r+0x9f2>
 8007c76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c78:	2300      	movs	r3, #0
 8007c7a:	220a      	movs	r2, #10
 8007c7c:	9802      	ldr	r0, [sp, #8]
 8007c7e:	f000 f8da 	bl	8007e36 <__multadd>
 8007c82:	2300      	movs	r3, #0
 8007c84:	9009      	str	r0, [sp, #36]	; 0x24
 8007c86:	220a      	movs	r2, #10
 8007c88:	0031      	movs	r1, r6
 8007c8a:	9802      	ldr	r0, [sp, #8]
 8007c8c:	f000 f8d3 	bl	8007e36 <__multadd>
 8007c90:	e7ee      	b.n	8007c70 <_dtoa_r+0xaf0>
 8007c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c94:	930c      	str	r3, [sp, #48]	; 0x30
 8007c96:	9b08      	ldr	r3, [sp, #32]
 8007c98:	9306      	str	r3, [sp, #24]
 8007c9a:	9904      	ldr	r1, [sp, #16]
 8007c9c:	9803      	ldr	r0, [sp, #12]
 8007c9e:	f7ff f9e9 	bl	8007074 <quorem>
 8007ca2:	9b06      	ldr	r3, [sp, #24]
 8007ca4:	3030      	adds	r0, #48	; 0x30
 8007ca6:	1c5d      	adds	r5, r3, #1
 8007ca8:	7018      	strb	r0, [r3, #0]
 8007caa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cac:	9b08      	ldr	r3, [sp, #32]
 8007cae:	0004      	movs	r4, r0
 8007cb0:	1aeb      	subs	r3, r5, r3
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	dd08      	ble.n	8007cc8 <_dtoa_r+0xb48>
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	220a      	movs	r2, #10
 8007cba:	9903      	ldr	r1, [sp, #12]
 8007cbc:	9802      	ldr	r0, [sp, #8]
 8007cbe:	f000 f8ba 	bl	8007e36 <__multadd>
 8007cc2:	9506      	str	r5, [sp, #24]
 8007cc4:	9003      	str	r0, [sp, #12]
 8007cc6:	e7e8      	b.n	8007c9a <_dtoa_r+0xb1a>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	9309      	str	r3, [sp, #36]	; 0x24
 8007ccc:	9903      	ldr	r1, [sp, #12]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	9802      	ldr	r0, [sp, #8]
 8007cd2:	f000 fa21 	bl	8008118 <__lshift>
 8007cd6:	9904      	ldr	r1, [sp, #16]
 8007cd8:	9003      	str	r0, [sp, #12]
 8007cda:	f000 fa6f 	bl	80081bc <__mcmp>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	dc9d      	bgt.n	8007c1e <_dtoa_r+0xa9e>
 8007ce2:	d101      	bne.n	8007ce8 <_dtoa_r+0xb68>
 8007ce4:	07e3      	lsls	r3, r4, #31
 8007ce6:	d49a      	bmi.n	8007c1e <_dtoa_r+0xa9e>
 8007ce8:	1e6b      	subs	r3, r5, #1
 8007cea:	781a      	ldrb	r2, [r3, #0]
 8007cec:	2a30      	cmp	r2, #48	; 0x30
 8007cee:	d000      	beq.n	8007cf2 <_dtoa_r+0xb72>
 8007cf0:	e6f4      	b.n	8007adc <_dtoa_r+0x95c>
 8007cf2:	001d      	movs	r5, r3
 8007cf4:	e7f8      	b.n	8007ce8 <_dtoa_r+0xb68>
 8007cf6:	9a08      	ldr	r2, [sp, #32]
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d103      	bne.n	8007d04 <_dtoa_r+0xb84>
 8007cfc:	2331      	movs	r3, #49	; 0x31
 8007cfe:	3701      	adds	r7, #1
 8007d00:	7013      	strb	r3, [r2, #0]
 8007d02:	e6eb      	b.n	8007adc <_dtoa_r+0x95c>
 8007d04:	001d      	movs	r5, r3
 8007d06:	e78a      	b.n	8007c1e <_dtoa_r+0xa9e>
 8007d08:	4b0b      	ldr	r3, [pc, #44]	; (8007d38 <_dtoa_r+0xbb8>)
 8007d0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d0c:	9308      	str	r3, [sp, #32]
 8007d0e:	4b0b      	ldr	r3, [pc, #44]	; (8007d3c <_dtoa_r+0xbbc>)
 8007d10:	2a00      	cmp	r2, #0
 8007d12:	d001      	beq.n	8007d18 <_dtoa_r+0xb98>
 8007d14:	f7ff fa77 	bl	8007206 <_dtoa_r+0x86>
 8007d18:	f7ff fa77 	bl	800720a <_dtoa_r+0x8a>
 8007d1c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	dc00      	bgt.n	8007d24 <_dtoa_r+0xba4>
 8007d22:	e621      	b.n	8007968 <_dtoa_r+0x7e8>
 8007d24:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8007d26:	2001      	movs	r0, #1
 8007d28:	e635      	b.n	8007996 <_dtoa_r+0x816>
 8007d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	dcb2      	bgt.n	8007c96 <_dtoa_r+0xb16>
 8007d30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	ddaf      	ble.n	8007c96 <_dtoa_r+0xb16>
 8007d36:	e6bc      	b.n	8007ab2 <_dtoa_r+0x932>
 8007d38:	08009ed8 	.word	0x08009ed8
 8007d3c:	08009ee0 	.word	0x08009ee0

08007d40 <_localeconv_r>:
 8007d40:	4b03      	ldr	r3, [pc, #12]	; (8007d50 <_localeconv_r+0x10>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6a18      	ldr	r0, [r3, #32]
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d100      	bne.n	8007d4c <_localeconv_r+0xc>
 8007d4a:	4802      	ldr	r0, [pc, #8]	; (8007d54 <_localeconv_r+0x14>)
 8007d4c:	30f0      	adds	r0, #240	; 0xf0
 8007d4e:	4770      	bx	lr
 8007d50:	2000001c 	.word	0x2000001c
 8007d54:	20000080 	.word	0x20000080

08007d58 <malloc>:
 8007d58:	b510      	push	{r4, lr}
 8007d5a:	4b03      	ldr	r3, [pc, #12]	; (8007d68 <malloc+0x10>)
 8007d5c:	0001      	movs	r1, r0
 8007d5e:	6818      	ldr	r0, [r3, #0]
 8007d60:	f000 fb56 	bl	8008410 <_malloc_r>
 8007d64:	bd10      	pop	{r4, pc}
 8007d66:	46c0      	nop			; (mov r8, r8)
 8007d68:	2000001c 	.word	0x2000001c

08007d6c <memchr>:
 8007d6c:	b2c9      	uxtb	r1, r1
 8007d6e:	1882      	adds	r2, r0, r2
 8007d70:	4290      	cmp	r0, r2
 8007d72:	d101      	bne.n	8007d78 <memchr+0xc>
 8007d74:	2000      	movs	r0, #0
 8007d76:	4770      	bx	lr
 8007d78:	7803      	ldrb	r3, [r0, #0]
 8007d7a:	428b      	cmp	r3, r1
 8007d7c:	d0fb      	beq.n	8007d76 <memchr+0xa>
 8007d7e:	3001      	adds	r0, #1
 8007d80:	e7f6      	b.n	8007d70 <memchr+0x4>

08007d82 <memcpy>:
 8007d82:	2300      	movs	r3, #0
 8007d84:	b510      	push	{r4, lr}
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d100      	bne.n	8007d8c <memcpy+0xa>
 8007d8a:	bd10      	pop	{r4, pc}
 8007d8c:	5ccc      	ldrb	r4, [r1, r3]
 8007d8e:	54c4      	strb	r4, [r0, r3]
 8007d90:	3301      	adds	r3, #1
 8007d92:	e7f8      	b.n	8007d86 <memcpy+0x4>

08007d94 <_Balloc>:
 8007d94:	b570      	push	{r4, r5, r6, lr}
 8007d96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007d98:	0004      	movs	r4, r0
 8007d9a:	000d      	movs	r5, r1
 8007d9c:	2e00      	cmp	r6, #0
 8007d9e:	d107      	bne.n	8007db0 <_Balloc+0x1c>
 8007da0:	2010      	movs	r0, #16
 8007da2:	f7ff ffd9 	bl	8007d58 <malloc>
 8007da6:	6260      	str	r0, [r4, #36]	; 0x24
 8007da8:	6046      	str	r6, [r0, #4]
 8007daa:	6086      	str	r6, [r0, #8]
 8007dac:	6006      	str	r6, [r0, #0]
 8007dae:	60c6      	str	r6, [r0, #12]
 8007db0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007db2:	68f3      	ldr	r3, [r6, #12]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d013      	beq.n	8007de0 <_Balloc+0x4c>
 8007db8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dba:	00aa      	lsls	r2, r5, #2
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	189b      	adds	r3, r3, r2
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d118      	bne.n	8007df8 <_Balloc+0x64>
 8007dc6:	2101      	movs	r1, #1
 8007dc8:	000e      	movs	r6, r1
 8007dca:	40ae      	lsls	r6, r5
 8007dcc:	1d72      	adds	r2, r6, #5
 8007dce:	0092      	lsls	r2, r2, #2
 8007dd0:	0020      	movs	r0, r4
 8007dd2:	f000 fac5 	bl	8008360 <_calloc_r>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d00c      	beq.n	8007df4 <_Balloc+0x60>
 8007dda:	6045      	str	r5, [r0, #4]
 8007ddc:	6086      	str	r6, [r0, #8]
 8007dde:	e00d      	b.n	8007dfc <_Balloc+0x68>
 8007de0:	2221      	movs	r2, #33	; 0x21
 8007de2:	2104      	movs	r1, #4
 8007de4:	0020      	movs	r0, r4
 8007de6:	f000 fabb 	bl	8008360 <_calloc_r>
 8007dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007dec:	60f0      	str	r0, [r6, #12]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1e1      	bne.n	8007db8 <_Balloc+0x24>
 8007df4:	2000      	movs	r0, #0
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	6802      	ldr	r2, [r0, #0]
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	6103      	str	r3, [r0, #16]
 8007e00:	60c3      	str	r3, [r0, #12]
 8007e02:	e7f8      	b.n	8007df6 <_Balloc+0x62>

08007e04 <_Bfree>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007e08:	0006      	movs	r6, r0
 8007e0a:	000d      	movs	r5, r1
 8007e0c:	2c00      	cmp	r4, #0
 8007e0e:	d107      	bne.n	8007e20 <_Bfree+0x1c>
 8007e10:	2010      	movs	r0, #16
 8007e12:	f7ff ffa1 	bl	8007d58 <malloc>
 8007e16:	6270      	str	r0, [r6, #36]	; 0x24
 8007e18:	6044      	str	r4, [r0, #4]
 8007e1a:	6084      	str	r4, [r0, #8]
 8007e1c:	6004      	str	r4, [r0, #0]
 8007e1e:	60c4      	str	r4, [r0, #12]
 8007e20:	2d00      	cmp	r5, #0
 8007e22:	d007      	beq.n	8007e34 <_Bfree+0x30>
 8007e24:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007e26:	686a      	ldr	r2, [r5, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	0092      	lsls	r2, r2, #2
 8007e2c:	189b      	adds	r3, r3, r2
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	602a      	str	r2, [r5, #0]
 8007e32:	601d      	str	r5, [r3, #0]
 8007e34:	bd70      	pop	{r4, r5, r6, pc}

08007e36 <__multadd>:
 8007e36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e38:	001e      	movs	r6, r3
 8007e3a:	2314      	movs	r3, #20
 8007e3c:	469c      	mov	ip, r3
 8007e3e:	0007      	movs	r7, r0
 8007e40:	000c      	movs	r4, r1
 8007e42:	2000      	movs	r0, #0
 8007e44:	690d      	ldr	r5, [r1, #16]
 8007e46:	448c      	add	ip, r1
 8007e48:	4663      	mov	r3, ip
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	b299      	uxth	r1, r3
 8007e50:	4663      	mov	r3, ip
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4351      	muls	r1, r2
 8007e56:	0c1b      	lsrs	r3, r3, #16
 8007e58:	4353      	muls	r3, r2
 8007e5a:	1989      	adds	r1, r1, r6
 8007e5c:	0c0e      	lsrs	r6, r1, #16
 8007e5e:	199b      	adds	r3, r3, r6
 8007e60:	b289      	uxth	r1, r1
 8007e62:	0c1e      	lsrs	r6, r3, #16
 8007e64:	041b      	lsls	r3, r3, #16
 8007e66:	185b      	adds	r3, r3, r1
 8007e68:	4661      	mov	r1, ip
 8007e6a:	c108      	stmia	r1!, {r3}
 8007e6c:	468c      	mov	ip, r1
 8007e6e:	4285      	cmp	r5, r0
 8007e70:	dcea      	bgt.n	8007e48 <__multadd+0x12>
 8007e72:	2e00      	cmp	r6, #0
 8007e74:	d01b      	beq.n	8007eae <__multadd+0x78>
 8007e76:	68a3      	ldr	r3, [r4, #8]
 8007e78:	42ab      	cmp	r3, r5
 8007e7a:	dc12      	bgt.n	8007ea2 <__multadd+0x6c>
 8007e7c:	6863      	ldr	r3, [r4, #4]
 8007e7e:	0038      	movs	r0, r7
 8007e80:	1c59      	adds	r1, r3, #1
 8007e82:	f7ff ff87 	bl	8007d94 <_Balloc>
 8007e86:	0021      	movs	r1, r4
 8007e88:	6923      	ldr	r3, [r4, #16]
 8007e8a:	9001      	str	r0, [sp, #4]
 8007e8c:	1c9a      	adds	r2, r3, #2
 8007e8e:	0092      	lsls	r2, r2, #2
 8007e90:	310c      	adds	r1, #12
 8007e92:	300c      	adds	r0, #12
 8007e94:	f7ff ff75 	bl	8007d82 <memcpy>
 8007e98:	0021      	movs	r1, r4
 8007e9a:	0038      	movs	r0, r7
 8007e9c:	f7ff ffb2 	bl	8007e04 <_Bfree>
 8007ea0:	9c01      	ldr	r4, [sp, #4]
 8007ea2:	1d2b      	adds	r3, r5, #4
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	18e3      	adds	r3, r4, r3
 8007ea8:	3501      	adds	r5, #1
 8007eaa:	605e      	str	r6, [r3, #4]
 8007eac:	6125      	str	r5, [r4, #16]
 8007eae:	0020      	movs	r0, r4
 8007eb0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08007eb2 <__hi0bits>:
 8007eb2:	0003      	movs	r3, r0
 8007eb4:	0c02      	lsrs	r2, r0, #16
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	4282      	cmp	r2, r0
 8007eba:	d101      	bne.n	8007ec0 <__hi0bits+0xe>
 8007ebc:	041b      	lsls	r3, r3, #16
 8007ebe:	3010      	adds	r0, #16
 8007ec0:	0e1a      	lsrs	r2, r3, #24
 8007ec2:	d101      	bne.n	8007ec8 <__hi0bits+0x16>
 8007ec4:	3008      	adds	r0, #8
 8007ec6:	021b      	lsls	r3, r3, #8
 8007ec8:	0f1a      	lsrs	r2, r3, #28
 8007eca:	d101      	bne.n	8007ed0 <__hi0bits+0x1e>
 8007ecc:	3004      	adds	r0, #4
 8007ece:	011b      	lsls	r3, r3, #4
 8007ed0:	0f9a      	lsrs	r2, r3, #30
 8007ed2:	d101      	bne.n	8007ed8 <__hi0bits+0x26>
 8007ed4:	3002      	adds	r0, #2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	db03      	blt.n	8007ee4 <__hi0bits+0x32>
 8007edc:	3001      	adds	r0, #1
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	d400      	bmi.n	8007ee4 <__hi0bits+0x32>
 8007ee2:	2020      	movs	r0, #32
 8007ee4:	4770      	bx	lr

08007ee6 <__lo0bits>:
 8007ee6:	2207      	movs	r2, #7
 8007ee8:	6803      	ldr	r3, [r0, #0]
 8007eea:	b510      	push	{r4, lr}
 8007eec:	0001      	movs	r1, r0
 8007eee:	401a      	ands	r2, r3
 8007ef0:	d00d      	beq.n	8007f0e <__lo0bits+0x28>
 8007ef2:	2401      	movs	r4, #1
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	4223      	tst	r3, r4
 8007ef8:	d105      	bne.n	8007f06 <__lo0bits+0x20>
 8007efa:	3002      	adds	r0, #2
 8007efc:	4203      	tst	r3, r0
 8007efe:	d003      	beq.n	8007f08 <__lo0bits+0x22>
 8007f00:	40e3      	lsrs	r3, r4
 8007f02:	0020      	movs	r0, r4
 8007f04:	600b      	str	r3, [r1, #0]
 8007f06:	bd10      	pop	{r4, pc}
 8007f08:	089b      	lsrs	r3, r3, #2
 8007f0a:	600b      	str	r3, [r1, #0]
 8007f0c:	e7fb      	b.n	8007f06 <__lo0bits+0x20>
 8007f0e:	b29c      	uxth	r4, r3
 8007f10:	0010      	movs	r0, r2
 8007f12:	2c00      	cmp	r4, #0
 8007f14:	d101      	bne.n	8007f1a <__lo0bits+0x34>
 8007f16:	2010      	movs	r0, #16
 8007f18:	0c1b      	lsrs	r3, r3, #16
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	2a00      	cmp	r2, #0
 8007f1e:	d101      	bne.n	8007f24 <__lo0bits+0x3e>
 8007f20:	3008      	adds	r0, #8
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	071a      	lsls	r2, r3, #28
 8007f26:	d101      	bne.n	8007f2c <__lo0bits+0x46>
 8007f28:	3004      	adds	r0, #4
 8007f2a:	091b      	lsrs	r3, r3, #4
 8007f2c:	079a      	lsls	r2, r3, #30
 8007f2e:	d101      	bne.n	8007f34 <__lo0bits+0x4e>
 8007f30:	3002      	adds	r0, #2
 8007f32:	089b      	lsrs	r3, r3, #2
 8007f34:	07da      	lsls	r2, r3, #31
 8007f36:	d4e8      	bmi.n	8007f0a <__lo0bits+0x24>
 8007f38:	085b      	lsrs	r3, r3, #1
 8007f3a:	d001      	beq.n	8007f40 <__lo0bits+0x5a>
 8007f3c:	3001      	adds	r0, #1
 8007f3e:	e7e4      	b.n	8007f0a <__lo0bits+0x24>
 8007f40:	2020      	movs	r0, #32
 8007f42:	e7e0      	b.n	8007f06 <__lo0bits+0x20>

08007f44 <__i2b>:
 8007f44:	b510      	push	{r4, lr}
 8007f46:	000c      	movs	r4, r1
 8007f48:	2101      	movs	r1, #1
 8007f4a:	f7ff ff23 	bl	8007d94 <_Balloc>
 8007f4e:	2301      	movs	r3, #1
 8007f50:	6144      	str	r4, [r0, #20]
 8007f52:	6103      	str	r3, [r0, #16]
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <__multiply>:
 8007f56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f58:	690b      	ldr	r3, [r1, #16]
 8007f5a:	0014      	movs	r4, r2
 8007f5c:	6912      	ldr	r2, [r2, #16]
 8007f5e:	b089      	sub	sp, #36	; 0x24
 8007f60:	000d      	movs	r5, r1
 8007f62:	4293      	cmp	r3, r2
 8007f64:	da01      	bge.n	8007f6a <__multiply+0x14>
 8007f66:	0025      	movs	r5, r4
 8007f68:	000c      	movs	r4, r1
 8007f6a:	692f      	ldr	r7, [r5, #16]
 8007f6c:	6926      	ldr	r6, [r4, #16]
 8007f6e:	6869      	ldr	r1, [r5, #4]
 8007f70:	19bb      	adds	r3, r7, r6
 8007f72:	9302      	str	r3, [sp, #8]
 8007f74:	68ab      	ldr	r3, [r5, #8]
 8007f76:	19ba      	adds	r2, r7, r6
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	da00      	bge.n	8007f7e <__multiply+0x28>
 8007f7c:	3101      	adds	r1, #1
 8007f7e:	f7ff ff09 	bl	8007d94 <_Balloc>
 8007f82:	0002      	movs	r2, r0
 8007f84:	19bb      	adds	r3, r7, r6
 8007f86:	3214      	adds	r2, #20
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	18d3      	adds	r3, r2, r3
 8007f8c:	469c      	mov	ip, r3
 8007f8e:	2100      	movs	r1, #0
 8007f90:	0013      	movs	r3, r2
 8007f92:	9004      	str	r0, [sp, #16]
 8007f94:	4563      	cmp	r3, ip
 8007f96:	d31d      	bcc.n	8007fd4 <__multiply+0x7e>
 8007f98:	3514      	adds	r5, #20
 8007f9a:	00bf      	lsls	r7, r7, #2
 8007f9c:	19eb      	adds	r3, r5, r7
 8007f9e:	3414      	adds	r4, #20
 8007fa0:	00b6      	lsls	r6, r6, #2
 8007fa2:	9305      	str	r3, [sp, #20]
 8007fa4:	19a3      	adds	r3, r4, r6
 8007fa6:	9503      	str	r5, [sp, #12]
 8007fa8:	9401      	str	r4, [sp, #4]
 8007faa:	9307      	str	r3, [sp, #28]
 8007fac:	9b07      	ldr	r3, [sp, #28]
 8007fae:	9901      	ldr	r1, [sp, #4]
 8007fb0:	4299      	cmp	r1, r3
 8007fb2:	d311      	bcc.n	8007fd8 <__multiply+0x82>
 8007fb4:	9b02      	ldr	r3, [sp, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dd06      	ble.n	8007fc8 <__multiply+0x72>
 8007fba:	2304      	movs	r3, #4
 8007fbc:	425b      	negs	r3, r3
 8007fbe:	449c      	add	ip, r3
 8007fc0:	4663      	mov	r3, ip
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d051      	beq.n	800806c <__multiply+0x116>
 8007fc8:	9b04      	ldr	r3, [sp, #16]
 8007fca:	9a02      	ldr	r2, [sp, #8]
 8007fcc:	0018      	movs	r0, r3
 8007fce:	611a      	str	r2, [r3, #16]
 8007fd0:	b009      	add	sp, #36	; 0x24
 8007fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd4:	c302      	stmia	r3!, {r1}
 8007fd6:	e7dd      	b.n	8007f94 <__multiply+0x3e>
 8007fd8:	9b01      	ldr	r3, [sp, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	b298      	uxth	r0, r3
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	d01c      	beq.n	800801c <__multiply+0xc6>
 8007fe2:	0015      	movs	r5, r2
 8007fe4:	2600      	movs	r6, #0
 8007fe6:	9f03      	ldr	r7, [sp, #12]
 8007fe8:	cf02      	ldmia	r7!, {r1}
 8007fea:	682c      	ldr	r4, [r5, #0]
 8007fec:	b28b      	uxth	r3, r1
 8007fee:	4343      	muls	r3, r0
 8007ff0:	0c09      	lsrs	r1, r1, #16
 8007ff2:	4341      	muls	r1, r0
 8007ff4:	b2a4      	uxth	r4, r4
 8007ff6:	191b      	adds	r3, r3, r4
 8007ff8:	199b      	adds	r3, r3, r6
 8007ffa:	000e      	movs	r6, r1
 8007ffc:	6829      	ldr	r1, [r5, #0]
 8007ffe:	9506      	str	r5, [sp, #24]
 8008000:	0c09      	lsrs	r1, r1, #16
 8008002:	1871      	adds	r1, r6, r1
 8008004:	0c1e      	lsrs	r6, r3, #16
 8008006:	1989      	adds	r1, r1, r6
 8008008:	0c0e      	lsrs	r6, r1, #16
 800800a:	b29b      	uxth	r3, r3
 800800c:	0409      	lsls	r1, r1, #16
 800800e:	430b      	orrs	r3, r1
 8008010:	c508      	stmia	r5!, {r3}
 8008012:	9b05      	ldr	r3, [sp, #20]
 8008014:	42bb      	cmp	r3, r7
 8008016:	d8e7      	bhi.n	8007fe8 <__multiply+0x92>
 8008018:	9b06      	ldr	r3, [sp, #24]
 800801a:	605e      	str	r6, [r3, #4]
 800801c:	9b01      	ldr	r3, [sp, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	0c1d      	lsrs	r5, r3, #16
 8008022:	d01e      	beq.n	8008062 <__multiply+0x10c>
 8008024:	0010      	movs	r0, r2
 8008026:	2700      	movs	r7, #0
 8008028:	6813      	ldr	r3, [r2, #0]
 800802a:	9e03      	ldr	r6, [sp, #12]
 800802c:	6831      	ldr	r1, [r6, #0]
 800802e:	6804      	ldr	r4, [r0, #0]
 8008030:	b289      	uxth	r1, r1
 8008032:	4369      	muls	r1, r5
 8008034:	0c24      	lsrs	r4, r4, #16
 8008036:	1909      	adds	r1, r1, r4
 8008038:	19c9      	adds	r1, r1, r7
 800803a:	040f      	lsls	r7, r1, #16
 800803c:	b29b      	uxth	r3, r3
 800803e:	433b      	orrs	r3, r7
 8008040:	6003      	str	r3, [r0, #0]
 8008042:	ce80      	ldmia	r6!, {r7}
 8008044:	6843      	ldr	r3, [r0, #4]
 8008046:	0c3f      	lsrs	r7, r7, #16
 8008048:	436f      	muls	r7, r5
 800804a:	b29b      	uxth	r3, r3
 800804c:	18fb      	adds	r3, r7, r3
 800804e:	0c09      	lsrs	r1, r1, #16
 8008050:	185b      	adds	r3, r3, r1
 8008052:	9905      	ldr	r1, [sp, #20]
 8008054:	9006      	str	r0, [sp, #24]
 8008056:	0c1f      	lsrs	r7, r3, #16
 8008058:	3004      	adds	r0, #4
 800805a:	42b1      	cmp	r1, r6
 800805c:	d8e6      	bhi.n	800802c <__multiply+0xd6>
 800805e:	9906      	ldr	r1, [sp, #24]
 8008060:	604b      	str	r3, [r1, #4]
 8008062:	9b01      	ldr	r3, [sp, #4]
 8008064:	3204      	adds	r2, #4
 8008066:	3304      	adds	r3, #4
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	e79f      	b.n	8007fac <__multiply+0x56>
 800806c:	9b02      	ldr	r3, [sp, #8]
 800806e:	3b01      	subs	r3, #1
 8008070:	9302      	str	r3, [sp, #8]
 8008072:	e79f      	b.n	8007fb4 <__multiply+0x5e>

08008074 <__pow5mult>:
 8008074:	2303      	movs	r3, #3
 8008076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008078:	4013      	ands	r3, r2
 800807a:	0005      	movs	r5, r0
 800807c:	000e      	movs	r6, r1
 800807e:	0014      	movs	r4, r2
 8008080:	2b00      	cmp	r3, #0
 8008082:	d008      	beq.n	8008096 <__pow5mult+0x22>
 8008084:	4922      	ldr	r1, [pc, #136]	; (8008110 <__pow5mult+0x9c>)
 8008086:	3b01      	subs	r3, #1
 8008088:	009a      	lsls	r2, r3, #2
 800808a:	5852      	ldr	r2, [r2, r1]
 800808c:	2300      	movs	r3, #0
 800808e:	0031      	movs	r1, r6
 8008090:	f7ff fed1 	bl	8007e36 <__multadd>
 8008094:	0006      	movs	r6, r0
 8008096:	10a3      	asrs	r3, r4, #2
 8008098:	9301      	str	r3, [sp, #4]
 800809a:	d036      	beq.n	800810a <__pow5mult+0x96>
 800809c:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800809e:	2c00      	cmp	r4, #0
 80080a0:	d107      	bne.n	80080b2 <__pow5mult+0x3e>
 80080a2:	2010      	movs	r0, #16
 80080a4:	f7ff fe58 	bl	8007d58 <malloc>
 80080a8:	6268      	str	r0, [r5, #36]	; 0x24
 80080aa:	6044      	str	r4, [r0, #4]
 80080ac:	6084      	str	r4, [r0, #8]
 80080ae:	6004      	str	r4, [r0, #0]
 80080b0:	60c4      	str	r4, [r0, #12]
 80080b2:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 80080b4:	68bc      	ldr	r4, [r7, #8]
 80080b6:	2c00      	cmp	r4, #0
 80080b8:	d107      	bne.n	80080ca <__pow5mult+0x56>
 80080ba:	4916      	ldr	r1, [pc, #88]	; (8008114 <__pow5mult+0xa0>)
 80080bc:	0028      	movs	r0, r5
 80080be:	f7ff ff41 	bl	8007f44 <__i2b>
 80080c2:	2300      	movs	r3, #0
 80080c4:	0004      	movs	r4, r0
 80080c6:	60b8      	str	r0, [r7, #8]
 80080c8:	6003      	str	r3, [r0, #0]
 80080ca:	2201      	movs	r2, #1
 80080cc:	9b01      	ldr	r3, [sp, #4]
 80080ce:	4213      	tst	r3, r2
 80080d0:	d00a      	beq.n	80080e8 <__pow5mult+0x74>
 80080d2:	0031      	movs	r1, r6
 80080d4:	0022      	movs	r2, r4
 80080d6:	0028      	movs	r0, r5
 80080d8:	f7ff ff3d 	bl	8007f56 <__multiply>
 80080dc:	0007      	movs	r7, r0
 80080de:	0031      	movs	r1, r6
 80080e0:	0028      	movs	r0, r5
 80080e2:	f7ff fe8f 	bl	8007e04 <_Bfree>
 80080e6:	003e      	movs	r6, r7
 80080e8:	9b01      	ldr	r3, [sp, #4]
 80080ea:	105b      	asrs	r3, r3, #1
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	d00c      	beq.n	800810a <__pow5mult+0x96>
 80080f0:	6820      	ldr	r0, [r4, #0]
 80080f2:	2800      	cmp	r0, #0
 80080f4:	d107      	bne.n	8008106 <__pow5mult+0x92>
 80080f6:	0022      	movs	r2, r4
 80080f8:	0021      	movs	r1, r4
 80080fa:	0028      	movs	r0, r5
 80080fc:	f7ff ff2b 	bl	8007f56 <__multiply>
 8008100:	2300      	movs	r3, #0
 8008102:	6020      	str	r0, [r4, #0]
 8008104:	6003      	str	r3, [r0, #0]
 8008106:	0004      	movs	r4, r0
 8008108:	e7df      	b.n	80080ca <__pow5mult+0x56>
 800810a:	0030      	movs	r0, r6
 800810c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800810e:	46c0      	nop			; (mov r8, r8)
 8008110:	08009fd8 	.word	0x08009fd8
 8008114:	00000271 	.word	0x00000271

08008118 <__lshift>:
 8008118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800811a:	000d      	movs	r5, r1
 800811c:	0017      	movs	r7, r2
 800811e:	692b      	ldr	r3, [r5, #16]
 8008120:	1154      	asrs	r4, r2, #5
 8008122:	b085      	sub	sp, #20
 8008124:	18e3      	adds	r3, r4, r3
 8008126:	9301      	str	r3, [sp, #4]
 8008128:	3301      	adds	r3, #1
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	6849      	ldr	r1, [r1, #4]
 800812e:	68ab      	ldr	r3, [r5, #8]
 8008130:	9002      	str	r0, [sp, #8]
 8008132:	9a00      	ldr	r2, [sp, #0]
 8008134:	4293      	cmp	r3, r2
 8008136:	db35      	blt.n	80081a4 <__lshift+0x8c>
 8008138:	9802      	ldr	r0, [sp, #8]
 800813a:	f7ff fe2b 	bl	8007d94 <_Balloc>
 800813e:	2300      	movs	r3, #0
 8008140:	0002      	movs	r2, r0
 8008142:	0006      	movs	r6, r0
 8008144:	0019      	movs	r1, r3
 8008146:	3214      	adds	r2, #20
 8008148:	42a3      	cmp	r3, r4
 800814a:	db2e      	blt.n	80081aa <__lshift+0x92>
 800814c:	43e3      	mvns	r3, r4
 800814e:	17db      	asrs	r3, r3, #31
 8008150:	401c      	ands	r4, r3
 8008152:	002b      	movs	r3, r5
 8008154:	00a4      	lsls	r4, r4, #2
 8008156:	1914      	adds	r4, r2, r4
 8008158:	692a      	ldr	r2, [r5, #16]
 800815a:	3314      	adds	r3, #20
 800815c:	0092      	lsls	r2, r2, #2
 800815e:	189a      	adds	r2, r3, r2
 8008160:	4694      	mov	ip, r2
 8008162:	221f      	movs	r2, #31
 8008164:	4017      	ands	r7, r2
 8008166:	d024      	beq.n	80081b2 <__lshift+0x9a>
 8008168:	3201      	adds	r2, #1
 800816a:	1bd2      	subs	r2, r2, r7
 800816c:	9203      	str	r2, [sp, #12]
 800816e:	2200      	movs	r2, #0
 8008170:	6819      	ldr	r1, [r3, #0]
 8008172:	0020      	movs	r0, r4
 8008174:	40b9      	lsls	r1, r7
 8008176:	430a      	orrs	r2, r1
 8008178:	c404      	stmia	r4!, {r2}
 800817a:	cb04      	ldmia	r3!, {r2}
 800817c:	9903      	ldr	r1, [sp, #12]
 800817e:	40ca      	lsrs	r2, r1
 8008180:	459c      	cmp	ip, r3
 8008182:	d8f5      	bhi.n	8008170 <__lshift+0x58>
 8008184:	6042      	str	r2, [r0, #4]
 8008186:	2a00      	cmp	r2, #0
 8008188:	d002      	beq.n	8008190 <__lshift+0x78>
 800818a:	9b01      	ldr	r3, [sp, #4]
 800818c:	3302      	adds	r3, #2
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	9b00      	ldr	r3, [sp, #0]
 8008192:	9802      	ldr	r0, [sp, #8]
 8008194:	3b01      	subs	r3, #1
 8008196:	6133      	str	r3, [r6, #16]
 8008198:	0029      	movs	r1, r5
 800819a:	f7ff fe33 	bl	8007e04 <_Bfree>
 800819e:	0030      	movs	r0, r6
 80081a0:	b005      	add	sp, #20
 80081a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a4:	3101      	adds	r1, #1
 80081a6:	005b      	lsls	r3, r3, #1
 80081a8:	e7c3      	b.n	8008132 <__lshift+0x1a>
 80081aa:	0098      	lsls	r0, r3, #2
 80081ac:	5011      	str	r1, [r2, r0]
 80081ae:	3301      	adds	r3, #1
 80081b0:	e7ca      	b.n	8008148 <__lshift+0x30>
 80081b2:	cb04      	ldmia	r3!, {r2}
 80081b4:	c404      	stmia	r4!, {r2}
 80081b6:	459c      	cmp	ip, r3
 80081b8:	d8fb      	bhi.n	80081b2 <__lshift+0x9a>
 80081ba:	e7e9      	b.n	8008190 <__lshift+0x78>

080081bc <__mcmp>:
 80081bc:	690a      	ldr	r2, [r1, #16]
 80081be:	6903      	ldr	r3, [r0, #16]
 80081c0:	b530      	push	{r4, r5, lr}
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	d10d      	bne.n	80081e2 <__mcmp+0x26>
 80081c6:	0092      	lsls	r2, r2, #2
 80081c8:	3014      	adds	r0, #20
 80081ca:	3114      	adds	r1, #20
 80081cc:	1884      	adds	r4, r0, r2
 80081ce:	1889      	adds	r1, r1, r2
 80081d0:	3c04      	subs	r4, #4
 80081d2:	3904      	subs	r1, #4
 80081d4:	6825      	ldr	r5, [r4, #0]
 80081d6:	680a      	ldr	r2, [r1, #0]
 80081d8:	4295      	cmp	r5, r2
 80081da:	d004      	beq.n	80081e6 <__mcmp+0x2a>
 80081dc:	2301      	movs	r3, #1
 80081de:	4295      	cmp	r5, r2
 80081e0:	d304      	bcc.n	80081ec <__mcmp+0x30>
 80081e2:	0018      	movs	r0, r3
 80081e4:	bd30      	pop	{r4, r5, pc}
 80081e6:	42a0      	cmp	r0, r4
 80081e8:	d3f2      	bcc.n	80081d0 <__mcmp+0x14>
 80081ea:	e7fa      	b.n	80081e2 <__mcmp+0x26>
 80081ec:	425b      	negs	r3, r3
 80081ee:	e7f8      	b.n	80081e2 <__mcmp+0x26>

080081f0 <__mdiff>:
 80081f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f2:	000d      	movs	r5, r1
 80081f4:	b085      	sub	sp, #20
 80081f6:	0007      	movs	r7, r0
 80081f8:	0011      	movs	r1, r2
 80081fa:	0028      	movs	r0, r5
 80081fc:	0014      	movs	r4, r2
 80081fe:	f7ff ffdd 	bl	80081bc <__mcmp>
 8008202:	1e06      	subs	r6, r0, #0
 8008204:	d108      	bne.n	8008218 <__mdiff+0x28>
 8008206:	0001      	movs	r1, r0
 8008208:	0038      	movs	r0, r7
 800820a:	f7ff fdc3 	bl	8007d94 <_Balloc>
 800820e:	2301      	movs	r3, #1
 8008210:	6146      	str	r6, [r0, #20]
 8008212:	6103      	str	r3, [r0, #16]
 8008214:	b005      	add	sp, #20
 8008216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008218:	2301      	movs	r3, #1
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	2800      	cmp	r0, #0
 800821e:	db04      	blt.n	800822a <__mdiff+0x3a>
 8008220:	0023      	movs	r3, r4
 8008222:	002c      	movs	r4, r5
 8008224:	001d      	movs	r5, r3
 8008226:	2300      	movs	r3, #0
 8008228:	9301      	str	r3, [sp, #4]
 800822a:	6861      	ldr	r1, [r4, #4]
 800822c:	0038      	movs	r0, r7
 800822e:	f7ff fdb1 	bl	8007d94 <_Balloc>
 8008232:	002f      	movs	r7, r5
 8008234:	2200      	movs	r2, #0
 8008236:	9b01      	ldr	r3, [sp, #4]
 8008238:	6926      	ldr	r6, [r4, #16]
 800823a:	60c3      	str	r3, [r0, #12]
 800823c:	3414      	adds	r4, #20
 800823e:	00b3      	lsls	r3, r6, #2
 8008240:	18e3      	adds	r3, r4, r3
 8008242:	9302      	str	r3, [sp, #8]
 8008244:	692b      	ldr	r3, [r5, #16]
 8008246:	3714      	adds	r7, #20
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	18fb      	adds	r3, r7, r3
 800824c:	9303      	str	r3, [sp, #12]
 800824e:	0003      	movs	r3, r0
 8008250:	4694      	mov	ip, r2
 8008252:	3314      	adds	r3, #20
 8008254:	cc20      	ldmia	r4!, {r5}
 8008256:	cf04      	ldmia	r7!, {r2}
 8008258:	9201      	str	r2, [sp, #4]
 800825a:	b2aa      	uxth	r2, r5
 800825c:	4494      	add	ip, r2
 800825e:	466a      	mov	r2, sp
 8008260:	4661      	mov	r1, ip
 8008262:	8892      	ldrh	r2, [r2, #4]
 8008264:	0c2d      	lsrs	r5, r5, #16
 8008266:	1a8a      	subs	r2, r1, r2
 8008268:	9901      	ldr	r1, [sp, #4]
 800826a:	0c09      	lsrs	r1, r1, #16
 800826c:	1a69      	subs	r1, r5, r1
 800826e:	1415      	asrs	r5, r2, #16
 8008270:	1949      	adds	r1, r1, r5
 8008272:	140d      	asrs	r5, r1, #16
 8008274:	b292      	uxth	r2, r2
 8008276:	0409      	lsls	r1, r1, #16
 8008278:	430a      	orrs	r2, r1
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	9a03      	ldr	r2, [sp, #12]
 800827e:	46ac      	mov	ip, r5
 8008280:	3304      	adds	r3, #4
 8008282:	42ba      	cmp	r2, r7
 8008284:	d8e6      	bhi.n	8008254 <__mdiff+0x64>
 8008286:	9902      	ldr	r1, [sp, #8]
 8008288:	001a      	movs	r2, r3
 800828a:	428c      	cmp	r4, r1
 800828c:	d305      	bcc.n	800829a <__mdiff+0xaa>
 800828e:	3a04      	subs	r2, #4
 8008290:	6813      	ldr	r3, [r2, #0]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d00e      	beq.n	80082b4 <__mdiff+0xc4>
 8008296:	6106      	str	r6, [r0, #16]
 8008298:	e7bc      	b.n	8008214 <__mdiff+0x24>
 800829a:	cc04      	ldmia	r4!, {r2}
 800829c:	b291      	uxth	r1, r2
 800829e:	4461      	add	r1, ip
 80082a0:	140d      	asrs	r5, r1, #16
 80082a2:	0c12      	lsrs	r2, r2, #16
 80082a4:	1952      	adds	r2, r2, r5
 80082a6:	1415      	asrs	r5, r2, #16
 80082a8:	b289      	uxth	r1, r1
 80082aa:	0412      	lsls	r2, r2, #16
 80082ac:	430a      	orrs	r2, r1
 80082ae:	46ac      	mov	ip, r5
 80082b0:	c304      	stmia	r3!, {r2}
 80082b2:	e7e8      	b.n	8008286 <__mdiff+0x96>
 80082b4:	3e01      	subs	r6, #1
 80082b6:	e7ea      	b.n	800828e <__mdiff+0x9e>

080082b8 <__d2b>:
 80082b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082ba:	001d      	movs	r5, r3
 80082bc:	2101      	movs	r1, #1
 80082be:	0014      	movs	r4, r2
 80082c0:	9f08      	ldr	r7, [sp, #32]
 80082c2:	f7ff fd67 	bl	8007d94 <_Balloc>
 80082c6:	032b      	lsls	r3, r5, #12
 80082c8:	006d      	lsls	r5, r5, #1
 80082ca:	0006      	movs	r6, r0
 80082cc:	0b1b      	lsrs	r3, r3, #12
 80082ce:	0d6d      	lsrs	r5, r5, #21
 80082d0:	d124      	bne.n	800831c <__d2b+0x64>
 80082d2:	9301      	str	r3, [sp, #4]
 80082d4:	2c00      	cmp	r4, #0
 80082d6:	d027      	beq.n	8008328 <__d2b+0x70>
 80082d8:	4668      	mov	r0, sp
 80082da:	9400      	str	r4, [sp, #0]
 80082dc:	f7ff fe03 	bl	8007ee6 <__lo0bits>
 80082e0:	9c00      	ldr	r4, [sp, #0]
 80082e2:	2800      	cmp	r0, #0
 80082e4:	d01e      	beq.n	8008324 <__d2b+0x6c>
 80082e6:	9b01      	ldr	r3, [sp, #4]
 80082e8:	2120      	movs	r1, #32
 80082ea:	001a      	movs	r2, r3
 80082ec:	1a09      	subs	r1, r1, r0
 80082ee:	408a      	lsls	r2, r1
 80082f0:	40c3      	lsrs	r3, r0
 80082f2:	4322      	orrs	r2, r4
 80082f4:	6172      	str	r2, [r6, #20]
 80082f6:	9301      	str	r3, [sp, #4]
 80082f8:	9c01      	ldr	r4, [sp, #4]
 80082fa:	61b4      	str	r4, [r6, #24]
 80082fc:	1e63      	subs	r3, r4, #1
 80082fe:	419c      	sbcs	r4, r3
 8008300:	3401      	adds	r4, #1
 8008302:	6134      	str	r4, [r6, #16]
 8008304:	2d00      	cmp	r5, #0
 8008306:	d018      	beq.n	800833a <__d2b+0x82>
 8008308:	4b12      	ldr	r3, [pc, #72]	; (8008354 <__d2b+0x9c>)
 800830a:	18ed      	adds	r5, r5, r3
 800830c:	2335      	movs	r3, #53	; 0x35
 800830e:	182d      	adds	r5, r5, r0
 8008310:	603d      	str	r5, [r7, #0]
 8008312:	1a18      	subs	r0, r3, r0
 8008314:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008316:	6018      	str	r0, [r3, #0]
 8008318:	0030      	movs	r0, r6
 800831a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800831c:	2280      	movs	r2, #128	; 0x80
 800831e:	0352      	lsls	r2, r2, #13
 8008320:	4313      	orrs	r3, r2
 8008322:	e7d6      	b.n	80082d2 <__d2b+0x1a>
 8008324:	6174      	str	r4, [r6, #20]
 8008326:	e7e7      	b.n	80082f8 <__d2b+0x40>
 8008328:	a801      	add	r0, sp, #4
 800832a:	f7ff fddc 	bl	8007ee6 <__lo0bits>
 800832e:	2401      	movs	r4, #1
 8008330:	9b01      	ldr	r3, [sp, #4]
 8008332:	6134      	str	r4, [r6, #16]
 8008334:	6173      	str	r3, [r6, #20]
 8008336:	3020      	adds	r0, #32
 8008338:	e7e4      	b.n	8008304 <__d2b+0x4c>
 800833a:	4b07      	ldr	r3, [pc, #28]	; (8008358 <__d2b+0xa0>)
 800833c:	18c0      	adds	r0, r0, r3
 800833e:	4b07      	ldr	r3, [pc, #28]	; (800835c <__d2b+0xa4>)
 8008340:	6038      	str	r0, [r7, #0]
 8008342:	18e3      	adds	r3, r4, r3
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	18f3      	adds	r3, r6, r3
 8008348:	6958      	ldr	r0, [r3, #20]
 800834a:	f7ff fdb2 	bl	8007eb2 <__hi0bits>
 800834e:	0164      	lsls	r4, r4, #5
 8008350:	1a20      	subs	r0, r4, r0
 8008352:	e7df      	b.n	8008314 <__d2b+0x5c>
 8008354:	fffffbcd 	.word	0xfffffbcd
 8008358:	fffffbce 	.word	0xfffffbce
 800835c:	3fffffff 	.word	0x3fffffff

08008360 <_calloc_r>:
 8008360:	434a      	muls	r2, r1
 8008362:	b570      	push	{r4, r5, r6, lr}
 8008364:	0011      	movs	r1, r2
 8008366:	0014      	movs	r4, r2
 8008368:	f000 f852 	bl	8008410 <_malloc_r>
 800836c:	1e05      	subs	r5, r0, #0
 800836e:	d003      	beq.n	8008378 <_calloc_r+0x18>
 8008370:	0022      	movs	r2, r4
 8008372:	2100      	movs	r1, #0
 8008374:	f7fe f9f8 	bl	8006768 <memset>
 8008378:	0028      	movs	r0, r5
 800837a:	bd70      	pop	{r4, r5, r6, pc}

0800837c <_free_r>:
 800837c:	b570      	push	{r4, r5, r6, lr}
 800837e:	0005      	movs	r5, r0
 8008380:	2900      	cmp	r1, #0
 8008382:	d010      	beq.n	80083a6 <_free_r+0x2a>
 8008384:	1f0c      	subs	r4, r1, #4
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	da00      	bge.n	800838e <_free_r+0x12>
 800838c:	18e4      	adds	r4, r4, r3
 800838e:	0028      	movs	r0, r5
 8008390:	f000 fa33 	bl	80087fa <__malloc_lock>
 8008394:	4a1d      	ldr	r2, [pc, #116]	; (800840c <_free_r+0x90>)
 8008396:	6813      	ldr	r3, [r2, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d105      	bne.n	80083a8 <_free_r+0x2c>
 800839c:	6063      	str	r3, [r4, #4]
 800839e:	6014      	str	r4, [r2, #0]
 80083a0:	0028      	movs	r0, r5
 80083a2:	f000 fa2b 	bl	80087fc <__malloc_unlock>
 80083a6:	bd70      	pop	{r4, r5, r6, pc}
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	d909      	bls.n	80083c0 <_free_r+0x44>
 80083ac:	6821      	ldr	r1, [r4, #0]
 80083ae:	1860      	adds	r0, r4, r1
 80083b0:	4283      	cmp	r3, r0
 80083b2:	d1f3      	bne.n	800839c <_free_r+0x20>
 80083b4:	6818      	ldr	r0, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	1841      	adds	r1, r0, r1
 80083ba:	6021      	str	r1, [r4, #0]
 80083bc:	e7ee      	b.n	800839c <_free_r+0x20>
 80083be:	0013      	movs	r3, r2
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	2a00      	cmp	r2, #0
 80083c4:	d001      	beq.n	80083ca <_free_r+0x4e>
 80083c6:	42a2      	cmp	r2, r4
 80083c8:	d9f9      	bls.n	80083be <_free_r+0x42>
 80083ca:	6819      	ldr	r1, [r3, #0]
 80083cc:	1858      	adds	r0, r3, r1
 80083ce:	42a0      	cmp	r0, r4
 80083d0:	d10b      	bne.n	80083ea <_free_r+0x6e>
 80083d2:	6820      	ldr	r0, [r4, #0]
 80083d4:	1809      	adds	r1, r1, r0
 80083d6:	1858      	adds	r0, r3, r1
 80083d8:	6019      	str	r1, [r3, #0]
 80083da:	4282      	cmp	r2, r0
 80083dc:	d1e0      	bne.n	80083a0 <_free_r+0x24>
 80083de:	6810      	ldr	r0, [r2, #0]
 80083e0:	6852      	ldr	r2, [r2, #4]
 80083e2:	1841      	adds	r1, r0, r1
 80083e4:	6019      	str	r1, [r3, #0]
 80083e6:	605a      	str	r2, [r3, #4]
 80083e8:	e7da      	b.n	80083a0 <_free_r+0x24>
 80083ea:	42a0      	cmp	r0, r4
 80083ec:	d902      	bls.n	80083f4 <_free_r+0x78>
 80083ee:	230c      	movs	r3, #12
 80083f0:	602b      	str	r3, [r5, #0]
 80083f2:	e7d5      	b.n	80083a0 <_free_r+0x24>
 80083f4:	6821      	ldr	r1, [r4, #0]
 80083f6:	1860      	adds	r0, r4, r1
 80083f8:	4282      	cmp	r2, r0
 80083fa:	d103      	bne.n	8008404 <_free_r+0x88>
 80083fc:	6810      	ldr	r0, [r2, #0]
 80083fe:	6852      	ldr	r2, [r2, #4]
 8008400:	1841      	adds	r1, r0, r1
 8008402:	6021      	str	r1, [r4, #0]
 8008404:	6062      	str	r2, [r4, #4]
 8008406:	605c      	str	r4, [r3, #4]
 8008408:	e7ca      	b.n	80083a0 <_free_r+0x24>
 800840a:	46c0      	nop			; (mov r8, r8)
 800840c:	20000418 	.word	0x20000418

08008410 <_malloc_r>:
 8008410:	2303      	movs	r3, #3
 8008412:	b570      	push	{r4, r5, r6, lr}
 8008414:	1ccd      	adds	r5, r1, #3
 8008416:	439d      	bics	r5, r3
 8008418:	3508      	adds	r5, #8
 800841a:	0006      	movs	r6, r0
 800841c:	2d0c      	cmp	r5, #12
 800841e:	d21e      	bcs.n	800845e <_malloc_r+0x4e>
 8008420:	250c      	movs	r5, #12
 8008422:	42a9      	cmp	r1, r5
 8008424:	d81d      	bhi.n	8008462 <_malloc_r+0x52>
 8008426:	0030      	movs	r0, r6
 8008428:	f000 f9e7 	bl	80087fa <__malloc_lock>
 800842c:	4a25      	ldr	r2, [pc, #148]	; (80084c4 <_malloc_r+0xb4>)
 800842e:	6814      	ldr	r4, [r2, #0]
 8008430:	0021      	movs	r1, r4
 8008432:	2900      	cmp	r1, #0
 8008434:	d119      	bne.n	800846a <_malloc_r+0x5a>
 8008436:	4c24      	ldr	r4, [pc, #144]	; (80084c8 <_malloc_r+0xb8>)
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d103      	bne.n	8008446 <_malloc_r+0x36>
 800843e:	0030      	movs	r0, r6
 8008440:	f000 f9a4 	bl	800878c <_sbrk_r>
 8008444:	6020      	str	r0, [r4, #0]
 8008446:	0029      	movs	r1, r5
 8008448:	0030      	movs	r0, r6
 800844a:	f000 f99f 	bl	800878c <_sbrk_r>
 800844e:	1c43      	adds	r3, r0, #1
 8008450:	d12b      	bne.n	80084aa <_malloc_r+0x9a>
 8008452:	230c      	movs	r3, #12
 8008454:	0030      	movs	r0, r6
 8008456:	6033      	str	r3, [r6, #0]
 8008458:	f000 f9d0 	bl	80087fc <__malloc_unlock>
 800845c:	e003      	b.n	8008466 <_malloc_r+0x56>
 800845e:	2d00      	cmp	r5, #0
 8008460:	dadf      	bge.n	8008422 <_malloc_r+0x12>
 8008462:	230c      	movs	r3, #12
 8008464:	6033      	str	r3, [r6, #0]
 8008466:	2000      	movs	r0, #0
 8008468:	bd70      	pop	{r4, r5, r6, pc}
 800846a:	680b      	ldr	r3, [r1, #0]
 800846c:	1b5b      	subs	r3, r3, r5
 800846e:	d419      	bmi.n	80084a4 <_malloc_r+0x94>
 8008470:	2b0b      	cmp	r3, #11
 8008472:	d903      	bls.n	800847c <_malloc_r+0x6c>
 8008474:	600b      	str	r3, [r1, #0]
 8008476:	18cc      	adds	r4, r1, r3
 8008478:	6025      	str	r5, [r4, #0]
 800847a:	e003      	b.n	8008484 <_malloc_r+0x74>
 800847c:	684b      	ldr	r3, [r1, #4]
 800847e:	428c      	cmp	r4, r1
 8008480:	d10d      	bne.n	800849e <_malloc_r+0x8e>
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	0030      	movs	r0, r6
 8008486:	f000 f9b9 	bl	80087fc <__malloc_unlock>
 800848a:	0020      	movs	r0, r4
 800848c:	2207      	movs	r2, #7
 800848e:	300b      	adds	r0, #11
 8008490:	1d23      	adds	r3, r4, #4
 8008492:	4390      	bics	r0, r2
 8008494:	1ac3      	subs	r3, r0, r3
 8008496:	d0e7      	beq.n	8008468 <_malloc_r+0x58>
 8008498:	425a      	negs	r2, r3
 800849a:	50e2      	str	r2, [r4, r3]
 800849c:	e7e4      	b.n	8008468 <_malloc_r+0x58>
 800849e:	6063      	str	r3, [r4, #4]
 80084a0:	000c      	movs	r4, r1
 80084a2:	e7ef      	b.n	8008484 <_malloc_r+0x74>
 80084a4:	000c      	movs	r4, r1
 80084a6:	6849      	ldr	r1, [r1, #4]
 80084a8:	e7c3      	b.n	8008432 <_malloc_r+0x22>
 80084aa:	2303      	movs	r3, #3
 80084ac:	1cc4      	adds	r4, r0, #3
 80084ae:	439c      	bics	r4, r3
 80084b0:	42a0      	cmp	r0, r4
 80084b2:	d0e1      	beq.n	8008478 <_malloc_r+0x68>
 80084b4:	1a21      	subs	r1, r4, r0
 80084b6:	0030      	movs	r0, r6
 80084b8:	f000 f968 	bl	800878c <_sbrk_r>
 80084bc:	1c43      	adds	r3, r0, #1
 80084be:	d1db      	bne.n	8008478 <_malloc_r+0x68>
 80084c0:	e7c7      	b.n	8008452 <_malloc_r+0x42>
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	20000418 	.word	0x20000418
 80084c8:	2000041c 	.word	0x2000041c

080084cc <__ssputs_r>:
 80084cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084ce:	688e      	ldr	r6, [r1, #8]
 80084d0:	b085      	sub	sp, #20
 80084d2:	0007      	movs	r7, r0
 80084d4:	000c      	movs	r4, r1
 80084d6:	9203      	str	r2, [sp, #12]
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	429e      	cmp	r6, r3
 80084dc:	d83c      	bhi.n	8008558 <__ssputs_r+0x8c>
 80084de:	2390      	movs	r3, #144	; 0x90
 80084e0:	898a      	ldrh	r2, [r1, #12]
 80084e2:	00db      	lsls	r3, r3, #3
 80084e4:	421a      	tst	r2, r3
 80084e6:	d034      	beq.n	8008552 <__ssputs_r+0x86>
 80084e8:	2503      	movs	r5, #3
 80084ea:	6909      	ldr	r1, [r1, #16]
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	1a5b      	subs	r3, r3, r1
 80084f0:	9302      	str	r3, [sp, #8]
 80084f2:	6963      	ldr	r3, [r4, #20]
 80084f4:	9802      	ldr	r0, [sp, #8]
 80084f6:	435d      	muls	r5, r3
 80084f8:	0feb      	lsrs	r3, r5, #31
 80084fa:	195d      	adds	r5, r3, r5
 80084fc:	9b01      	ldr	r3, [sp, #4]
 80084fe:	106d      	asrs	r5, r5, #1
 8008500:	3301      	adds	r3, #1
 8008502:	181b      	adds	r3, r3, r0
 8008504:	42ab      	cmp	r3, r5
 8008506:	d900      	bls.n	800850a <__ssputs_r+0x3e>
 8008508:	001d      	movs	r5, r3
 800850a:	0553      	lsls	r3, r2, #21
 800850c:	d532      	bpl.n	8008574 <__ssputs_r+0xa8>
 800850e:	0029      	movs	r1, r5
 8008510:	0038      	movs	r0, r7
 8008512:	f7ff ff7d 	bl	8008410 <_malloc_r>
 8008516:	1e06      	subs	r6, r0, #0
 8008518:	d109      	bne.n	800852e <__ssputs_r+0x62>
 800851a:	230c      	movs	r3, #12
 800851c:	603b      	str	r3, [r7, #0]
 800851e:	2340      	movs	r3, #64	; 0x40
 8008520:	2001      	movs	r0, #1
 8008522:	89a2      	ldrh	r2, [r4, #12]
 8008524:	4240      	negs	r0, r0
 8008526:	4313      	orrs	r3, r2
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	b005      	add	sp, #20
 800852c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800852e:	9a02      	ldr	r2, [sp, #8]
 8008530:	6921      	ldr	r1, [r4, #16]
 8008532:	f7ff fc26 	bl	8007d82 <memcpy>
 8008536:	89a3      	ldrh	r3, [r4, #12]
 8008538:	4a14      	ldr	r2, [pc, #80]	; (800858c <__ssputs_r+0xc0>)
 800853a:	401a      	ands	r2, r3
 800853c:	2380      	movs	r3, #128	; 0x80
 800853e:	4313      	orrs	r3, r2
 8008540:	81a3      	strh	r3, [r4, #12]
 8008542:	9b02      	ldr	r3, [sp, #8]
 8008544:	6126      	str	r6, [r4, #16]
 8008546:	18f6      	adds	r6, r6, r3
 8008548:	6026      	str	r6, [r4, #0]
 800854a:	6165      	str	r5, [r4, #20]
 800854c:	9e01      	ldr	r6, [sp, #4]
 800854e:	1aed      	subs	r5, r5, r3
 8008550:	60a5      	str	r5, [r4, #8]
 8008552:	9b01      	ldr	r3, [sp, #4]
 8008554:	429e      	cmp	r6, r3
 8008556:	d900      	bls.n	800855a <__ssputs_r+0x8e>
 8008558:	9e01      	ldr	r6, [sp, #4]
 800855a:	0032      	movs	r2, r6
 800855c:	9903      	ldr	r1, [sp, #12]
 800855e:	6820      	ldr	r0, [r4, #0]
 8008560:	f000 f938 	bl	80087d4 <memmove>
 8008564:	68a3      	ldr	r3, [r4, #8]
 8008566:	2000      	movs	r0, #0
 8008568:	1b9b      	subs	r3, r3, r6
 800856a:	60a3      	str	r3, [r4, #8]
 800856c:	6823      	ldr	r3, [r4, #0]
 800856e:	199e      	adds	r6, r3, r6
 8008570:	6026      	str	r6, [r4, #0]
 8008572:	e7da      	b.n	800852a <__ssputs_r+0x5e>
 8008574:	002a      	movs	r2, r5
 8008576:	0038      	movs	r0, r7
 8008578:	f000 f941 	bl	80087fe <_realloc_r>
 800857c:	1e06      	subs	r6, r0, #0
 800857e:	d1e0      	bne.n	8008542 <__ssputs_r+0x76>
 8008580:	6921      	ldr	r1, [r4, #16]
 8008582:	0038      	movs	r0, r7
 8008584:	f7ff fefa 	bl	800837c <_free_r>
 8008588:	e7c7      	b.n	800851a <__ssputs_r+0x4e>
 800858a:	46c0      	nop			; (mov r8, r8)
 800858c:	fffffb7f 	.word	0xfffffb7f

08008590 <_svfiprintf_r>:
 8008590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008592:	b0a1      	sub	sp, #132	; 0x84
 8008594:	9003      	str	r0, [sp, #12]
 8008596:	001d      	movs	r5, r3
 8008598:	898b      	ldrh	r3, [r1, #12]
 800859a:	000f      	movs	r7, r1
 800859c:	0016      	movs	r6, r2
 800859e:	061b      	lsls	r3, r3, #24
 80085a0:	d511      	bpl.n	80085c6 <_svfiprintf_r+0x36>
 80085a2:	690b      	ldr	r3, [r1, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10e      	bne.n	80085c6 <_svfiprintf_r+0x36>
 80085a8:	2140      	movs	r1, #64	; 0x40
 80085aa:	f7ff ff31 	bl	8008410 <_malloc_r>
 80085ae:	6038      	str	r0, [r7, #0]
 80085b0:	6138      	str	r0, [r7, #16]
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d105      	bne.n	80085c2 <_svfiprintf_r+0x32>
 80085b6:	230c      	movs	r3, #12
 80085b8:	9a03      	ldr	r2, [sp, #12]
 80085ba:	3801      	subs	r0, #1
 80085bc:	6013      	str	r3, [r2, #0]
 80085be:	b021      	add	sp, #132	; 0x84
 80085c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085c2:	2340      	movs	r3, #64	; 0x40
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	2300      	movs	r3, #0
 80085c8:	ac08      	add	r4, sp, #32
 80085ca:	6163      	str	r3, [r4, #20]
 80085cc:	3320      	adds	r3, #32
 80085ce:	7663      	strb	r3, [r4, #25]
 80085d0:	3310      	adds	r3, #16
 80085d2:	76a3      	strb	r3, [r4, #26]
 80085d4:	9507      	str	r5, [sp, #28]
 80085d6:	0035      	movs	r5, r6
 80085d8:	782b      	ldrb	r3, [r5, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <_svfiprintf_r+0x52>
 80085de:	2b25      	cmp	r3, #37	; 0x25
 80085e0:	d146      	bne.n	8008670 <_svfiprintf_r+0xe0>
 80085e2:	1bab      	subs	r3, r5, r6
 80085e4:	9305      	str	r3, [sp, #20]
 80085e6:	d00c      	beq.n	8008602 <_svfiprintf_r+0x72>
 80085e8:	0032      	movs	r2, r6
 80085ea:	0039      	movs	r1, r7
 80085ec:	9803      	ldr	r0, [sp, #12]
 80085ee:	f7ff ff6d 	bl	80084cc <__ssputs_r>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	d100      	bne.n	80085f8 <_svfiprintf_r+0x68>
 80085f6:	e0ae      	b.n	8008756 <_svfiprintf_r+0x1c6>
 80085f8:	6962      	ldr	r2, [r4, #20]
 80085fa:	9b05      	ldr	r3, [sp, #20]
 80085fc:	4694      	mov	ip, r2
 80085fe:	4463      	add	r3, ip
 8008600:	6163      	str	r3, [r4, #20]
 8008602:	782b      	ldrb	r3, [r5, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d100      	bne.n	800860a <_svfiprintf_r+0x7a>
 8008608:	e0a5      	b.n	8008756 <_svfiprintf_r+0x1c6>
 800860a:	2201      	movs	r2, #1
 800860c:	2300      	movs	r3, #0
 800860e:	4252      	negs	r2, r2
 8008610:	6062      	str	r2, [r4, #4]
 8008612:	a904      	add	r1, sp, #16
 8008614:	3254      	adds	r2, #84	; 0x54
 8008616:	1852      	adds	r2, r2, r1
 8008618:	1c6e      	adds	r6, r5, #1
 800861a:	6023      	str	r3, [r4, #0]
 800861c:	60e3      	str	r3, [r4, #12]
 800861e:	60a3      	str	r3, [r4, #8]
 8008620:	7013      	strb	r3, [r2, #0]
 8008622:	65a3      	str	r3, [r4, #88]	; 0x58
 8008624:	7831      	ldrb	r1, [r6, #0]
 8008626:	2205      	movs	r2, #5
 8008628:	4853      	ldr	r0, [pc, #332]	; (8008778 <_svfiprintf_r+0x1e8>)
 800862a:	f7ff fb9f 	bl	8007d6c <memchr>
 800862e:	1c75      	adds	r5, r6, #1
 8008630:	2800      	cmp	r0, #0
 8008632:	d11f      	bne.n	8008674 <_svfiprintf_r+0xe4>
 8008634:	6822      	ldr	r2, [r4, #0]
 8008636:	06d3      	lsls	r3, r2, #27
 8008638:	d504      	bpl.n	8008644 <_svfiprintf_r+0xb4>
 800863a:	2353      	movs	r3, #83	; 0x53
 800863c:	a904      	add	r1, sp, #16
 800863e:	185b      	adds	r3, r3, r1
 8008640:	2120      	movs	r1, #32
 8008642:	7019      	strb	r1, [r3, #0]
 8008644:	0713      	lsls	r3, r2, #28
 8008646:	d504      	bpl.n	8008652 <_svfiprintf_r+0xc2>
 8008648:	2353      	movs	r3, #83	; 0x53
 800864a:	a904      	add	r1, sp, #16
 800864c:	185b      	adds	r3, r3, r1
 800864e:	212b      	movs	r1, #43	; 0x2b
 8008650:	7019      	strb	r1, [r3, #0]
 8008652:	7833      	ldrb	r3, [r6, #0]
 8008654:	2b2a      	cmp	r3, #42	; 0x2a
 8008656:	d016      	beq.n	8008686 <_svfiprintf_r+0xf6>
 8008658:	0035      	movs	r5, r6
 800865a:	2100      	movs	r1, #0
 800865c:	200a      	movs	r0, #10
 800865e:	68e3      	ldr	r3, [r4, #12]
 8008660:	782a      	ldrb	r2, [r5, #0]
 8008662:	1c6e      	adds	r6, r5, #1
 8008664:	3a30      	subs	r2, #48	; 0x30
 8008666:	2a09      	cmp	r2, #9
 8008668:	d94e      	bls.n	8008708 <_svfiprintf_r+0x178>
 800866a:	2900      	cmp	r1, #0
 800866c:	d018      	beq.n	80086a0 <_svfiprintf_r+0x110>
 800866e:	e010      	b.n	8008692 <_svfiprintf_r+0x102>
 8008670:	3501      	adds	r5, #1
 8008672:	e7b1      	b.n	80085d8 <_svfiprintf_r+0x48>
 8008674:	4b40      	ldr	r3, [pc, #256]	; (8008778 <_svfiprintf_r+0x1e8>)
 8008676:	6822      	ldr	r2, [r4, #0]
 8008678:	1ac0      	subs	r0, r0, r3
 800867a:	2301      	movs	r3, #1
 800867c:	4083      	lsls	r3, r0
 800867e:	4313      	orrs	r3, r2
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	002e      	movs	r6, r5
 8008684:	e7ce      	b.n	8008624 <_svfiprintf_r+0x94>
 8008686:	9b07      	ldr	r3, [sp, #28]
 8008688:	1d19      	adds	r1, r3, #4
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	9107      	str	r1, [sp, #28]
 800868e:	2b00      	cmp	r3, #0
 8008690:	db01      	blt.n	8008696 <_svfiprintf_r+0x106>
 8008692:	930b      	str	r3, [sp, #44]	; 0x2c
 8008694:	e004      	b.n	80086a0 <_svfiprintf_r+0x110>
 8008696:	425b      	negs	r3, r3
 8008698:	60e3      	str	r3, [r4, #12]
 800869a:	2302      	movs	r3, #2
 800869c:	4313      	orrs	r3, r2
 800869e:	6023      	str	r3, [r4, #0]
 80086a0:	782b      	ldrb	r3, [r5, #0]
 80086a2:	2b2e      	cmp	r3, #46	; 0x2e
 80086a4:	d10a      	bne.n	80086bc <_svfiprintf_r+0x12c>
 80086a6:	786b      	ldrb	r3, [r5, #1]
 80086a8:	2b2a      	cmp	r3, #42	; 0x2a
 80086aa:	d135      	bne.n	8008718 <_svfiprintf_r+0x188>
 80086ac:	9b07      	ldr	r3, [sp, #28]
 80086ae:	3502      	adds	r5, #2
 80086b0:	1d1a      	adds	r2, r3, #4
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	9207      	str	r2, [sp, #28]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	db2b      	blt.n	8008712 <_svfiprintf_r+0x182>
 80086ba:	9309      	str	r3, [sp, #36]	; 0x24
 80086bc:	4e2f      	ldr	r6, [pc, #188]	; (800877c <_svfiprintf_r+0x1ec>)
 80086be:	7829      	ldrb	r1, [r5, #0]
 80086c0:	2203      	movs	r2, #3
 80086c2:	0030      	movs	r0, r6
 80086c4:	f7ff fb52 	bl	8007d6c <memchr>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d006      	beq.n	80086da <_svfiprintf_r+0x14a>
 80086cc:	2340      	movs	r3, #64	; 0x40
 80086ce:	1b80      	subs	r0, r0, r6
 80086d0:	4083      	lsls	r3, r0
 80086d2:	6822      	ldr	r2, [r4, #0]
 80086d4:	3501      	adds	r5, #1
 80086d6:	4313      	orrs	r3, r2
 80086d8:	6023      	str	r3, [r4, #0]
 80086da:	7829      	ldrb	r1, [r5, #0]
 80086dc:	2206      	movs	r2, #6
 80086de:	4828      	ldr	r0, [pc, #160]	; (8008780 <_svfiprintf_r+0x1f0>)
 80086e0:	1c6e      	adds	r6, r5, #1
 80086e2:	7621      	strb	r1, [r4, #24]
 80086e4:	f7ff fb42 	bl	8007d6c <memchr>
 80086e8:	2800      	cmp	r0, #0
 80086ea:	d03c      	beq.n	8008766 <_svfiprintf_r+0x1d6>
 80086ec:	4b25      	ldr	r3, [pc, #148]	; (8008784 <_svfiprintf_r+0x1f4>)
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d125      	bne.n	800873e <_svfiprintf_r+0x1ae>
 80086f2:	2207      	movs	r2, #7
 80086f4:	9b07      	ldr	r3, [sp, #28]
 80086f6:	3307      	adds	r3, #7
 80086f8:	4393      	bics	r3, r2
 80086fa:	3308      	adds	r3, #8
 80086fc:	9307      	str	r3, [sp, #28]
 80086fe:	6963      	ldr	r3, [r4, #20]
 8008700:	9a04      	ldr	r2, [sp, #16]
 8008702:	189b      	adds	r3, r3, r2
 8008704:	6163      	str	r3, [r4, #20]
 8008706:	e766      	b.n	80085d6 <_svfiprintf_r+0x46>
 8008708:	4343      	muls	r3, r0
 800870a:	2101      	movs	r1, #1
 800870c:	189b      	adds	r3, r3, r2
 800870e:	0035      	movs	r5, r6
 8008710:	e7a6      	b.n	8008660 <_svfiprintf_r+0xd0>
 8008712:	2301      	movs	r3, #1
 8008714:	425b      	negs	r3, r3
 8008716:	e7d0      	b.n	80086ba <_svfiprintf_r+0x12a>
 8008718:	2300      	movs	r3, #0
 800871a:	200a      	movs	r0, #10
 800871c:	001a      	movs	r2, r3
 800871e:	3501      	adds	r5, #1
 8008720:	6063      	str	r3, [r4, #4]
 8008722:	7829      	ldrb	r1, [r5, #0]
 8008724:	1c6e      	adds	r6, r5, #1
 8008726:	3930      	subs	r1, #48	; 0x30
 8008728:	2909      	cmp	r1, #9
 800872a:	d903      	bls.n	8008734 <_svfiprintf_r+0x1a4>
 800872c:	2b00      	cmp	r3, #0
 800872e:	d0c5      	beq.n	80086bc <_svfiprintf_r+0x12c>
 8008730:	9209      	str	r2, [sp, #36]	; 0x24
 8008732:	e7c3      	b.n	80086bc <_svfiprintf_r+0x12c>
 8008734:	4342      	muls	r2, r0
 8008736:	2301      	movs	r3, #1
 8008738:	1852      	adds	r2, r2, r1
 800873a:	0035      	movs	r5, r6
 800873c:	e7f1      	b.n	8008722 <_svfiprintf_r+0x192>
 800873e:	ab07      	add	r3, sp, #28
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	003a      	movs	r2, r7
 8008744:	4b10      	ldr	r3, [pc, #64]	; (8008788 <_svfiprintf_r+0x1f8>)
 8008746:	0021      	movs	r1, r4
 8008748:	9803      	ldr	r0, [sp, #12]
 800874a:	f7fe f8b1 	bl	80068b0 <_printf_float>
 800874e:	9004      	str	r0, [sp, #16]
 8008750:	9b04      	ldr	r3, [sp, #16]
 8008752:	3301      	adds	r3, #1
 8008754:	d1d3      	bne.n	80086fe <_svfiprintf_r+0x16e>
 8008756:	89bb      	ldrh	r3, [r7, #12]
 8008758:	980d      	ldr	r0, [sp, #52]	; 0x34
 800875a:	065b      	lsls	r3, r3, #25
 800875c:	d400      	bmi.n	8008760 <_svfiprintf_r+0x1d0>
 800875e:	e72e      	b.n	80085be <_svfiprintf_r+0x2e>
 8008760:	2001      	movs	r0, #1
 8008762:	4240      	negs	r0, r0
 8008764:	e72b      	b.n	80085be <_svfiprintf_r+0x2e>
 8008766:	ab07      	add	r3, sp, #28
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	003a      	movs	r2, r7
 800876c:	4b06      	ldr	r3, [pc, #24]	; (8008788 <_svfiprintf_r+0x1f8>)
 800876e:	0021      	movs	r1, r4
 8008770:	9803      	ldr	r0, [sp, #12]
 8008772:	f7fe fb57 	bl	8006e24 <_printf_i>
 8008776:	e7ea      	b.n	800874e <_svfiprintf_r+0x1be>
 8008778:	08009fe4 	.word	0x08009fe4
 800877c:	08009fea 	.word	0x08009fea
 8008780:	08009fee 	.word	0x08009fee
 8008784:	080068b1 	.word	0x080068b1
 8008788:	080084cd 	.word	0x080084cd

0800878c <_sbrk_r>:
 800878c:	2300      	movs	r3, #0
 800878e:	b570      	push	{r4, r5, r6, lr}
 8008790:	4c06      	ldr	r4, [pc, #24]	; (80087ac <_sbrk_r+0x20>)
 8008792:	0005      	movs	r5, r0
 8008794:	0008      	movs	r0, r1
 8008796:	6023      	str	r3, [r4, #0]
 8008798:	f7fd fc46 	bl	8006028 <_sbrk>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d103      	bne.n	80087a8 <_sbrk_r+0x1c>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d000      	beq.n	80087a8 <_sbrk_r+0x1c>
 80087a6:	602b      	str	r3, [r5, #0]
 80087a8:	bd70      	pop	{r4, r5, r6, pc}
 80087aa:	46c0      	nop			; (mov r8, r8)
 80087ac:	20000548 	.word	0x20000548

080087b0 <__ascii_mbtowc>:
 80087b0:	b082      	sub	sp, #8
 80087b2:	2900      	cmp	r1, #0
 80087b4:	d100      	bne.n	80087b8 <__ascii_mbtowc+0x8>
 80087b6:	a901      	add	r1, sp, #4
 80087b8:	1e10      	subs	r0, r2, #0
 80087ba:	d006      	beq.n	80087ca <__ascii_mbtowc+0x1a>
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d006      	beq.n	80087ce <__ascii_mbtowc+0x1e>
 80087c0:	7813      	ldrb	r3, [r2, #0]
 80087c2:	600b      	str	r3, [r1, #0]
 80087c4:	7810      	ldrb	r0, [r2, #0]
 80087c6:	1e43      	subs	r3, r0, #1
 80087c8:	4198      	sbcs	r0, r3
 80087ca:	b002      	add	sp, #8
 80087cc:	4770      	bx	lr
 80087ce:	2002      	movs	r0, #2
 80087d0:	4240      	negs	r0, r0
 80087d2:	e7fa      	b.n	80087ca <__ascii_mbtowc+0x1a>

080087d4 <memmove>:
 80087d4:	b510      	push	{r4, lr}
 80087d6:	4288      	cmp	r0, r1
 80087d8:	d902      	bls.n	80087e0 <memmove+0xc>
 80087da:	188b      	adds	r3, r1, r2
 80087dc:	4298      	cmp	r0, r3
 80087de:	d303      	bcc.n	80087e8 <memmove+0x14>
 80087e0:	2300      	movs	r3, #0
 80087e2:	e007      	b.n	80087f4 <memmove+0x20>
 80087e4:	5c8b      	ldrb	r3, [r1, r2]
 80087e6:	5483      	strb	r3, [r0, r2]
 80087e8:	3a01      	subs	r2, #1
 80087ea:	d2fb      	bcs.n	80087e4 <memmove+0x10>
 80087ec:	bd10      	pop	{r4, pc}
 80087ee:	5ccc      	ldrb	r4, [r1, r3]
 80087f0:	54c4      	strb	r4, [r0, r3]
 80087f2:	3301      	adds	r3, #1
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d1fa      	bne.n	80087ee <memmove+0x1a>
 80087f8:	e7f8      	b.n	80087ec <memmove+0x18>

080087fa <__malloc_lock>:
 80087fa:	4770      	bx	lr

080087fc <__malloc_unlock>:
 80087fc:	4770      	bx	lr

080087fe <_realloc_r>:
 80087fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008800:	0007      	movs	r7, r0
 8008802:	000d      	movs	r5, r1
 8008804:	0016      	movs	r6, r2
 8008806:	2900      	cmp	r1, #0
 8008808:	d105      	bne.n	8008816 <_realloc_r+0x18>
 800880a:	0011      	movs	r1, r2
 800880c:	f7ff fe00 	bl	8008410 <_malloc_r>
 8008810:	0004      	movs	r4, r0
 8008812:	0020      	movs	r0, r4
 8008814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008816:	2a00      	cmp	r2, #0
 8008818:	d103      	bne.n	8008822 <_realloc_r+0x24>
 800881a:	f7ff fdaf 	bl	800837c <_free_r>
 800881e:	0034      	movs	r4, r6
 8008820:	e7f7      	b.n	8008812 <_realloc_r+0x14>
 8008822:	f000 f81e 	bl	8008862 <_malloc_usable_size_r>
 8008826:	002c      	movs	r4, r5
 8008828:	42b0      	cmp	r0, r6
 800882a:	d2f2      	bcs.n	8008812 <_realloc_r+0x14>
 800882c:	0031      	movs	r1, r6
 800882e:	0038      	movs	r0, r7
 8008830:	f7ff fdee 	bl	8008410 <_malloc_r>
 8008834:	1e04      	subs	r4, r0, #0
 8008836:	d0ec      	beq.n	8008812 <_realloc_r+0x14>
 8008838:	0029      	movs	r1, r5
 800883a:	0032      	movs	r2, r6
 800883c:	f7ff faa1 	bl	8007d82 <memcpy>
 8008840:	0029      	movs	r1, r5
 8008842:	0038      	movs	r0, r7
 8008844:	f7ff fd9a 	bl	800837c <_free_r>
 8008848:	e7e3      	b.n	8008812 <_realloc_r+0x14>

0800884a <__ascii_wctomb>:
 800884a:	1e0b      	subs	r3, r1, #0
 800884c:	d004      	beq.n	8008858 <__ascii_wctomb+0xe>
 800884e:	2aff      	cmp	r2, #255	; 0xff
 8008850:	d904      	bls.n	800885c <__ascii_wctomb+0x12>
 8008852:	238a      	movs	r3, #138	; 0x8a
 8008854:	6003      	str	r3, [r0, #0]
 8008856:	3b8b      	subs	r3, #139	; 0x8b
 8008858:	0018      	movs	r0, r3
 800885a:	4770      	bx	lr
 800885c:	700a      	strb	r2, [r1, #0]
 800885e:	2301      	movs	r3, #1
 8008860:	e7fa      	b.n	8008858 <__ascii_wctomb+0xe>

08008862 <_malloc_usable_size_r>:
 8008862:	1f0b      	subs	r3, r1, #4
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	1f18      	subs	r0, r3, #4
 8008868:	2b00      	cmp	r3, #0
 800886a:	da01      	bge.n	8008870 <_malloc_usable_size_r+0xe>
 800886c:	580b      	ldr	r3, [r1, r0]
 800886e:	18c0      	adds	r0, r0, r3
 8008870:	4770      	bx	lr
	...

08008874 <_init>:
 8008874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008876:	46c0      	nop			; (mov r8, r8)
 8008878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887a:	bc08      	pop	{r3}
 800887c:	469e      	mov	lr, r3
 800887e:	4770      	bx	lr

08008880 <_fini>:
 8008880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008882:	46c0      	nop			; (mov r8, r8)
 8008884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008886:	bc08      	pop	{r3}
 8008888:	469e      	mov	lr, r3
 800888a:	4770      	bx	lr
